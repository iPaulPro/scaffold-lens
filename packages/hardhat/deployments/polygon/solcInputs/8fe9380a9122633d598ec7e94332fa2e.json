{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/TokenGatedCollectModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {ICollectModule} from \"lens-modules/contracts/modules/interfaces/ICollectModule.sol\";\nimport {LensModuleMetadata} from \"lens-modules/contracts/modules/LensModuleMetadata.sol\";\nimport {IModuleRegistry} from \"lens-modules/contracts/interfaces/IModuleRegistry.sol\";\nimport {BaseFeeCollectModule} from \"lens-modules/contracts/modules/act/collect/base/BaseFeeCollectModule.sol\";\nimport {BaseFeeCollectModuleInitData, BaseProfilePublicationData} from \"lens-modules/contracts/modules/interfaces/IBaseFeeCollectModule.sol\";\nimport {ModuleTypes} from \"lens-modules/contracts/modules/libraries/constants/ModuleTypes.sol\";\nimport {LensModule} from \"lens-modules/contracts/modules/LensModule.sol\";\nimport {Errors} from \"lens-modules/contracts/modules/constants/Errors.sol\";\n\ninterface IToken {\n    /**\n     * @dev Returns the amount of ERC20/ERC721 tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n}\n\n/**\n * @notice A struct containing the recipient address and the fraction of the fee they should receive.\n *\n * @param recipient The address of the recipient.\n * @param split The fraction of the fee they should receive, as a fraction of BPS_MAX (10 000).\n */\nstruct RecipientData {\n    address recipient;\n    uint16 split; // fraction of BPS_MAX (10 000)\n}\n\n/**\n * @notice A struct containing the necessary data to execute TokenGated references.\n *\n * @param tokenAddress The address of ERC20/ERC721 token used for gating the collect.\n * @param minThreshold The minimum balance threshold of the gated token required to execute a collect.\n */\nstruct GateParams {\n    address tokenAddress;\n    uint256 minThreshold;\n}\n\n/**\n * @notice A struct containing the necessary data to execute collect actions on a publication.\n *\n * @param amount The collecting cost associated with this publication. Cannot be 0.\n * @param collectLimit The maximum number of collects for this publication. 0 for no limit.\n * @param currency The currency associated with this publication.\n * @param currentCollects The current number of collects for this publication.\n * @param referralFee The referral fee associated with this publication.\n * @param followerOnly True if only followers of publisher may collect the post.\n * @param endTimestamp The end timestamp after which collecting is impossible. 0 for no expiry.\n * @param recipients Array of RecipientData items to split collect fees across multiple recipients.\n * @param gateParams The GateParams struct containing the gating token address and minimum balance threshold.\n */\nstruct TokenGatedCollectPublicationData {\n    uint160 amount;\n    uint96 collectLimit;\n    address currency;\n    uint96 currentCollects;\n    uint16 referralFee;\n    bool followerOnly;\n    uint72 endTimestamp;\n    RecipientData[] recipients;\n    GateParams gateParams;\n}\n\nerror GateParamsInvalid();\nerror InvalidRecipientSplits();\nerror RecipientSplitCannotBeZero();\nerror NotEnoughBalance();\n\ncontract TokenGatedCollectModule is BaseFeeCollectModule, LensModuleMetadata {\n    using SafeERC20 for IERC20;\n\n    uint256 internal constant UINT256_BYTES = 32;\n\n    event TokenGatedCollectCreated(\n        uint256 indexed profileId,\n        uint256 indexed pubId,\n        address tokenAddress,\n        uint256 minThreshold\n    );\n\n    event ModuleRegistered();\n\n    mapping(uint256 profileId => mapping(uint256 pubId => GateParams gateParams))\n        internal _gateParams;\n\n    mapping(uint256 profileId => mapping(uint256 pubId => RecipientData[]))\n        internal _recipients;\n\n    constructor(\n        address hub,\n        address actionModule,\n        address moduleRegistry,\n        address moduleOwner\n    )\n        Ownable()\n        BaseFeeCollectModule(hub, actionModule, moduleRegistry)\n        LensModuleMetadata()\n    {\n        _transferOwnership(moduleOwner);\n    }\n\n    function initializePublicationCollectModule(\n        uint256 profileId,\n        uint256 pubId,\n        address /* transactionExecutor */,\n        bytes calldata data\n    ) external override onlyActionModule returns (bytes memory) {\n        (\n            uint160 amount,\n            uint96 collectLimit,\n            address currency,\n            uint16 referralFee,\n            bool followerOnly,\n            uint72 endTimestamp,\n            RecipientData[] memory recipients,\n            GateParams memory gateParams\n        ) = abi.decode(\n                data,\n                (\n                    uint160,\n                    uint96,\n                    address,\n                    uint16,\n                    bool,\n                    uint72,\n                    RecipientData[],\n                    GateParams\n                )\n            );\n\n        _validateGateParams(gateParams);\n        _gateParams[profileId][pubId] = gateParams;\n\n        BaseFeeCollectModuleInitData\n            memory baseInitData = BaseFeeCollectModuleInitData({\n                amount: amount,\n                collectLimit: collectLimit,\n                currency: currency,\n                referralFee: referralFee,\n                followerOnly: followerOnly,\n                endTimestamp: endTimestamp,\n                recipient: address(0)\n            });\n\n        // Zero amount for collect doesn't make sense if there are recipients\n        if (\n            recipients.length > 0 &&\n            (baseInitData.amount == 0 || currency == address(0))\n        ) {\n            revert Errors.InitParamsInvalid();\n        }\n\n        _validateBaseInitData(baseInitData);\n        _validateAndStoreRecipients(recipients, profileId, pubId);\n        _storeBasePublicationCollectParameters(profileId, pubId, baseInitData);\n\n        emit TokenGatedCollectCreated(\n            profileId,\n            pubId,\n            gateParams.tokenAddress,\n            gateParams.minThreshold\n        );\n\n        return data;\n    }\n\n    /**\n     * @inheritdoc ICollectModule\n     * @notice Processes a collect by:\n     *  1. Validating that collect action meets all needed criteria\n     *  2. Processing the collect action either with or without referral\n     *\n     * @param processCollectParams Collect action parameters (see ModuleTypes.ProcessCollectParams struct)\n     */\n    function processCollect(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) external override onlyActionModule returns (bytes memory) {\n        _validateTokenBalance(\n            processCollectParams.collectorProfileId,\n            processCollectParams.publicationCollectedProfileId,\n            processCollectParams.publicationCollectedId\n        );\n        _validateAndStoreCollect(processCollectParams);\n\n        if (processCollectParams.referrerProfileIds.length == 0) {\n            _processCollect(processCollectParams);\n        } else {\n            _processCollectWithReferral(processCollectParams);\n        }\n\n        return \"\";\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public pure override(BaseFeeCollectModule, LensModule) returns (bool) {\n        return\n            BaseFeeCollectModule.supportsInterface(interfaceID) ||\n            LensModule.supportsInterface(interfaceID);\n    }\n\n    /**\n     * @notice Returns the publication data for a given publication, or an empty struct if that publication was not\n     * initialized with this module.\n     *\n     * @param profileId The token ID of the profile mapped to the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return The TokenGatedCollectPublicationData struct mapped to that publication.\n     */\n    function getPublicationData(\n        uint256 profileId,\n        uint256 pubId\n    ) external view virtual returns (TokenGatedCollectPublicationData memory) {\n        BaseProfilePublicationData memory baseData = getBasePublicationData(\n            profileId,\n            pubId\n        );\n        return\n            TokenGatedCollectPublicationData({\n                amount: baseData.amount,\n                collectLimit: baseData.collectLimit,\n                currency: baseData.currency,\n                currentCollects: baseData.currentCollects,\n                referralFee: baseData.referralFee,\n                followerOnly: baseData.followerOnly,\n                endTimestamp: baseData.endTimestamp,\n                gateParams: _gateParams[profileId][pubId],\n                recipients: _recipients[profileId][pubId]\n            });\n    }\n\n    /**\n     * @dev Validates the gate parameters passed during initialization.\n     *\n     * @param gateParams The GateParams struct containing the gating token address and minimum balance threshold.\n     */\n    function _validateGateParams(GateParams memory gateParams) internal view {\n        // Checking if the tokenAddress resembles ERC20/ERC721 token (by calling balanceOf() function).\n        (bool success, bytes memory result) = gateParams\n            .tokenAddress\n            .staticcall(\n                abi.encodeWithSelector(IToken.balanceOf.selector, address(this))\n            );\n        // We don't check if the contract exists because we expect the return data anyway.\n        if (\n            gateParams.minThreshold == 0 ||\n            !success ||\n            result.length != UINT256_BYTES\n        ) {\n            revert GateParamsInvalid();\n        }\n    }\n\n    /**\n     * @dev Validates the profile's owner balance of gating token. It can work with both ERC20 and ERC721 as both\n     * interfaces shares `balanceOf` function prototype.\n     *\n     * @param collectorProfileId The ID of the profile trying to collect.\n     * @param publicationCollectedProfileId The ID of the publication's author.\n     * @param publicationCollectedId The ID of the publication.\n     *\n     * @return uint256 The gate token balance of the profile trying to collect.\n     */\n    function _validateTokenBalance(\n        uint256 collectorProfileId,\n        uint256 publicationCollectedProfileId,\n        uint256 publicationCollectedId\n    ) internal view returns (uint256) {\n        GateParams memory gateParams = _gateParams[\n            publicationCollectedProfileId\n        ][publicationCollectedId];\n        uint256 balance = IToken(gateParams.tokenAddress).balanceOf(\n            IERC721(HUB).ownerOf(collectorProfileId)\n        );\n        if (\n            collectorProfileId != publicationCollectedProfileId &&\n            balance < gateParams.minThreshold\n        ) {\n            revert NotEnoughBalance();\n        }\n        return balance;\n    }\n\n    /**\n     * @dev Validates the recipients array and stores them to (a separate from Base) storage.\n     *\n     * @param recipients An array of recipients\n     * @param profileId The profile ID who is publishing the publication.\n     * @param pubId The associated publication's LensHub publication ID.\n     */\n    function _validateAndStoreRecipients(\n        RecipientData[] memory recipients,\n        uint256 profileId,\n        uint256 pubId\n    ) internal {\n        uint256 len = recipients.length;\n\n        if (len == 0) {\n            return;\n        }\n\n        // Check recipient splits sum to 10 000 BPS (100%)\n        uint256 totalSplits;\n        uint256 i;\n        while (i < len) {\n            if (recipients[i].split == 0) revert RecipientSplitCannotBeZero();\n            totalSplits += recipients[i].split;\n\n            // Store each recipient while looping - avoids extra gas costs in successful cases\n            _recipients[profileId][pubId].push(recipients[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (totalSplits != BPS_MAX) {\n            revert InvalidRecipientSplits();\n        }\n    }\n\n    /**\n     * @dev Transfers the fee to multiple recipients.\n     *\n     * @inheritdoc BaseFeeCollectModule\n     */\n    function _transferToRecipients(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams,\n        address currency,\n        uint256 amount\n    ) internal override {\n        RecipientData[] memory recipients = _recipients[\n            processCollectParams.publicationCollectedProfileId\n        ][processCollectParams.publicationCollectedId];\n        uint256 len = recipients.length;\n\n        uint256 i;\n        while (i < len) {\n            uint256 amountForRecipient = (amount * recipients[i].split) /\n                BPS_MAX;\n            if (amountForRecipient != 0)\n                IERC20(currency).safeTransferFrom(\n                    processCollectParams.transactionExecutor,\n                    recipients[i].recipient,\n                    amountForRecipient\n                );\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Internal processing of a collect:\n     *  1. Calculation of fees\n     *  2. Validation that fees are what collector expected\n     *  3. Transfer of fees to recipient(-s) and treasury\n     *\n     * @param processCollectParams Parameters of the collect\n     */\n    function _processCollect(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) internal virtual override {\n        uint256 amount = calculateFee(processCollectParams);\n        if (amount == 0) {\n            return;\n        }\n\n        address currency = _dataByPublicationByProfile[\n            processCollectParams.publicationCollectedProfileId\n        ][processCollectParams.publicationCollectedId].currency;\n        _validateDataIsExpected(processCollectParams.data, currency, amount);\n\n        (address treasury, uint16 treasuryFee) = _treasuryData();\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\n\n        if (treasuryAmount > 0) {\n            IERC20(currency).safeTransferFrom(\n                processCollectParams.transactionExecutor,\n                treasury,\n                treasuryAmount\n            );\n        }\n\n        // Send amount after treasury cut, to all recipients\n        _transferToRecipients(\n            processCollectParams,\n            currency,\n            amount - treasuryAmount\n        );\n    }\n\n    /**\n     * @dev Internal processing of a collect with a referrals (if any).\n     *\n     * Same as _processCollect, but also includes transfer to referrals (if any):\n     *  1. Calculation of fees\n     *  2. Validation that fees are what collector expected\n     *  3. Transfer of fees to treasury, referrals (if any) and recipients\n     *\n     * @param processCollectParams Parameters of the collect\n     */\n    function _processCollectWithReferral(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) internal virtual override {\n        uint256 amount = calculateFee(processCollectParams);\n        if (amount == 0) {\n            return;\n        }\n\n        address currency = _dataByPublicationByProfile[\n            processCollectParams.publicationCollectedProfileId\n        ][processCollectParams.publicationCollectedId].currency;\n\n        _validateDataIsExpected(processCollectParams.data, currency, amount);\n\n        (address treasury, uint16 treasuryFee) = _treasuryData();\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\n\n        if (treasuryAmount > 0) {\n            IERC20(currency).safeTransferFrom(\n                processCollectParams.transactionExecutor,\n                treasury,\n                treasuryAmount\n            );\n        }\n\n        uint256 amountAfterReferrals = _transferToReferrals(\n            processCollectParams,\n            currency,\n            amount - treasuryAmount\n        );\n\n        _transferToRecipients(\n            processCollectParams,\n            currency,\n            amountAfterReferrals\n        );\n    }\n}\n"
    },
    "lens-modules/contracts/interfaces/IERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title IERC721Burnable\n * @author Lens Protocol\n *\n * @notice Extension of ERC-721 including a function that allows the token to be burned.\n */\ninterface IERC721Burnable {\n    /**\n     * @notice Burns an NFT, removing it from circulation and essentially destroying it.\n     * @custom:permission Owner of the NFT.\n     *\n     * @param tokenId The token ID of the token to burn.\n     */\n    function burn(uint256 tokenId) external;\n}\n"
    },
    "lens-modules/contracts/interfaces/IERC721MetaTx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title IERC721MetaTx\n * @author Lens Protocol\n *\n * @notice Extension of ERC-721 including meta-tx signatures related functions.\n */\ninterface IERC721MetaTx {\n    /**\n     * @notice Returns the current signature nonce of the given signer.\n     *\n     * @param signer The address for which to query the nonce.\n     *\n     * @return uint256 The current nonce of the given signer.\n     */\n    function nonces(address signer) external view returns (uint256);\n\n    /**\n     * @notice Returns the EIP-712 domain separator for this contract.\n     *\n     * @return bytes32 The domain separator.\n     */\n    function getDomainSeparator() external view returns (bytes32);\n}\n"
    },
    "lens-modules/contracts/interfaces/IERC721Timestamped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from '../libraries/constants/Types.sol';\n\n/**\n * @title IERC721Timestamped\n * @author Lens Protocol\n *\n * @notice Extension of ERC-721 including a struct for token data, which contains the owner and the mint timestamp, as\n * well as their associated getters.\n */\ninterface IERC721Timestamped {\n    /**\n     * @notice Returns the mint timestamp associated with a given NFT.\n     *\n     * @param tokenId The token ID of the NFT to query the mint timestamp for.\n     *\n     * @return uint256 Mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary\n     * padding.\n     */\n    function mintTimestampOf(uint256 tokenId) external view returns (uint256);\n\n    /**\n     * @notice Returns the token data associated with a given NFT. This allows fetching the token owner and\n     * mint timestamp in a single call.\n     *\n     * @param tokenId The token ID of the NFT to query the token data for.\n     *\n     * @return TokenData A struct containing both the owner address and the mint timestamp.\n     */\n    function tokenDataOf(uint256 tokenId) external view returns (Types.TokenData memory);\n\n    /**\n     * @notice Returns whether a token with the given token ID exists.\n     *\n     * @param tokenId The token ID of the NFT to check existence for.\n     *\n     * @return bool True if the token exists.\n     */\n    function exists(uint256 tokenId) external view returns (bool);\n\n    /**\n     * @notice Returns the amount of tokens in circulation.\n     *\n     * @return uint256 The current total supply of tokens.\n     */\n    function totalSupply() external view returns (uint256);\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport {IERC721Timestamped} from '../interfaces/IERC721Timestamped.sol';\nimport {IERC721Burnable} from '../interfaces/IERC721Burnable.sol';\nimport {IERC721MetaTx} from '../interfaces/IERC721MetaTx.sol';\nimport {IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\n\ninterface ILensERC721 is IERC721, IERC721Timestamped, IERC721Burnable, IERC721MetaTx, IERC721Metadata {}\n"
    },
    "lens-modules/contracts/interfaces/ILensGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from '../libraries/constants/Types.sol';\n\n/**\n * @title ILensGovernable\n * @author Lens Protocol\n *\n * @notice This is the interface for the Lens Protocol main governance functions.\n */\ninterface ILensGovernable {\n    /**\n     * @notice Sets the privileged governance role.\n     * @custom:permissions Governance.\n     *\n     * @param newGovernance The new governance address to set.\n     */\n    function setGovernance(address newGovernance) external;\n\n    /**\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state.\n     * @custom:permissions Governance.\n     *\n     * @param newEmergencyAdmin The new emergency admin address to set.\n     */\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\n\n    /**\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state.\n     * @custom:permissions Governance or Emergency Admin. Emergency Admin can only restrict more.\n     *\n     * @param newState The state to set. It can be one of the following:\n     *  - Unpaused: The protocol is fully operational.\n     *  - PublishingPaused: The protocol is paused for publishing, but it is still operational for others operations.\n     *  - Paused: The protocol is paused for all operations.\n     */\n    function setState(Types.ProtocolState newState) external;\n\n    /**\n     * @notice Adds or removes a profile creator from the whitelist.\n     * @custom:permissions Governance.\n     *\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\n     * @param whitelist Whether or not the profile creator should be whitelisted.\n     */\n    function whitelistProfileCreator(address profileCreator, bool whitelist) external;\n\n    /**\n     * @notice Sets the profile token URI contract.\n     * @custom:permissions Governance.\n     *\n     * @param profileTokenURIContract The profile token URI contract to set.\n     */\n    function setProfileTokenURIContract(address profileTokenURIContract) external;\n\n    /**\n     * @notice Sets the follow token URI contract.\n     * @custom:permissions Governance.\n     *\n     * @param followTokenURIContract The follow token URI contract to set.\n     */\n    function setFollowTokenURIContract(address followTokenURIContract) external;\n\n    /**\n     * @notice Sets the treasury address.\n     * @custom:permissions Governance\n     *\n     * @param newTreasury The new treasury address to set.\n     */\n    function setTreasury(address newTreasury) external;\n\n    /**\n     * @notice Sets the treasury fee.\n     * @custom:permissions Governance\n     *\n     * @param newTreasuryFee The new treasury fee to set.\n     */\n    function setTreasuryFee(uint16 newTreasuryFee) external;\n\n    /**\n     * @notice Returns the currently configured governance address.\n     *\n     * @return address The address of the currently configured governance.\n     */\n    function getGovernance() external view returns (address);\n\n    /**\n     * @notice Gets the state currently set in the protocol. It could be a global pause, a publishing pause or an\n     * unpaused state.\n     * @custom:permissions Anyone.\n     *\n     * @return Types.ProtocolState The state currently set in the protocol.\n     */\n    function getState() external view returns (Types.ProtocolState);\n\n    /**\n     * @notice Returns whether or not a profile creator is whitelisted.\n     *\n     * @param profileCreator The address of the profile creator to check.\n     *\n     * @return bool True if the profile creator is whitelisted, false otherwise.\n     */\n    function isProfileCreatorWhitelisted(address profileCreator) external view returns (bool);\n\n    /**\n     * @notice Returns the treasury address.\n     *\n     * @return address The treasury address.\n     */\n    function getTreasury() external view returns (address);\n\n    /**\n     * @notice Returns the treasury fee.\n     *\n     * @return uint16 The treasury fee.\n     */\n    function getTreasuryFee() external view returns (uint16);\n\n    /**\n     * @notice Returns the treasury address and treasury fee in a single call.\n     *\n     * @return tuple First, the treasury address, second, the treasury fee.\n     */\n    function getTreasuryData() external view returns (address, uint16);\n\n    /**\n     * @notice Gets the profile token URI contract.\n     *\n     * @return address The profile token URI contract.\n     */\n    function getProfileTokenURIContract() external view returns (address);\n\n    /**\n     * @notice Gets the follow token URI contract.\n     *\n     * @return address The follow token URI contract.\n     */\n    function getFollowTokenURIContract() external view returns (address);\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensHub.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {ILensProtocol} from '../interfaces/ILensProtocol.sol';\nimport {ILensGovernable} from '../interfaces/ILensGovernable.sol';\nimport {ILensHubEventHooks} from '../interfaces/ILensHubEventHooks.sol';\nimport {ILensImplGetters} from '../interfaces/ILensImplGetters.sol';\nimport {ILensProfiles} from '../interfaces/ILensProfiles.sol';\nimport {ILensVersion} from '../interfaces/ILensVersion.sol';\n\ninterface ILensHub is\n    ILensProfiles,\n    ILensProtocol,\n    ILensGovernable,\n    ILensHubEventHooks,\n    ILensImplGetters,\n    ILensVersion\n{}\n"
    },
    "lens-modules/contracts/interfaces/ILensHubEventHooks.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title ILensHubEventHooks\n * @author Lens Protocol\n *\n * @notice This is the interface for the LensHub contract's event hooks. As we want most of the core events to be\n * emitted by the LensHub contract, event hooks are needed for core events generated by pheripheral contracts.\n */\ninterface ILensHubEventHooks {\n    /**\n     * @dev Helper function to emit an `Unfollowed` event from the hub, to be consumed by indexers to track unfollows.\n     * @custom:permissions FollowNFT of the Profile unfollowed.\n     *\n     * @param unfollowerProfileId The ID of the profile that executed the unfollow.\n     * @param idOfProfileUnfollowed The ID of the profile that was unfollowed.\n     * @param transactionExecutor The address of the account executing the unfollow operation.\n     */\n    function emitUnfollowedEvent(\n        uint256 unfollowerProfileId,\n        uint256 idOfProfileUnfollowed,\n        address transactionExecutor\n    ) external;\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensImplGetters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title ILensImplGetters\n * @author Lens Protocol\n *\n * @notice This is the interface for the LensHub contract's implementation getters. These implementations will be used\n * for deploying each respective contract for each profile.\n */\ninterface ILensImplGetters {\n    /**\n     * @notice Returns the Follow NFT implementation address that is used for all deployed Follow NFTs.\n     *\n     * @return address The Follow NFT implementation address.\n     */\n    function getFollowNFTImpl() external view returns (address);\n\n    /**\n     * @notice Returns the Collect NFT implementation address that is used for each new deployed Collect NFT.\n     * @custom:pending-deprecation\n     *\n     * @return address The Collect NFT implementation address.\n     */\n    function getLegacyCollectNFTImpl() external view returns (address);\n\n    /**\n     * @notice Returns the address of the registry that stores all modules that are used by the Lens Protocol.\n     *\n     * @return address The address of the Module Registry contract.\n     */\n    function getModuleRegistry() external view returns (address);\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensProfiles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {ILensERC721} from '../interfaces/ILensERC721.sol';\n\ninterface ILensProfiles is ILensERC721 {\n    /**\n     * @notice DANGER: Triggers disabling the profile protection mechanism for the msg.sender, which will allow\n     * transfers or approvals over profiles held by it.\n     * Disabling the mechanism will have a timelock before it becomes effective, allowing the owner to re-enable\n     * the protection back in case of being under attack.\n     * The protection layer only applies to EOA wallets.\n     */\n    function DANGER__disableTokenGuardian() external;\n\n    /**\n     * @notice Enables back the profile protection mechanism for the msg.sender, preventing profile transfers or\n     * approvals (except when revoking them).\n     * The protection layer only applies to EOA wallets.\n     */\n    function enableTokenGuardian() external;\n\n    /**\n     * @notice Returns the timestamp at which the Token Guardian will become effectively disabled.\n     *\n     * @param wallet The address to check the timestamp for.\n     *\n     * @return uint256 The timestamp at which the Token Guardian will become effectively disabled. Zero if enabled.\n     */\n    function getTokenGuardianDisablingTimestamp(address wallet) external view returns (uint256);\n\n    /**\n     * @notice allows transferring of profile but keeping the delegate settings\n     */\n    function transferFromKeepingDelegates(address from, address to, uint256 tokenId) external;\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensProtocol.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from '../libraries/constants/Types.sol';\n\n/**\n * @title ILensProtocol\n * @author Lens Protocol\n *\n * @notice This is the interface for Lens Protocol's core functions. It contains all the entry points for performing\n * social operations.\n */\ninterface ILensProtocol {\n    /**\n     * @notice Creates a profile with the specified parameters, minting a Profile NFT to the given recipient.\n     * @custom:permissions Any whitelisted profile creator.\n     *\n     * @param createProfileParams A CreateProfileParams struct containing the needed params.\n     */\n    function createProfile(Types.CreateProfileParams calldata createProfileParams) external returns (uint256);\n\n    /**\n     * @notice Sets the metadata URI for the given profile.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param profileId The token ID of the profile to set the metadata URI for.\n     * @param metadataURI The metadata URI to set for the given profile.\n     */\n    function setProfileMetadataURI(uint256 profileId, string calldata metadataURI) external;\n\n    /**\n     * @custom:meta-tx setProfileMetadataURI.\n     */\n    function setProfileMetadataURIWithSig(\n        uint256 profileId,\n        string calldata metadataURI,\n        Types.EIP712Signature calldata signature\n    ) external;\n\n    /**\n     * @notice Sets the follow module for the given profile.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param profileId The token ID of the profile to set the follow module for.\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\n     */\n    function setFollowModule(uint256 profileId, address followModule, bytes calldata followModuleInitData) external;\n\n    /**\n     * @custom:meta-tx setFollowModule.\n     */\n    function setFollowModuleWithSig(\n        uint256 profileId,\n        address followModule,\n        bytes calldata followModuleInitData,\n        Types.EIP712Signature calldata signature\n    ) external;\n\n    /**\n     * @notice Changes the delegated executors configuration for the given profile. It allows setting the approvals for\n     * delegated executors in the specified configuration, as well as switching to it.\n     * @custom:permissions Profile Owner.\n     *\n     * @param delegatorProfileId The ID of the profile to which the delegated executor is being changed for.\n     * @param delegatedExecutors The array of delegated executors to set the approval for.\n     * @param approvals The array of booleans indicating the corresponding executor's new approval status.\n     * @param configNumber The number of the configuration where the executor approval state is being set.\n     * @param switchToGivenConfig A boolean indicating if the configuration must be switched to the one with the given\n     * number.\n     */\n    function changeDelegatedExecutorsConfig(\n        uint256 delegatorProfileId,\n        address[] calldata delegatedExecutors,\n        bool[] calldata approvals,\n        uint64 configNumber,\n        bool switchToGivenConfig\n    ) external;\n\n    /**\n     * @notice Changes the delegated executors configuration for the given profile under the current configuration.\n     * @custom:permissions Profile Owner.\n     *\n     * @param delegatorProfileId The ID of the profile to which the delegated executor is being changed for.\n     * @param delegatedExecutors The array of delegated executors to set the approval for.\n     * @param approvals The array of booleans indicating the corresponding executor's new approval status.\n     */\n    function changeDelegatedExecutorsConfig(\n        uint256 delegatorProfileId,\n        address[] calldata delegatedExecutors,\n        bool[] calldata approvals\n    ) external;\n\n    /**\n     * @custom:meta-tx changeDelegatedExecutorsConfig.\n     */\n    function changeDelegatedExecutorsConfigWithSig(\n        uint256 delegatorProfileId,\n        address[] calldata delegatedExecutors,\n        bool[] calldata approvals,\n        uint64 configNumber,\n        bool switchToGivenConfig,\n        Types.EIP712Signature calldata signature\n    ) external;\n\n    /**\n     * @notice Publishes a post.\n     * Post is the most basic publication type, and can be used to publish any kind of content.\n     * Posts can have these types of modules initialized:\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\n     *  - Reference module: a module handling the rules when referencing this post (e.g. token-gated comments)\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param postParams A PostParams struct containing the needed parameters.\n     *\n     * @return uint256 An integer representing the post's publication ID.\n     */\n    function post(Types.PostParams calldata postParams) external returns (uint256);\n\n    /**\n     * @custom:meta-tx post.\n     */\n    function postWithSig(\n        Types.PostParams calldata postParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256);\n\n    /**\n     * @notice Publishes a comment on the given publication.\n     * Comment is a type of reference publication that points to another publication.\n     * Comments can have these types of modules initialized:\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\n     *  - Reference module: a module handling the rules when referencing this comment (e.g. token-gated mirrors)\n     * Comments can have referrers (e.g. publications or profiles that helped to discover the pointed publication).\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param commentParams A CommentParams struct containing the needed parameters.\n     *\n     * @return uint256 An integer representing the comment's publication ID.\n     */\n    function comment(Types.CommentParams calldata commentParams) external returns (uint256);\n\n    /**\n     * @custom:meta-tx comment.\n     */\n    function commentWithSig(\n        Types.CommentParams calldata commentParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256);\n\n    /**\n     * @notice Publishes a mirror of the given publication.\n     * Mirror is a type of reference publication that points to another publication but doesn't have content.\n     * Mirrors don't have any modules initialized.\n     * Mirrors can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\n     * You cannot mirror a mirror, comment on a mirror, or quote a mirror.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param mirrorParams A MirrorParams struct containing the necessary parameters.\n     *\n     * @return uint256 An integer representing the mirror's publication ID.\n     */\n    function mirror(Types.MirrorParams calldata mirrorParams) external returns (uint256);\n\n    /**\n     * @custom:meta-tx mirror.\n     */\n    function mirrorWithSig(\n        Types.MirrorParams calldata mirrorParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256);\n\n    /**\n     * @notice Publishes a quote of the given publication.\n     * Quote is a type of reference publication similar to mirror, but it has content and modules.\n     * Quotes can have these types of modules initialized:\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\n     *  - Reference module: a module handling the rules when referencing this quote (e.g. token-gated comments on quote)\n     * Quotes can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\n     * Unlike mirrors, you can mirror a quote, comment on a quote, or quote a quote.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param quoteParams A QuoteParams struct containing the needed parameters.\n     *\n     * @return uint256 An integer representing the quote's publication ID.\n     */\n    function quote(Types.QuoteParams calldata quoteParams) external returns (uint256);\n\n    /**\n     * @custom:meta-tx quote.\n     */\n    function quoteWithSig(\n        Types.QuoteParams calldata quoteParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256);\n\n    /**\n     * @notice Follows given profiles, executing each profile's follow module logic (if any).\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @dev Both the `idsOfProfilesToFollow`, `followTokenIds`, and `datas` arrays must be of the same length,\n     * regardless if the profiles do not have a follow module set.\n     *\n     * @param followerProfileId The ID of the profile the follows are being executed for.\n     * @param idsOfProfilesToFollow The array of IDs of profiles to follow.\n     * @param followTokenIds The array of follow token IDs to use for each follow (0 if you don't own a follow token).\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\n     *\n     * @return uint256[] An array of follow token IDs representing the follow tokens created for each follow.\n     */\n    function follow(\n        uint256 followerProfileId,\n        uint256[] calldata idsOfProfilesToFollow,\n        uint256[] calldata followTokenIds,\n        bytes[] calldata datas\n    ) external returns (uint256[] memory);\n\n    /**\n     * @custom:meta-tx follow.\n     */\n    function followWithSig(\n        uint256 followerProfileId,\n        uint256[] calldata idsOfProfilesToFollow,\n        uint256[] calldata followTokenIds,\n        bytes[] calldata datas,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256[] memory);\n\n    /**\n     * @notice Unfollows given profiles.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param unfollowerProfileId The ID of the profile the unfollows are being executed for.\n     * @param idsOfProfilesToUnfollow The array of IDs of profiles to unfollow.\n     */\n    function unfollow(uint256 unfollowerProfileId, uint256[] calldata idsOfProfilesToUnfollow) external;\n\n    /**\n     * @custom:meta-tx unfollow.\n     */\n    function unfollowWithSig(\n        uint256 unfollowerProfileId,\n        uint256[] calldata idsOfProfilesToUnfollow,\n        Types.EIP712Signature calldata signature\n    ) external;\n\n    /**\n     * @notice Sets the block status for the given profiles. Changing a profile's block status to `true` (i.e. blocked),\n     * when will also force them to unfollow.\n     * Blocked profiles cannot perform any actions with the profile that blocked them: they cannot comment or mirror\n     * their publications, they cannot follow them, they cannot collect, tip them, etc.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @dev Both the `idsOfProfilesToSetBlockStatus` and `blockStatus` arrays must be of the same length.\n     *\n     * @param byProfileId The ID of the profile that is blocking/unblocking somebody.\n     * @param idsOfProfilesToSetBlockStatus The array of IDs of profiles to set block status.\n     * @param blockStatus The array of block statuses to use for each (true is blocked).\n     */\n    function setBlockStatus(\n        uint256 byProfileId,\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\n        bool[] calldata blockStatus\n    ) external;\n\n    /**\n     * @custom:meta-tx setBlockStatus.\n     */\n    function setBlockStatusWithSig(\n        uint256 byProfileId,\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\n        bool[] calldata blockStatus,\n        Types.EIP712Signature calldata signature\n    ) external;\n\n    /**\n     * @notice Collects a given publication via signature with the specified parameters.\n     * Collect can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\n     * @custom:permissions Collector Profile Owner or its Delegated Executor.\n     * @custom:pending-deprecation Collect modules were replaced by PublicationAction Collect modules in V2. This method\n     * is left here for backwards compatibility with posts made in V1 that had Collect modules.\n     *\n     * @param collectParams A CollectParams struct containing the parameters.\n     *\n     * @return uint256 An integer representing the minted token ID.\n     */\n    function collectLegacy(Types.LegacyCollectParams calldata collectParams) external returns (uint256);\n\n    /**\n     * @custom:meta-tx collect.\n     * @custom:pending-deprecation\n     */\n    function collectLegacyWithSig(\n        Types.LegacyCollectParams calldata collectParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256);\n\n    /**\n     * @notice Acts on a given publication with the specified parameters.\n     * You can act on a publication except a mirror (if it has at least one action module initialized).\n     * Actions can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\n     * @custom:permissions Actor Profile Owner or its Delegated Executor.\n     *\n     * @param publicationActionParams A PublicationActionParams struct containing the parameters.\n     *\n     * @return bytes Arbitrary data the action module returns.\n     */\n    function act(Types.PublicationActionParams calldata publicationActionParams) external returns (bytes memory);\n\n    /**\n     * @custom:meta-tx act.\n     */\n    function actWithSig(\n        Types.PublicationActionParams calldata publicationActionParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (bytes memory);\n\n    /**\n     * @dev This function is used to invalidate signatures by incrementing the nonce of the signer.\n     * @param increment The amount to increment the nonce by (max 255).\n     */\n    function incrementNonce(uint8 increment) external;\n\n    /////////////////////////////////\n    ///       VIEW FUNCTIONS      ///\n    /////////////////////////////////\n\n    /**\n     * @notice Returns whether or not `followerProfileId` is following `followedProfileId`.\n     *\n     * @param followerProfileId The ID of the profile whose following state should be queried.\n     * @param followedProfileId The ID of the profile whose followed state should be queried.\n     *\n     * @return bool True if `followerProfileId` is following `followedProfileId`, false otherwise.\n     */\n    function isFollowing(uint256 followerProfileId, uint256 followedProfileId) external view returns (bool);\n\n    /**\n     * @notice Returns whether the given address is approved as delegated executor, in the configuration with the given\n     * number, to act on behalf of the given profile.\n     *\n     * @param delegatorProfileId The ID of the profile to check the delegated executor approval for.\n     * @param delegatedExecutor The address to query the delegated executor approval for.\n     * @param configNumber The number of the configuration where the executor approval state is being queried.\n     *\n     * @return bool True if the address is approved as a delegated executor to act on behalf of the profile in the\n     * given configuration, false otherwise.\n     */\n    function isDelegatedExecutorApproved(\n        uint256 delegatorProfileId,\n        address delegatedExecutor,\n        uint64 configNumber\n    ) external view returns (bool);\n\n    /**\n     * @notice Returns whether the given address is approved as delegated executor, in the current configuration, to act\n     * on behalf of the given profile.\n     *\n     * @param delegatorProfileId The ID of the profile to check the delegated executor approval for.\n     * @param delegatedExecutor The address to query the delegated executor approval for.\n     *\n     * @return bool True if the address is approved as a delegated executor to act on behalf of the profile in the\n     * current configuration, false otherwise.\n     */\n    function isDelegatedExecutorApproved(\n        uint256 delegatorProfileId,\n        address delegatedExecutor\n    ) external view returns (bool);\n\n    /**\n     * @notice Returns the current delegated executor config number for the given profile.\n     *\n     * @param delegatorProfileId The ID of the profile from which the delegated executors config number is being queried\n     *\n     * @return uint256 The current delegated executor configuration number.\n     */\n    function getDelegatedExecutorsConfigNumber(uint256 delegatorProfileId) external view returns (uint64);\n\n    /**\n     * @notice Returns the previous used delegated executor config number for the given profile.\n     *\n     * @param delegatorProfileId The ID of the profile from which the delegated executors' previous configuration number\n     * set is being queried.\n     *\n     * @return uint256 The delegated executor configuration number previously set. It will coincide with the current\n     * configuration set if it was never switched from the default one.\n     */\n    function getDelegatedExecutorsPrevConfigNumber(uint256 delegatorProfileId) external view returns (uint64);\n\n    /**\n     * @notice Returns the maximum delegated executor config number for the given profile.\n     * This is the maximum config number that was ever used by this profile.\n     * When creating a new clean configuration, you can only use a number that is maxConfigNumber + 1.\n     *\n     * @param delegatorProfileId The ID of the profile from which the delegated executors' maximum configuration number\n     * set is being queried.\n     *\n     * @return uint256 The delegated executor maximum configuration number set.\n     */\n    function getDelegatedExecutorsMaxConfigNumberSet(uint256 delegatorProfileId) external view returns (uint64);\n\n    /**\n     * @notice Returns whether `profileId` is blocked by `byProfileId`.\n     * See setBlockStatus() for more information on how blocking works on the platform.\n     *\n     * @param profileId The ID of the profile whose blocked status should be queried.\n     * @param byProfileId The ID of the profile whose blocker status should be queried.\n     *\n     * @return bool True if `profileId` is blocked by `byProfileId`, false otherwise.\n     */\n    function isBlocked(uint256 profileId, uint256 byProfileId) external view returns (bool);\n\n    /**\n     * @notice Returns the URI associated with a given publication.\n     * This is used to store the publication's metadata, e.g.: content, images, etc.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return string The URI associated with a given publication.\n     */\n    function getContentURI(uint256 profileId, uint256 pubId) external view returns (string memory);\n\n    /**\n     * @notice Returns the full profile struct associated with a given profile token ID.\n     *\n     * @param profileId The token ID of the profile to query.\n     *\n     * @return Profile The profile struct of the given profile.\n     */\n    function getProfile(uint256 profileId) external view returns (Types.Profile memory);\n\n    /**\n     * @notice Returns the full publication struct for a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return Publication The publication struct associated with the queried publication.\n     */\n    function getPublication(uint256 profileId, uint256 pubId) external view returns (Types.PublicationMemory memory);\n\n    /**\n     * @notice Returns the type of a given publication.\n     * The type can be one of the following (see PublicationType enum):\n     * - Nonexistent\n     * - Post\n     * - Comment\n     * - Mirror\n     * - Quote\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return PublicationType The publication type of the queried publication.\n     */\n    function getPublicationType(uint256 profileId, uint256 pubId) external view returns (Types.PublicationType);\n\n    /**\n     * @notice Returns wether a given Action Module is enabled for a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     * @param module The address of the Action Module to query.\n     *\n     * @return bool True if the Action Module is enabled for the queried publication, false if not.\n     */\n    function isActionModuleEnabledInPublication(\n        uint256 profileId,\n        uint256 pubId,\n        address module\n    ) external view returns (bool);\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensVersion.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title ILensVersion\n * @author Lens Protocol\n *\n * @notice This is the interface for the LensHub Version getters and emitter.\n * It allows to emit a LensHub version during an upgrade, and also to get the current version.\n */\ninterface ILensVersion {\n    /**\n     * @notice Returns the LensHub current Version.\n     *\n     * @return version The LensHub current Version.\n     */\n    function getVersion() external view returns (string memory);\n\n    /**\n     * @notice Returns the LensHub current Git Commit.\n     *\n     * @return gitCommit The LensHub current Git Commit.\n     */\n    function getGitCommit() external view returns (bytes20);\n\n    /**\n     * @notice Emits the LensHub current Version. Used in upgradeAndCall().\n     */\n    function emitVersion() external;\n}\n"
    },
    "lens-modules/contracts/interfaces/IModuleRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface IModuleRegistry {\n    enum ModuleType {\n        __, // Just to avoid 0 as valid ModuleType\n        PUBLICATION_ACTION_MODULE,\n        REFERENCE_MODULE,\n        FOLLOW_MODULE\n    }\n\n    // Modules functions\n\n    function verifyModule(address moduleAddress, uint256 moduleType) external returns (bool);\n\n    function registerModule(address moduleAddress, uint256 moduleType) external returns (bool);\n\n    function getModuleTypes(address moduleAddress) external view returns (uint256);\n\n    function isModuleRegistered(address moduleAddress) external view returns (bool);\n\n    function isModuleRegisteredAs(address moduleAddress, uint256 moduleType) external view returns (bool);\n\n    // Currencies functions\n\n    function verifyErc20Currency(address currencyAddress) external returns (bool);\n\n    function registerErc20Currency(address currencyAddress) external returns (bool);\n\n    function isErc20CurrencyRegistered(address currencyAddress) external view returns (bool);\n}\n"
    },
    "lens-modules/contracts/libraries/constants/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nlibrary Errors {\n    error CannotInitImplementation();\n    error Initialized();\n    error SignatureExpired();\n    error SignatureInvalid();\n    error InvalidOwner();\n    error NotOwnerOrApproved();\n    error NotHub();\n    error TokenDoesNotExist();\n    error NotGovernance();\n    error NotGovernanceOrEmergencyAdmin();\n    error EmergencyAdminCanOnlyPauseFurther();\n    error NotProfileOwner();\n    error PublicationDoesNotExist();\n    error CallerNotFollowNFT();\n    error CallerNotCollectNFT(); // Legacy\n    error ArrayMismatch();\n    error NotWhitelisted();\n    error NotRegistered();\n    error InvalidParameter();\n    error ExecutorInvalid();\n    error Blocked();\n    error SelfBlock();\n    error NotFollowing();\n    error SelfFollow();\n    error InvalidReferrer();\n    error InvalidPointedPub();\n    error NonERC721ReceiverImplementer();\n    error AlreadyEnabled();\n\n    // Module Errors\n    error InitParamsInvalid();\n    error ActionNotAllowed();\n\n    error CollectNotAllowed(); // Used in LegacyCollectLib (pending deprecation)\n\n    // MultiState Errors\n    error Paused();\n    error PublishingPaused();\n\n    // Profile Guardian Errors\n    error GuardianEnabled();\n    error NotEOA();\n    error DisablingAlreadyTriggered();\n\n    // Migration Errors\n    error NotMigrationAdmin();\n\n    error NotAllowed();\n}\n"
    },
    "lens-modules/contracts/libraries/constants/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title Types\n * @author Lens Protocol\n *\n * @notice A standard library of data types used throughout the Lens Protocol.\n */\nlibrary Types {\n    /**\n     * @notice ERC721Timestamped storage. Contains the owner address and the mint timestamp for every NFT.\n     *\n     * Note: Instead of the owner address in the _tokenOwners private mapping, we now store it in the\n     * _tokenData mapping, alongside the mint timestamp.\n     *\n     * @param owner The token owner.\n     * @param mintTimestamp The mint timestamp.\n     */\n    struct TokenData {\n        address owner;\n        uint96 mintTimestamp;\n    }\n\n    /**\n     * @notice A struct containing token follow-related data.\n     *\n     * @param followerProfileId The ID of the profile using the token to follow.\n     * @param originalFollowTimestamp The timestamp of the first follow performed with the token.\n     * @param followTimestamp The timestamp of the current follow, if a profile is using the token to follow.\n     * @param profileIdAllowedToRecover The ID of the profile allowed to recover the follow ID, if any.\n     */\n    struct FollowData {\n        uint160 followerProfileId;\n        uint48 originalFollowTimestamp;\n        uint48 followTimestamp;\n        uint256 profileIdAllowedToRecover;\n    }\n\n    /**\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\n     *\n     * @param Unpaused The fully unpaused state.\n     * @param PublishingPaused The state where only publication creation functions are paused.\n     * @param Paused The fully paused state.\n     */\n    enum ProtocolState {\n        Unpaused,\n        PublishingPaused,\n        Paused\n    }\n\n    /**\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\n     *\n     * @param Nonexistent An indicator showing the queried publication does not exist.\n     * @param Post A standard post, having an URI, action modules and no pointer to another publication.\n     * @param Comment A comment, having an URI, action modules and a pointer to another publication.\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or action modules.\n     * @param Quote A quote, having an URI, action modules, and a pointer to another publication.\n     */\n    enum PublicationType {\n        Nonexistent,\n        Post,\n        Comment,\n        Mirror,\n        Quote\n    }\n\n    /**\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\n     *\n     * @param signer The address of the signer. Specially needed as a parameter to support EIP-1271.\n     * @param v The signature's recovery parameter.\n     * @param r The signature's r parameter.\n     * @param s The signature's s parameter.\n     * @param deadline The signature's deadline.\n     */\n    struct EIP712Signature {\n        address signer;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 deadline;\n    }\n\n    /**\n     * @notice A struct containing profile data.\n     *\n     * @param pubCount The number of publications made to this profile.\n     * @param followModule The address of the current follow module in use by this profile, can be address(0) in none.\n     * @param followNFT The address of the followNFT associated with this profile. It can be address(0) if the\n     * profile has not been followed yet, as the collection is lazy-deployed upon the first follow.\n     * @param __DEPRECATED__handle DEPRECATED in V2: handle slot, was replaced with LensHandles.\n     * @param __DEPRECATED__imageURI DEPRECATED in V2: The URI to be used for the profile image.\n     * @param __DEPRECATED__followNFTURI DEPRECATED in V2: The URI used for the follow NFT image.\n     * @param metadataURI MetadataURI is used to store the profile's metadata, for example: displayed name, description,\n     * interests, etc.\n     */\n    struct Profile {\n        uint256 pubCount; // offset 0\n        address followModule; // offset 1\n        address followNFT; // offset 2\n        string __DEPRECATED__handle; // offset 3\n        string __DEPRECATED__imageURI; // offset 4\n        string __DEPRECATED__followNFTURI; // Deprecated in V2 as we have a common tokenURI for all Follows, offset 5\n        string metadataURI; // offset 6\n    }\n\n    /**\n     * @notice A struct containing publication data.\n     *\n     * @param pointedProfileId The profile token ID to point the publication to.\n     * @param pointedPubId The publication ID to point the publication to.\n     * These are used to implement the \"reference\" feature of the platform and is used in:\n     * - Mirrors\n     * - Comments\n     * - Quotes\n     * There are (0,0) if the publication is not pointing to any other publication (i.e. the publication is a Post).\n     * @param contentURI The URI to set for the content of publication (can be ipfs, arweave, http, etc).\n     * @param referenceModule Reference module associated with this profile, if any.\n     * @param __DEPRECATED__collectModule Collect module associated with this publication, if any. Deprecated in V2.\n     * @param __DEPRECATED__collectNFT Collect NFT associated with this publication, if any. Deprecated in V2.\n     * @param pubType The type of publication, can be Nonexistent, Post, Comment, Mirror or Quote.\n     * @param rootProfileId The profile ID of the root post (to determine if comments/quotes and mirrors come from it).\n     * Posts, V1 publications and publications rooted in V1 publications don't have it set.\n     * @param rootPubId The publication ID of the root post (to determine if comments/quotes and mirrors come from it).\n     * Posts, V1 publications and publications rooted in V1 publications don't have it set.\n     * @param actionModuleEnabled The action modules enabled in a given publication.\n     */\n    struct Publication {\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        string contentURI;\n        address referenceModule;\n        address __DEPRECATED__collectModule; // Deprecated in V2\n        address __DEPRECATED__collectNFT; // Deprecated in V2\n        // Added in Lens V2, so these will be zero for old publications:\n        PublicationType pubType;\n        uint256 rootProfileId;\n        uint256 rootPubId;\n        mapping(address => bool) actionModuleEnabled;\n    }\n\n    struct PublicationMemory {\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        string contentURI;\n        address referenceModule;\n        address __DEPRECATED__collectModule; // Deprecated in V2\n        address __DEPRECATED__collectNFT; // Deprecated in V2\n        // Added in Lens V2, so these will be zero for old publications:\n        PublicationType pubType;\n        uint256 rootProfileId;\n        uint256 rootPubId;\n        // bytes32 __ACTION_MODULE_ENABLED_MAPPING; // Mappings are not supported in memory.\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `createProfile()` function.\n     *\n     * @param to The address receiving the profile.\n     * @param followModule The follow module to use, can be the zero address.\n     * @param followModuleInitData The follow module initialization data, if any.\n     */\n    struct CreateProfileParams {\n        address to;\n        address followModule;\n        bytes followModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `post()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param actionModules The action modules to set for this new publication.\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct PostParams {\n        uint256 profileId;\n        string contentURI;\n        address[] actionModules;\n        bytes[] actionModulesInitDatas;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `comment()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param pointedProfileId The profile token ID to point the comment to.\n     * @param pointedPubId The publication ID to point the comment to.\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param actionModules The action modules to set for this new publication.\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct CommentParams {\n        uint256 profileId;\n        string contentURI;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        bytes referenceModuleData;\n        address[] actionModules;\n        bytes[] actionModulesInitDatas;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `quote()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param pointedProfileId The profile token ID of the publication author that is quoted.\n     * @param pointedPubId The publication ID that is quoted.\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param actionModules The action modules to set for this new publication.\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct QuoteParams {\n        uint256 profileId;\n        string contentURI;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        bytes referenceModuleData;\n        address[] actionModules;\n        bytes[] actionModulesInitDatas;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `comment()` or `quote()` internal functions.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param pointedProfileId The profile token ID of the publication author that is commented on/quoted.\n     * @param pointedPubId The publication ID that is commented on/quoted.\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param actionModules The action modules to set for this new publication.\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct ReferencePubParams {\n        uint256 profileId;\n        string contentURI;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        bytes referenceModuleData;\n        address[] actionModules;\n        bytes[] actionModulesInitDatas;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `mirror()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param metadataURI the URI containing metadata attributes to attach to this mirror publication.\n     * @param pointedProfileId The profile token ID to point the mirror to.\n     * @param pointedPubId The publication ID to point the mirror to.\n     * @param referenceModuleData The data passed to the reference module.\n     */\n    struct MirrorParams {\n        uint256 profileId;\n        string metadataURI;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        bytes referenceModuleData;\n    }\n\n    /**\n     * Deprecated in V2: Will be removed after some time after upgrading to V2.\n     * @notice A struct containing the parameters required for the legacy `collect()` function.\n     * @dev The referrer can only be a mirror of the publication being collected.\n     *\n     * @param publicationCollectedProfileId The token ID of the profile that published the publication to collect.\n     * @param publicationCollectedId The publication to collect's publication ID.\n     * @param collectorProfileId The collector profile.\n     * @param referrerProfileId The ID of a profile that authored a mirror that helped discovering the collected pub.\n     * @param referrerPubId The ID of the mirror that helped discovering the collected pub.\n     * @param collectModuleData The arbitrary data to pass to the collectModule if needed.\n     */\n    struct LegacyCollectParams {\n        uint256 publicationCollectedProfileId;\n        uint256 publicationCollectedId;\n        uint256 collectorProfileId;\n        uint256 referrerProfileId;\n        uint256 referrerPubId;\n        bytes collectModuleData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `action()` function.\n     *\n     * @param publicationActedProfileId The token ID of the profile that published the publication to action.\n     * @param publicationActedId The publication to action's publication ID.\n     * @param actorProfileId The actor profile.\n     * @param referrerProfileId\n     * @param referrerPubId\n     * @param actionModuleAddress\n     * @param actionModuleData The arbitrary data to pass to the actionModule if needed.\n     */\n    struct PublicationActionParams {\n        uint256 publicationActedProfileId;\n        uint256 publicationActedId;\n        uint256 actorProfileId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        address actionModuleAddress;\n        bytes actionModuleData;\n    }\n\n    struct ProcessActionParams {\n        uint256 publicationActedProfileId;\n        uint256 publicationActedId;\n        uint256 actorProfileId;\n        address actorProfileOwner;\n        address transactionExecutor;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        Types.PublicationType[] referrerPubTypes;\n        bytes actionModuleData;\n    }\n\n    struct ProcessCommentParams {\n        uint256 profileId;\n        uint256 pubId;\n        address transactionExecutor;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        Types.PublicationType[] referrerPubTypes;\n        bytes data;\n    }\n\n    struct ProcessQuoteParams {\n        uint256 profileId;\n        uint256 pubId;\n        address transactionExecutor;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        Types.PublicationType[] referrerPubTypes;\n        bytes data;\n    }\n\n    struct ProcessMirrorParams {\n        uint256 profileId;\n        uint256 pubId;\n        address transactionExecutor;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        Types.PublicationType[] referrerPubTypes;\n        bytes data;\n    }\n\n    /**\n     * @notice A struct containing a profile's delegated executors configuration.\n     *\n     * @param isApproved Tells when an address is approved as delegated executor in the given configuration number.\n     * @param configNumber Current configuration number in use.\n     * @param prevConfigNumber Previous configuration number set, before switching to the current one.\n     * @param maxConfigNumberSet Maximum configuration number ever used.\n     */\n    struct DelegatedExecutorsConfig {\n        mapping(uint256 => mapping(address => bool)) isApproved; // isApproved[configNumber][delegatedExecutor]\n        uint64 configNumber;\n        uint64 prevConfigNumber;\n        uint64 maxConfigNumberSet;\n    }\n\n    struct TreasuryData {\n        address treasury;\n        uint16 treasuryFeeBPS;\n    }\n\n    struct MigrationParams {\n        address lensHandlesAddress;\n        address tokenHandleRegistryAddress;\n        address legacyFeeFollowModule;\n        address legacyProfileFollowModule;\n        address newFeeFollowModule;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/act/collect/base/BaseFeeCollectModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Errors} from '../../../constants/Errors.sol';\nimport {FeeModuleBase} from '../../../FeeModuleBase.sol';\nimport {ICollectModule} from '../../../interfaces/ICollectModule.sol';\nimport {ActionRestricted} from '../../../ActionRestricted.sol';\n\nimport {ModuleTypes} from '../../../libraries/constants/ModuleTypes.sol';\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {FollowValidationLib} from '../../../libraries/FollowValidationLib.sol';\n\nimport {BaseFeeCollectModuleInitData, BaseProfilePublicationData, IBaseFeeCollectModule} from '../../../interfaces/IBaseFeeCollectModule.sol';\n\n/**\n * @title BaseFeeCollectModule\n * @author Lens Protocol\n *\n * @notice This is base Lens CollectModule implementation, allowing customization of time to collect, number of collects\n * and Followers-only restriction. Charges a fee for collect and distributing it among Receiver/Referrals/Treasury.\n * @dev Here we use \"Base\" terminology to anything that represents this base functionality (base structs,\n * base functions, base storage). Other collect modules can be built on top of the \"Base\" by inheriting from this\n * contract and overriding functions.\n * This contract is marked \"abstract\" as it requires you to implement initializePublicationCollectModule and\n * getPublicationData functions when you inherit from it. See SimpleFeeCollectModule as an example implementation.\n */\nabstract contract BaseFeeCollectModule is FeeModuleBase, ActionRestricted, IBaseFeeCollectModule {\n    using SafeERC20 for IERC20;\n\n    address immutable HUB;\n\n    mapping(uint256 => mapping(uint256 => BaseProfilePublicationData)) internal _dataByPublicationByProfile;\n\n    constructor(\n        address hub,\n        address actionModule,\n        address moduleRegistry\n    ) ActionRestricted(actionModule) FeeModuleBase(hub, moduleRegistry) {\n        HUB = hub;\n    }\n\n    function supportsInterface(bytes4 interfaceID) public pure virtual returns (bool) {\n        return interfaceID == type(ICollectModule).interfaceId;\n    }\n\n    /**\n     * @inheritdoc ICollectModule\n     * @notice Processes a collect by:\n     *  1. Validating that collect action meets all needed criteria\n     *  2. Processing the collect action either with or without referral\n     *\n     * @param processCollectParams Collect action parameters (see ModuleTypes.ProcessCollectParams struct)\n     */\n    function processCollect(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) external virtual onlyActionModule returns (bytes memory) {\n        _validateAndStoreCollect(processCollectParams);\n\n        if (processCollectParams.referrerProfileIds.length == 0) {\n            _processCollect(processCollectParams);\n        } else {\n            _processCollectWithReferral(processCollectParams);\n        }\n        return '';\n    }\n\n    /// @inheritdoc IBaseFeeCollectModule\n    function getBasePublicationData(\n        uint256 profileId,\n        uint256 pubId\n    ) public view virtual returns (BaseProfilePublicationData memory) {\n        return _dataByPublicationByProfile[profileId][pubId];\n    }\n\n    /// @inheritdoc IBaseFeeCollectModule\n    function calculateFee(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) public view virtual returns (uint160) {\n        return\n            _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n                processCollectParams.publicationCollectedId\n            ].amount;\n    }\n\n    /**\n     * @dev Validates the Base parameters like:\n     * 1) Is the currency whitelisted\n     * 2) Is the referralFee in valid range\n     * 3) Is the end of collects timestamp in valid range\n     *\n     * This should be called during initializePublicationCollectModule()\n     *\n     * @param baseInitData Module initialization data (see BaseFeeCollectModuleInitData struct)\n     */\n    function _validateBaseInitData(BaseFeeCollectModuleInitData memory baseInitData) internal virtual {\n        if (\n            (baseInitData.amount == 0 && baseInitData.currency != address(0)) ||\n            (baseInitData.amount != 0 && baseInitData.currency == address(0)) ||\n            baseInitData.referralFee > BPS_MAX ||\n            (baseInitData.endTimestamp != 0 && baseInitData.endTimestamp < block.timestamp)\n        ) {\n            revert Errors.InitParamsInvalid();\n        }\n        _verifyErc20Currency(baseInitData.currency);\n    }\n\n    /**\n     * @dev Stores the initial module parameters\n     *\n     * This should be called during initializePublicationCollectModule()\n     *\n     * @param profileId The token ID of the profile publishing the publication.\n     * @param pubId The publication ID.\n     * @param baseInitData Module initialization data (see BaseFeeCollectModuleInitData struct)\n     */\n    function _storeBasePublicationCollectParameters(\n        uint256 profileId,\n        uint256 pubId,\n        BaseFeeCollectModuleInitData memory baseInitData\n    ) internal virtual {\n        _dataByPublicationByProfile[profileId][pubId].amount = baseInitData.amount;\n        _dataByPublicationByProfile[profileId][pubId].collectLimit = baseInitData.collectLimit;\n        _dataByPublicationByProfile[profileId][pubId].currency = baseInitData.currency;\n        _dataByPublicationByProfile[profileId][pubId].recipient = baseInitData.recipient;\n        _dataByPublicationByProfile[profileId][pubId].referralFee = baseInitData.referralFee;\n        _dataByPublicationByProfile[profileId][pubId].followerOnly = baseInitData.followerOnly;\n        _dataByPublicationByProfile[profileId][pubId].endTimestamp = baseInitData.endTimestamp;\n    }\n\n    /**\n     * @dev Validates the collect action by checking that:\n     * 1) the collector is a follower (if enabled)\n     * 2) the number of collects after the action doesn't surpass the collect limit (if enabled)\n     * 3) the current block timestamp doesn't surpass the end timestamp (if enabled)\n     *\n     * This should be called during processCollect()\n     */\n    function _validateAndStoreCollect(ModuleTypes.ProcessCollectParams calldata processCollectParams) internal virtual {\n        uint96 collectsAfter = ++_dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].currentCollects;\n\n        if (\n            _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n                processCollectParams.publicationCollectedId\n            ].followerOnly\n        ) {\n            FollowValidationLib.validateIsFollowingOrSelf({\n                hub: HUB,\n                followerProfileId: processCollectParams.collectorProfileId,\n                followedProfileId: processCollectParams.publicationCollectedProfileId\n            });\n        }\n\n        uint256 endTimestamp = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].endTimestamp;\n        uint256 collectLimit = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].collectLimit;\n\n        if (collectLimit != 0 && collectsAfter > collectLimit) {\n            revert Errors.MintLimitExceeded();\n        }\n        if (endTimestamp != 0 && block.timestamp > endTimestamp) {\n            revert Errors.CollectExpired();\n        }\n    }\n\n    /**\n     * @dev Internal processing of a collect:\n     *  1. Calculation of fees\n     *  2. Validation that fees are what collector expected\n     *  3. Transfer of fees to recipient(-s) and treasury\n     *\n     * @param processCollectParams Parameters of the collect\n     */\n    function _processCollect(ModuleTypes.ProcessCollectParams calldata processCollectParams) internal virtual {\n        uint256 amount = calculateFee(processCollectParams);\n        address currency = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].currency;\n        _validateDataIsExpected(processCollectParams.data, currency, amount);\n\n        (address treasury, uint16 treasuryFee) = _treasuryData();\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\n\n        if (treasuryAmount > 0) {\n            IERC20(currency).safeTransferFrom(processCollectParams.transactionExecutor, treasury, treasuryAmount);\n        }\n\n        // Send amount after treasury cut, to all recipients\n        _transferToRecipients(processCollectParams, currency, amount - treasuryAmount);\n    }\n\n    /**\n     * @dev Internal processing of a collect with a referrals (if any).\n     *\n     * Same as _processCollect, but also includes transfer to referrals (if any):\n     *  1. Calculation of fees\n     *  2. Validation that fees are what collector expected\n     *  3. Transfer of fees to treasury, referrals (if any) and recipients\n     *\n     * @param processCollectParams Parameters of the collect\n     */\n    function _processCollectWithReferral(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) internal virtual {\n        uint256 amount = calculateFee(processCollectParams);\n        address currency = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].currency;\n\n        _validateDataIsExpected(processCollectParams.data, currency, amount);\n\n        (address treasury, uint16 treasuryFee) = _treasuryData();\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\n\n        if (treasuryAmount > 0) {\n            IERC20(currency).safeTransferFrom(processCollectParams.transactionExecutor, treasury, treasuryAmount);\n        }\n\n        uint256 amountAfterReferrals = _transferToReferrals(processCollectParams, currency, amount - treasuryAmount);\n\n        _transferToRecipients(processCollectParams, currency, amountAfterReferrals);\n    }\n\n    /**\n     * @dev Tranfers the fee to recipient(-s)\n     *\n     * Override this to add additional functionality (e.g. multiple recipients)\n     *\n     * @param processCollectParams Parameters of the collect\n     * @param currency Currency of the transaction\n     * @param amount Amount to transfer to recipient(-s)\n     */\n    function _transferToRecipients(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams,\n        address currency,\n        uint256 amount\n    ) internal virtual {\n        address recipient = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].recipient;\n\n        if (amount > 0) {\n            IERC20(currency).safeTransferFrom(processCollectParams.transactionExecutor, recipient, amount);\n        }\n    }\n\n    /**\n     * @dev Tranfers the part of fee to referral(-s)\n     *\n     * Override this to add additional functionality (e.g. different amounts to different referrals, etc)\n     *\n     * @param processCollectParams Parameters of the collect\n     * @param currency Currency of the transaction\n     * @param amount Amount of the fee after subtracting the Treasury part.\n     */\n    function _transferToReferrals(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams,\n        address currency,\n        uint256 amount\n    ) internal virtual returns (uint256) {\n        uint256 referralFee = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].referralFee;\n        uint256 totalReferralsAmount;\n        if (referralFee != 0) {\n            // The reason we levy the referral fee on the adjusted amount is so that referral fees\n            // don't bypass the treasury fee, in essence referrals pay their fair share to the treasury.\n            totalReferralsAmount = (amount * referralFee) / BPS_MAX;\n            uint256 numberOfReferrals = processCollectParams.referrerProfileIds.length;\n            uint256 amountPerReferral = totalReferralsAmount / numberOfReferrals;\n            if (amountPerReferral > 0) {\n                uint256 i;\n                while (i < numberOfReferrals) {\n                    address referralRecipient = IERC721(HUB).ownerOf(processCollectParams.referrerProfileIds[i]);\n\n                    // Send referral fee in ERC20 tokens\n                    IERC20(currency).safeTransferFrom(\n                        processCollectParams.transactionExecutor,\n                        referralRecipient,\n                        amountPerReferral\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n            }\n        }\n        return amount - totalReferralsAmount;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/ActionRestricted.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport {Errors} from './constants/Errors.sol';\n\n/**\n * @title ActionRestricted\n * @author Lens Protocol\n *\n * @notice This abstract contract adds a public `ACTION_MODULE` immutable field, and `onlyActionModule` modifier,\n * to inherit from contracts that have functions restricted to be only called by the Action Modules.\n */\nabstract contract ActionRestricted {\n    address public immutable ACTION_MODULE;\n\n    modifier onlyActionModule() {\n        if (msg.sender != ACTION_MODULE) {\n            revert Errors.NotActionModule();\n        }\n        _;\n    }\n\n    constructor(address actionModule) {\n        ACTION_MODULE = actionModule;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/constants/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nlibrary Errors {\n    error FollowInvalid();\n    error ModuleDataMismatch();\n    error NotHub();\n    error InitParamsInvalid();\n    error InvalidParams();\n    error MintLimitExceeded();\n    error CollectExpired();\n    error NotActionModule();\n    error CollectNotAllowed();\n    error AlreadyInitialized();\n}\n"
    },
    "lens-modules/contracts/modules/FeeModuleBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Errors} from './constants/Errors.sol';\nimport {ILensHub} from '../interfaces/ILensHub.sol';\nimport {IModuleRegistry} from '../interfaces/IModuleRegistry.sol';\n\n/**\n * @title FeeModuleBase\n * @author Lens Protocol\n *\n * @notice This is an abstract contract to be inherited from by modules that require basic fee functionality.\n * It contains getters for module globals parameters as well as a validation function to check expected data.\n */\nabstract contract FeeModuleBase {\n    uint16 internal constant BPS_MAX = 10000;\n\n    ILensHub private immutable HUB;\n    IModuleRegistry public immutable MODULE_REGISTRY;\n\n    constructor(address hub, address moduleRegistry) {\n        HUB = ILensHub(hub);\n        MODULE_REGISTRY = IModuleRegistry(moduleRegistry);\n    }\n\n    function _verifyErc20Currency(address currency) internal {\n        if (currency != address(0)) {\n            MODULE_REGISTRY.verifyErc20Currency(currency);\n        }\n    }\n\n    function _treasuryData() internal view returns (address, uint16) {\n        return HUB.getTreasuryData();\n    }\n\n    function _validateDataIsExpected(bytes calldata data, address currency, uint256 amount) internal pure virtual {\n        (address decodedCurrency, uint256 decodedAmount) = abi.decode(data, (address, uint256));\n        if (decodedAmount != amount || decodedCurrency != currency) {\n            revert Errors.ModuleDataMismatch();\n        }\n    }\n}\n"
    },
    "lens-modules/contracts/modules/interfaces/IBaseFeeCollectModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\nimport {ICollectModule} from './ICollectModule.sol';\nimport {ModuleTypes} from '../libraries/constants/ModuleTypes.sol';\n\n/**\n * @notice A struct containing the necessary data to execute collect actions on a publication.\n *\n * @param amount The collecting cost associated with this publication. 0 for free collect.\n * @param collectLimit The maximum number of collects for this publication. 0 for no limit.\n * @param currency The currency associated with this publication.\n * @param currentCollects The current number of collects for this publication.\n * @param referralFee The referral fee associated with this publication.\n * @param followerOnly True if only followers of publisher may collect the post.\n * @param endTimestamp The end timestamp after which collecting is impossible. 0 for no expiry.\n * @param recipient Recipient of collect fees.\n */\nstruct BaseProfilePublicationData {\n    uint160 amount;\n    uint96 collectLimit;\n    address currency;\n    uint96 currentCollects;\n    address recipient;\n    uint16 referralFee;\n    bool followerOnly;\n    uint72 endTimestamp;\n}\n\n/**\n * @notice A struct containing the necessary data to initialize this Base Collect Module.\n *\n * @param amount The collecting cost associated with this publication. 0 for free collect.\n * @param collectLimit The maximum number of collects for this publication. 0 for no limit.\n * @param currency The currency associated with this publication.\n * @param referralFee The referral fee associated with this publication.\n * @param followerOnly True if only followers of publisher may collect the post.\n * @param endTimestamp The end timestamp after which collecting is impossible. 0 for no expiry.\n * @param recipient Recipient of collect fees.\n */\nstruct BaseFeeCollectModuleInitData {\n    uint160 amount;\n    uint96 collectLimit;\n    address currency;\n    uint16 referralFee;\n    bool followerOnly;\n    uint72 endTimestamp;\n    address recipient;\n}\n\ninterface IBaseFeeCollectModule is ICollectModule {\n    /**\n     * @notice Returns the Base publication data for a given publication, or an empty struct if that publication was not\n     * initialized with this module.\n     *\n     * @param profileId The token ID of the profile mapped to the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return The BaseProfilePublicationData struct mapped to that publication.\n     */\n    function getBasePublicationData(\n        uint256 profileId,\n        uint256 pubId\n    ) external view returns (BaseProfilePublicationData memory);\n\n    /**\n     * @notice Calculates and returns the collect fee of a publication.\n     * @dev Override this function to use a different formula for the fee.\n     *\n     * @return The collect fee of the specified publication.\n     */\n    function calculateFee(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) external view returns (uint160);\n}\n"
    },
    "lens-modules/contracts/modules/interfaces/ICollectModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {ModuleTypes} from '../libraries/constants/ModuleTypes.sol';\n\n/**\n * @title ICollectModule\n * @author Lens Protocol\n *\n * @notice This is the standard interface for all Lens-compatible CollectModules.\n * Collect modules allow users to execute custom logic upon a collect action over a publication, like:\n *  - Only allow the collect if the collector is following the publication author.\n *  - Only allow the collect if the collector has made a payment to\n *  - Allow any collect but only during the first 24 hours.\n *  - Etc.\n */\ninterface ICollectModule {\n    /**\n     * @notice Initializes data for a given publication being published.\n     * @custom:permissions LensHub.\n     *\n     * @param profileId The token ID of the profile publishing the publication.\n     * @param pubId The associated publication's LensHub publication ID.\n     * @param transactionExecutor The owner or an approved delegated executor.\n     * @param data Arbitrary data __passed from the user!__ to be decoded.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function initializePublicationCollectModule(\n        uint256 profileId,\n        uint256 pubId,\n        address transactionExecutor,\n        bytes calldata data\n    ) external returns (bytes memory);\n\n    /**\n     * @notice Processes a collect action for a given publication.\n     * @custom:permissions LensHub.\n     *\n     * @param processCollectParams The parameters for the collect action.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function processCollect(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) external returns (bytes memory);\n}\n"
    },
    "lens-modules/contracts/modules/interfaces/ILensModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\n\ninterface ILensModule is IERC165 {\n    /// @dev for now we check for keccak('LENS_MODULE');\n    /// Override this and add the type(IModuleInterface).interfaceId for corresponding module type\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n\n    /// @notice Human-readable description of the module\n    // Can be JSON\n    // Can be contract source code\n    // Can be github link\n    // Can be ipfs with documentation\n    // etc\n    function getModuleMetadataURI() external view returns (string memory);\n}\n"
    },
    "lens-modules/contracts/modules/LensModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {ILensModule} from './interfaces/ILensModule.sol';\n\nabstract contract LensModule is ILensModule {\n    /// @inheritdoc ILensModule\n    function supportsInterface(bytes4 interfaceID) public pure virtual override returns (bool) {\n        return interfaceID == bytes4(keccak256(abi.encodePacked('LENS_MODULE')));\n    }\n}\n"
    },
    "lens-modules/contracts/modules/LensModuleMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {LensModule} from './LensModule.sol';\n\nabstract contract LensModuleMetadata is LensModule, Ownable {\n    string private metadataURI;\n\n    function setModuleMetadataURI(string memory _metadataURI) external onlyOwner {\n        metadataURI = _metadataURI;\n    }\n\n    function getModuleMetadataURI() external view returns (string memory) {\n        return metadataURI;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/libraries/constants/ModuleTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from '../../../libraries/constants/Types.sol';\n\n/**\n * @title Types\n * @author Lens Protocol\n *\n * @notice A standard library of data types used throughout the Lens Protocol modules.\n */\nlibrary ModuleTypes {\n    struct ProcessCollectParams {\n        uint256 publicationCollectedProfileId;\n        uint256 publicationCollectedId;\n        uint256 collectorProfileId;\n        address collectorProfileOwner;\n        address transactionExecutor;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        Types.PublicationType[] referrerPubTypes;\n        bytes data;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/libraries/FollowValidationLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport {ILensHub} from '../../interfaces/ILensHub.sol';\nimport {Errors} from '../../libraries/constants/Errors.sol';\n\n/**\n * @title FollowValidationLib\n * @author Lens Protocol\n *\n * @notice A library contract that verifies that a user is following another user and reverts if not.\n */\nlibrary FollowValidationLib {\n    function validateIsFollowing(address hub, uint256 followerProfileId, uint256 followedProfileId) internal view {\n        if (!ILensHub(hub).isFollowing(followerProfileId, followedProfileId)) {\n            revert Errors.NotFollowing();\n        }\n    }\n\n    function validateIsFollowingOrSelf(\n        address hub,\n        uint256 followerProfileId,\n        uint256 followedProfileId\n    ) internal view {\n        // We treat following yourself is always true\n        if (followerProfileId == followedProfileId) {\n            return;\n        }\n        validateIsFollowing(hub, followerProfileId, followedProfileId);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}