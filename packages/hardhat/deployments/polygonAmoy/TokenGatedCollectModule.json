{
  "address": "0x25281C473698Bb7593C56Ee1b4BedB116DC82939",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actionModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "moduleRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "moduleOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CollectExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GateParamsInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitParamsInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRecipientSplits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ModuleDataMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotActionModule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFollowing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RecipientSplitCannotBeZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ModuleRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minThreshold",
          "type": "uint256"
        }
      ],
      "name": "TokenGatedCollectCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACTION_MODULE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MODULE_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IModuleRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "publicationCollectedProfileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicationCollectedId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collectorProfileId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collectorProfileOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "transactionExecutor",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "referrerProfileIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "referrerPubIds",
              "type": "uint256[]"
            },
            {
              "internalType": "enum Types.PublicationType[]",
              "name": "referrerPubTypes",
              "type": "uint8[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ModuleTypes.ProcessCollectParams",
          "name": "processCollectParams",
          "type": "tuple"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        }
      ],
      "name": "getBasePublicationData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint160",
              "name": "amount",
              "type": "uint160"
            },
            {
              "internalType": "uint96",
              "name": "collectLimit",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "currentCollects",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "referralFee",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "followerOnly",
              "type": "bool"
            },
            {
              "internalType": "uint72",
              "name": "endTimestamp",
              "type": "uint72"
            }
          ],
          "internalType": "struct BaseProfilePublicationData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getModuleMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        }
      ],
      "name": "getPublicationData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint160",
              "name": "amount",
              "type": "uint160"
            },
            {
              "internalType": "uint96",
              "name": "collectLimit",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "currentCollects",
              "type": "uint96"
            },
            {
              "internalType": "uint16",
              "name": "referralFee",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "followerOnly",
              "type": "bool"
            },
            {
              "internalType": "uint72",
              "name": "endTimestamp",
              "type": "uint72"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "split",
                  "type": "uint16"
                }
              ],
              "internalType": "struct RecipientData[]",
              "name": "recipients",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "minThreshold",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GateParams",
              "name": "gateParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct TokenGatedCollectPublicationData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initializePublicationCollectModule",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "publicationCollectedProfileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicationCollectedId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collectorProfileId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collectorProfileOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "transactionExecutor",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "referrerProfileIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "referrerPubIds",
              "type": "uint256[]"
            },
            {
              "internalType": "enum Types.PublicationType[]",
              "name": "referrerPubTypes",
              "type": "uint8[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ModuleTypes.ProcessCollectParams",
          "name": "processCollectParams",
          "type": "tuple"
        }
      ],
      "name": "processCollect",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "setModuleMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x170e34bf97500ee6485b914753bb5d6c731e2673be91c9b3ae8377b0206d6dc8",
  "receipt": {
    "to": null,
    "from": "0xA82C8f5A03AeB2221abEdB51d9E462aFd9f63CD4",
    "contractAddress": "0x25281C473698Bb7593C56Ee1b4BedB116DC82939",
    "transactionIndex": 1,
    "gasUsed": "1956058",
    "logsBloom": "0x
    "blockHash": "0x29dae89372f76fa68b501df5bf88f418e47443c5ab3f92b779f7f0c4c43bde53",
    "transactionHash": "0x170e34bf97500ee6485b914753bb5d6c731e2673be91c9b3ae8377b0206d6dc8",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10642295,
        "transactionHash": "0x170e34bf97500ee6485b914753bb5d6c731e2673be91c9b3ae8377b0206d6dc8",
        "address": "0x25281C473698Bb7593C56Ee1b4BedB116DC82939",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a82c8f5a03aeb2221abedb51d9e462afd9f63cd4"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x29dae89372f76fa68b501df5bf88f418e47443c5ab3f92b779f7f0c4c43bde53"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10642295,
        "transactionHash": "0x170e34bf97500ee6485b914753bb5d6c731e2673be91c9b3ae8377b0206d6dc8",
        "address": "0x25281C473698Bb7593C56Ee1b4BedB116DC82939",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000a82c8f5a03aeb2221abedb51d9e462afd9f63cd4",
          "0x000000000000000000000000a82c8f5a03aeb2221abedb51d9e462afd9f63cd4"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x29dae89372f76fa68b501df5bf88f418e47443c5ab3f92b779f7f0c4c43bde53"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10642295,
        "transactionHash": "0x170e34bf97500ee6485b914753bb5d6c731e2673be91c9b3ae8377b0206d6dc8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a82c8f5a03aeb2221abedb51d9e462afd9f63cd4",
          "0x0000000000000000000000004ca9ff871c7aa1e7b64e1eae110835f68d6a0bd4"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000d76dc18800c73a00000000000000000000000000000000000000000000000001aab4e906e65de600000000000000000000000000000000000000000000028a2cf96097dc30e09400000000000000000000000000000000000000000000000000d347277ee596ac00000000000000000000000000000000000000000000028a2dd0ce596431a7ce",
        "logIndex": 7,
        "blockHash": "0x29dae89372f76fa68b501df5bf88f418e47443c5ab3f92b779f7f0c4c43bde53"
      }
    ],
    "blockNumber": 10642295,
    "cumulativeGasUsed": "2095285",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA2574D9DdB6A325Ad2Be838Bd854228B80215148",
    "0x34A437A91415C36712B0D912c171c74595Be437d",
    "0x9E81eD8099dF82004D298144138C12AbB959DF1E",
    "0xA82C8f5A03AeB2221abEdB51d9E462aFd9f63CD4"
  ],
  "numDeployments": 1,
  "solcInputHash": "6e691ee9b67fde6c809b89165ceec2f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actionModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moduleRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moduleOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CollectExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GateParamsInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitParamsInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipientSplits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ModuleDataMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotActionModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFollowing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientSplitCannotBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ModuleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minThreshold\",\"type\":\"uint256\"}],\"name\":\"TokenGatedCollectCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTION_MODULE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODULE_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IModuleRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"publicationCollectedProfileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicationCollectedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectorProfileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectorProfileOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactionExecutor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"referrerProfileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"referrerPubIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Types.PublicationType[]\",\"name\":\"referrerPubTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ModuleTypes.ProcessCollectParams\",\"name\":\"processCollectParams\",\"type\":\"tuple\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getBasePublicationData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint96\",\"name\":\"collectLimit\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentCollects\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralFee\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"followerOnly\",\"type\":\"bool\"},{\"internalType\":\"uint72\",\"name\":\"endTimestamp\",\"type\":\"uint72\"}],\"internalType\":\"struct BaseProfilePublicationData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModuleMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getPublicationData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint96\",\"name\":\"collectLimit\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentCollects\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"referralFee\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"followerOnly\",\"type\":\"bool\"},{\"internalType\":\"uint72\",\"name\":\"endTimestamp\",\"type\":\"uint72\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"split\",\"type\":\"uint16\"}],\"internalType\":\"struct RecipientData[]\",\"name\":\"recipients\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minThreshold\",\"type\":\"uint256\"}],\"internalType\":\"struct GateParams\",\"name\":\"gateParams\",\"type\":\"tuple\"}],\"internalType\":\"struct TokenGatedCollectPublicationData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initializePublicationCollectModule\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"publicationCollectedProfileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicationCollectedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectorProfileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectorProfileOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactionExecutor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"referrerProfileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"referrerPubIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Types.PublicationType[]\",\"name\":\"referrerPubTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ModuleTypes.ProcessCollectParams\",\"name\":\"processCollectParams\",\"type\":\"tuple\"}],\"name\":\"processCollect\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setModuleMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateFee((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))\":{\"details\":\"Override this function to use a different formula for the fee.\",\"returns\":{\"_0\":\"The collect fee of the specified publication.\"}},\"getBasePublicationData(uint256,uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile mapped to the publication to query.\",\"pubId\":\"The publication ID of the publication to query.\"},\"returns\":{\"_0\":\"The BaseProfilePublicationData struct mapped to that publication.\"}},\"getPublicationData(uint256,uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile mapped to the publication to query.\",\"pubId\":\"The publication ID of the publication to query.\"},\"returns\":{\"_0\":\"The TokenGatedCollectPublicationData struct mapped to that publication.\"}},\"isRegistered()\":{\"details\":\"Checks if the module is registered in the module registry\",\"returns\":{\"_0\":\"True if the module is registered, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processCollect((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))\":{\"params\":{\"processCollectParams\":\"Collect action parameters (see ModuleTypes.ProcessCollectParams struct)\"},\"returns\":{\"_0\":\"bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by indexers or UIs.\"}},\"registerModule()\":{\"details\":\"Registers the open action in the module registry\",\"returns\":{\"_0\":\"True if the module was registered, false otherwise\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateFee((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))\":{\"notice\":\"Calculates and returns the collect fee of a publication.\"},\"getBasePublicationData(uint256,uint256)\":{\"notice\":\"Returns the Base publication data for a given publication, or an empty struct if that publication was not initialized with this module.\"},\"getModuleMetadataURI()\":{\"notice\":\"Human-readable description of the module\"},\"getPublicationData(uint256,uint256)\":{\"notice\":\"Returns the publication data for a given publication, or an empty struct if that publication was not initialized with this module.\"},\"processCollect((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))\":{\"notice\":\"Processes a collect by:  1. Validating that collect action meets all needed criteria  2. Processing the collect action either with or without referral\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenGatedCollectModule.sol\":\"TokenGatedCollectModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/TokenGatedCollectModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {ICollectModule} from \\\"lens-modules/contracts/modules/interfaces/ICollectModule.sol\\\";\\nimport {LensModuleMetadata} from \\\"lens-modules/contracts/modules/LensModuleMetadata.sol\\\";\\nimport {IModuleRegistry} from \\\"lens-modules/contracts/interfaces/IModuleRegistry.sol\\\";\\nimport {BaseFeeCollectModule} from \\\"lens-modules/contracts/modules/act/collect/base/BaseFeeCollectModule.sol\\\";\\nimport {BaseFeeCollectModuleInitData, BaseProfilePublicationData} from \\\"lens-modules/contracts/modules/interfaces/IBaseFeeCollectModule.sol\\\";\\nimport {ModuleTypes} from \\\"lens-modules/contracts/modules/libraries/constants/ModuleTypes.sol\\\";\\nimport {LensModule} from \\\"lens-modules/contracts/modules/LensModule.sol\\\";\\nimport {Errors} from \\\"lens-modules/contracts/modules/constants/Errors.sol\\\";\\n\\ninterface IToken {\\n    /**\\n     * @dev Returns the amount of ERC20/ERC721 tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\n/**\\n * @notice A struct containing the recipient address and the fraction of the fee they should receive.\\n *\\n * @param recipient The address of the recipient.\\n * @param split The fraction of the fee they should receive, as a fraction of BPS_MAX (10 000).\\n */\\nstruct RecipientData {\\n    address recipient;\\n    uint16 split; // fraction of BPS_MAX (10 000)\\n}\\n\\n/**\\n * @notice A struct containing the necessary data to execute TokenGated references.\\n *\\n * @param tokenAddress The address of ERC20/ERC721 token used for gating the collect.\\n * @param minThreshold The minimum balance threshold of the gated token required to execute a collect.\\n */\\nstruct GateParams {\\n    address tokenAddress;\\n    uint256 minThreshold;\\n}\\n\\n/**\\n * @notice A struct containing the necessary data to execute collect actions on a publication.\\n *\\n * @param amount The collecting cost associated with this publication. Cannot be 0.\\n * @param collectLimit The maximum number of collects for this publication. 0 for no limit.\\n * @param currency The currency associated with this publication.\\n * @param currentCollects The current number of collects for this publication.\\n * @param referralFee The referral fee associated with this publication.\\n * @param followerOnly True if only followers of publisher may collect the post.\\n * @param endTimestamp The end timestamp after which collecting is impossible. 0 for no expiry.\\n * @param recipients Array of RecipientData items to split collect fees across multiple recipients.\\n * @param gateParams The GateParams struct containing the gating token address and minimum balance threshold.\\n */\\nstruct TokenGatedCollectPublicationData {\\n    uint160 amount;\\n    uint96 collectLimit;\\n    address currency;\\n    uint96 currentCollects;\\n    uint16 referralFee;\\n    bool followerOnly;\\n    uint72 endTimestamp;\\n    RecipientData[] recipients;\\n    GateParams gateParams;\\n}\\n\\nerror GateParamsInvalid();\\nerror InvalidRecipientSplits();\\nerror RecipientSplitCannotBeZero();\\nerror NotEnoughBalance();\\n\\ncontract TokenGatedCollectModule is BaseFeeCollectModule, LensModuleMetadata {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant UINT256_BYTES = 32;\\n\\n    event TokenGatedCollectCreated(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        address tokenAddress,\\n        uint256 minThreshold\\n    );\\n\\n    event ModuleRegistered();\\n\\n    mapping(uint256 profileId => mapping(uint256 pubId => GateParams gateParams))\\n        internal _gateParams;\\n\\n    mapping(uint256 profileId => mapping(uint256 pubId => RecipientData[]))\\n        internal _recipients;\\n\\n    constructor(\\n        address hub,\\n        address actionModule,\\n        address moduleRegistry,\\n        address moduleOwner\\n    )\\n        Ownable()\\n        BaseFeeCollectModule(hub, actionModule, moduleRegistry)\\n        LensModuleMetadata()\\n    {\\n        _transferOwnership(moduleOwner);\\n    }\\n\\n    function initializePublicationCollectModule(\\n        uint256 profileId,\\n        uint256 pubId,\\n        address /* transactionExecutor */,\\n        bytes calldata data\\n    ) external override onlyActionModule returns (bytes memory) {\\n        (\\n            uint160 amount,\\n            uint96 collectLimit,\\n            address currency,\\n            uint16 referralFee,\\n            bool followerOnly,\\n            uint72 endTimestamp,\\n            RecipientData[] memory recipients,\\n            GateParams memory gateParams\\n        ) = abi.decode(\\n                data,\\n                (\\n                    uint160,\\n                    uint96,\\n                    address,\\n                    uint16,\\n                    bool,\\n                    uint72,\\n                    RecipientData[],\\n                    GateParams\\n                )\\n            );\\n\\n        _validateGateParams(gateParams);\\n        _gateParams[profileId][pubId] = gateParams;\\n\\n        BaseFeeCollectModuleInitData\\n            memory baseInitData = BaseFeeCollectModuleInitData({\\n                amount: amount,\\n                collectLimit: collectLimit,\\n                currency: currency,\\n                referralFee: referralFee,\\n                followerOnly: followerOnly,\\n                endTimestamp: endTimestamp,\\n                recipient: address(0)\\n            });\\n\\n        // Zero amount for collect doesn't make sense if there are recipients\\n        if (\\n            recipients.length > 0 &&\\n            (baseInitData.amount == 0 || currency == address(0))\\n        ) {\\n            revert Errors.InitParamsInvalid();\\n        }\\n\\n        _validateBaseInitData(baseInitData);\\n        _validateAndStoreRecipients(recipients, profileId, pubId);\\n        _storeBasePublicationCollectParameters(profileId, pubId, baseInitData);\\n\\n        emit TokenGatedCollectCreated(\\n            profileId,\\n            pubId,\\n            gateParams.tokenAddress,\\n            gateParams.minThreshold\\n        );\\n\\n        return data;\\n    }\\n\\n    /**\\n     * @inheritdoc ICollectModule\\n     * @notice Processes a collect by:\\n     *  1. Validating that collect action meets all needed criteria\\n     *  2. Processing the collect action either with or without referral\\n     *\\n     * @param processCollectParams Collect action parameters (see ModuleTypes.ProcessCollectParams struct)\\n     */\\n    function processCollect(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\\n    ) external override onlyActionModule returns (bytes memory) {\\n        _validateTokenBalance(\\n            processCollectParams.collectorProfileId,\\n            processCollectParams.publicationCollectedProfileId,\\n            processCollectParams.publicationCollectedId\\n        );\\n        _validateAndStoreCollect(processCollectParams);\\n\\n        if (processCollectParams.referrerProfileIds.length == 0) {\\n            _processCollect(processCollectParams);\\n        } else {\\n            _processCollectWithReferral(processCollectParams);\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public pure override(BaseFeeCollectModule, LensModule) returns (bool) {\\n        return\\n            BaseFeeCollectModule.supportsInterface(interfaceID) ||\\n            LensModule.supportsInterface(interfaceID);\\n    }\\n\\n    /**\\n     * @notice Returns the publication data for a given publication, or an empty struct if that publication was not\\n     * initialized with this module.\\n     *\\n     * @param profileId The token ID of the profile mapped to the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return The TokenGatedCollectPublicationData struct mapped to that publication.\\n     */\\n    function getPublicationData(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view virtual returns (TokenGatedCollectPublicationData memory) {\\n        BaseProfilePublicationData memory baseData = getBasePublicationData(\\n            profileId,\\n            pubId\\n        );\\n        return\\n            TokenGatedCollectPublicationData({\\n                amount: baseData.amount,\\n                collectLimit: baseData.collectLimit,\\n                currency: baseData.currency,\\n                currentCollects: baseData.currentCollects,\\n                referralFee: baseData.referralFee,\\n                followerOnly: baseData.followerOnly,\\n                endTimestamp: baseData.endTimestamp,\\n                gateParams: _gateParams[profileId][pubId],\\n                recipients: _recipients[profileId][pubId]\\n            });\\n    }\\n\\n    /**\\n     * @dev Checks if the module is registered in the module registry\\n     * @return True if the module is registered, false otherwise\\n     */\\n    function isRegistered() public view returns (bool) {\\n        return MODULE_REGISTRY.isModuleRegistered(address(this));\\n    }\\n\\n    /**\\n     * @dev Registers the open action in the module registry\\n     * @return True if the module was registered, false otherwise\\n     */\\n    function registerModule() external onlyOwner returns (bool) {\\n        if (isRegistered()) {\\n            return true;\\n        }\\n        bool registered = MODULE_REGISTRY.registerModule(\\n            address(this),\\n            uint256(IModuleRegistry.ModuleType.PUBLICATION_ACTION_MODULE)\\n        );\\n        if (registered) {\\n            emit ModuleRegistered();\\n        }\\n        return registered;\\n    }\\n\\n    /**\\n     * @dev Validates the gate parameters passed during initialization.\\n     *\\n     * @param gateParams The GateParams struct containing the gating token address and minimum balance threshold.\\n     */\\n    function _validateGateParams(GateParams memory gateParams) internal view {\\n        // Checking if the tokenAddress resembles ERC20/ERC721 token (by calling balanceOf() function).\\n        (bool success, bytes memory result) = gateParams\\n            .tokenAddress\\n            .staticcall(\\n                abi.encodeWithSelector(IToken.balanceOf.selector, address(this))\\n            );\\n        // We don't check if the contract exists because we expect the return data anyway.\\n        if (\\n            gateParams.minThreshold == 0 ||\\n            !success ||\\n            result.length != UINT256_BYTES\\n        ) {\\n            revert GateParamsInvalid();\\n        }\\n    }\\n\\n    /**\\n     * @dev Validates the profile's owner balance of gating token. It can work with both ERC20 and ERC721 as both\\n     * interfaces shares `balanceOf` function prototype.\\n     *\\n     * @param collectorProfileId The ID of the profile trying to collect.\\n     * @param publicationCollectedProfileId The ID of the publication's author.\\n     * @param publicationCollectedId The ID of the publication.\\n     *\\n     * @return uint256 The gate token balance of the profile trying to collect.\\n     */\\n    function _validateTokenBalance(\\n        uint256 collectorProfileId,\\n        uint256 publicationCollectedProfileId,\\n        uint256 publicationCollectedId\\n    ) internal view returns (uint256) {\\n        GateParams memory gateParams = _gateParams[\\n            publicationCollectedProfileId\\n        ][publicationCollectedId];\\n        uint256 balance = IToken(gateParams.tokenAddress).balanceOf(\\n            IERC721(HUB).ownerOf(collectorProfileId)\\n        );\\n        if (\\n            collectorProfileId != publicationCollectedProfileId &&\\n            balance < gateParams.minThreshold\\n        ) {\\n            revert NotEnoughBalance();\\n        }\\n        return balance;\\n    }\\n\\n    /**\\n     * @dev Validates the recipients array and stores them to (a separate from Base) storage.\\n     *\\n     * @param recipients An array of recipients\\n     * @param profileId The profile ID who is publishing the publication.\\n     * @param pubId The associated publication's LensHub publication ID.\\n     */\\n    function _validateAndStoreRecipients(\\n        RecipientData[] memory recipients,\\n        uint256 profileId,\\n        uint256 pubId\\n    ) internal {\\n        uint256 len = recipients.length;\\n\\n        if (len == 0) {\\n            return;\\n        }\\n\\n        // Check recipient splits sum to 10 000 BPS (100%)\\n        uint256 totalSplits;\\n        uint256 i;\\n        while (i < len) {\\n            if (recipients[i].split == 0) revert RecipientSplitCannotBeZero();\\n            totalSplits += recipients[i].split;\\n\\n            // Store each recipient while looping - avoids extra gas costs in successful cases\\n            _recipients[profileId][pubId].push(recipients[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (totalSplits != BPS_MAX) {\\n            revert InvalidRecipientSplits();\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers the fee to multiple recipients.\\n     *\\n     * @inheritdoc BaseFeeCollectModule\\n     */\\n    function _transferToRecipients(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams,\\n        address currency,\\n        uint256 amount\\n    ) internal override {\\n        RecipientData[] memory recipients = _recipients[\\n            processCollectParams.publicationCollectedProfileId\\n        ][processCollectParams.publicationCollectedId];\\n        uint256 len = recipients.length;\\n\\n        uint256 i;\\n        while (i < len) {\\n            uint256 amountForRecipient = (amount * recipients[i].split) /\\n                BPS_MAX;\\n            if (amountForRecipient != 0)\\n                IERC20(currency).safeTransferFrom(\\n                    processCollectParams.transactionExecutor,\\n                    recipients[i].recipient,\\n                    amountForRecipient\\n                );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal processing of a collect:\\n     *  1. Calculation of fees\\n     *  2. Validation that fees are what collector expected\\n     *  3. Transfer of fees to recipient(-s) and treasury\\n     *\\n     * @param processCollectParams Parameters of the collect\\n     */\\n    function _processCollect(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\\n    ) internal virtual override {\\n        uint256 amount = calculateFee(processCollectParams);\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        address currency = _dataByPublicationByProfile[\\n            processCollectParams.publicationCollectedProfileId\\n        ][processCollectParams.publicationCollectedId].currency;\\n        _validateDataIsExpected(processCollectParams.data, currency, amount);\\n\\n        (address treasury, uint16 treasuryFee) = _treasuryData();\\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\\n\\n        if (treasuryAmount > 0) {\\n            IERC20(currency).safeTransferFrom(\\n                processCollectParams.transactionExecutor,\\n                treasury,\\n                treasuryAmount\\n            );\\n        }\\n\\n        // Send amount after treasury cut, to all recipients\\n        _transferToRecipients(\\n            processCollectParams,\\n            currency,\\n            amount - treasuryAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal processing of a collect with a referrals (if any).\\n     *\\n     * Same as _processCollect, but also includes transfer to referrals (if any):\\n     *  1. Calculation of fees\\n     *  2. Validation that fees are what collector expected\\n     *  3. Transfer of fees to treasury, referrals (if any) and recipients\\n     *\\n     * @param processCollectParams Parameters of the collect\\n     */\\n    function _processCollectWithReferral(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\\n    ) internal virtual override {\\n        uint256 amount = calculateFee(processCollectParams);\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        address currency = _dataByPublicationByProfile[\\n            processCollectParams.publicationCollectedProfileId\\n        ][processCollectParams.publicationCollectedId].currency;\\n\\n        _validateDataIsExpected(processCollectParams.data, currency, amount);\\n\\n        (address treasury, uint16 treasuryFee) = _treasuryData();\\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\\n\\n        if (treasuryAmount > 0) {\\n            IERC20(currency).safeTransferFrom(\\n                processCollectParams.transactionExecutor,\\n                treasury,\\n                treasuryAmount\\n            );\\n        }\\n\\n        uint256 amountAfterReferrals = _transferToReferrals(\\n            processCollectParams,\\n            currency,\\n            amount - treasuryAmount\\n        );\\n\\n        _transferToRecipients(\\n            processCollectParams,\\n            currency,\\n            amountAfterReferrals\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe111be18be1a0e4c91d93bc971ce0a5b305714738175f9367845e049679abf0b\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title IERC721Burnable\\n * @author Lens Protocol\\n *\\n * @notice Extension of ERC-721 including a function that allows the token to be burned.\\n */\\ninterface IERC721Burnable {\\n    /**\\n     * @notice Burns an NFT, removing it from circulation and essentially destroying it.\\n     * @custom:permission Owner of the NFT.\\n     *\\n     * @param tokenId The token ID of the token to burn.\\n     */\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x21bb0e27eec4f6311885d2627ae7d70d04add3f5f0c9c794dc3fb3da67542550\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/IERC721MetaTx.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title IERC721MetaTx\\n * @author Lens Protocol\\n *\\n * @notice Extension of ERC-721 including meta-tx signatures related functions.\\n */\\ninterface IERC721MetaTx {\\n    /**\\n     * @notice Returns the current signature nonce of the given signer.\\n     *\\n     * @param signer The address for which to query the nonce.\\n     *\\n     * @return uint256 The current nonce of the given signer.\\n     */\\n    function nonces(address signer) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the EIP-712 domain separator for this contract.\\n     *\\n     * @return bytes32 The domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc0fb246632c57e9ce8f49fe0052cc377b7348e419eb56c379c73abb70ffdf32d\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/IERC721Timestamped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from '../libraries/constants/Types.sol';\\n\\n/**\\n * @title IERC721Timestamped\\n * @author Lens Protocol\\n *\\n * @notice Extension of ERC-721 including a struct for token data, which contains the owner and the mint timestamp, as\\n * well as their associated getters.\\n */\\ninterface IERC721Timestamped {\\n    /**\\n     * @notice Returns the mint timestamp associated with a given NFT.\\n     *\\n     * @param tokenId The token ID of the NFT to query the mint timestamp for.\\n     *\\n     * @return uint256 Mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary\\n     * padding.\\n     */\\n    function mintTimestampOf(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the token data associated with a given NFT. This allows fetching the token owner and\\n     * mint timestamp in a single call.\\n     *\\n     * @param tokenId The token ID of the NFT to query the token data for.\\n     *\\n     * @return TokenData A struct containing both the owner address and the mint timestamp.\\n     */\\n    function tokenDataOf(uint256 tokenId) external view returns (Types.TokenData memory);\\n\\n    /**\\n     * @notice Returns whether a token with the given token ID exists.\\n     *\\n     * @param tokenId The token ID of the NFT to check existence for.\\n     *\\n     * @return bool True if the token exists.\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the amount of tokens in circulation.\\n     *\\n     * @return uint256 The current total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd642fb00ccde8bb98906cb7e0b82784c6bd6cd7ac9e7f5d0abb4bf4897c5d6d9\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport {IERC721Timestamped} from '../interfaces/IERC721Timestamped.sol';\\nimport {IERC721Burnable} from '../interfaces/IERC721Burnable.sol';\\nimport {IERC721MetaTx} from '../interfaces/IERC721MetaTx.sol';\\nimport {IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\n\\ninterface ILensERC721 is IERC721, IERC721Timestamped, IERC721Burnable, IERC721MetaTx, IERC721Metadata {}\\n\",\"keccak256\":\"0xc5dd83acafed38333a2ee431673ee8d70aecc5bc83931f1a3096bc6af496d3f3\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from '../libraries/constants/Types.sol';\\n\\n/**\\n * @title ILensGovernable\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the Lens Protocol main governance functions.\\n */\\ninterface ILensGovernable {\\n    /**\\n     * @notice Sets the privileged governance role.\\n     * @custom:permissions Governance.\\n     *\\n     * @param newGovernance The new governance address to set.\\n     */\\n    function setGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state.\\n     * @custom:permissions Governance.\\n     *\\n     * @param newEmergencyAdmin The new emergency admin address to set.\\n     */\\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\\n\\n    /**\\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state.\\n     * @custom:permissions Governance or Emergency Admin. Emergency Admin can only restrict more.\\n     *\\n     * @param newState The state to set. It can be one of the following:\\n     *  - Unpaused: The protocol is fully operational.\\n     *  - PublishingPaused: The protocol is paused for publishing, but it is still operational for others operations.\\n     *  - Paused: The protocol is paused for all operations.\\n     */\\n    function setState(Types.ProtocolState newState) external;\\n\\n    /**\\n     * @notice Adds or removes a profile creator from the whitelist.\\n     * @custom:permissions Governance.\\n     *\\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the profile creator should be whitelisted.\\n     */\\n    function whitelistProfileCreator(address profileCreator, bool whitelist) external;\\n\\n    /**\\n     * @notice Sets the profile token URI contract.\\n     * @custom:permissions Governance.\\n     *\\n     * @param profileTokenURIContract The profile token URI contract to set.\\n     */\\n    function setProfileTokenURIContract(address profileTokenURIContract) external;\\n\\n    /**\\n     * @notice Sets the follow token URI contract.\\n     * @custom:permissions Governance.\\n     *\\n     * @param followTokenURIContract The follow token URI contract to set.\\n     */\\n    function setFollowTokenURIContract(address followTokenURIContract) external;\\n\\n    /**\\n     * @notice Sets the treasury address.\\n     * @custom:permissions Governance\\n     *\\n     * @param newTreasury The new treasury address to set.\\n     */\\n    function setTreasury(address newTreasury) external;\\n\\n    /**\\n     * @notice Sets the treasury fee.\\n     * @custom:permissions Governance\\n     *\\n     * @param newTreasuryFee The new treasury fee to set.\\n     */\\n    function setTreasuryFee(uint16 newTreasuryFee) external;\\n\\n    /**\\n     * @notice Returns the currently configured governance address.\\n     *\\n     * @return address The address of the currently configured governance.\\n     */\\n    function getGovernance() external view returns (address);\\n\\n    /**\\n     * @notice Gets the state currently set in the protocol. It could be a global pause, a publishing pause or an\\n     * unpaused state.\\n     * @custom:permissions Anyone.\\n     *\\n     * @return Types.ProtocolState The state currently set in the protocol.\\n     */\\n    function getState() external view returns (Types.ProtocolState);\\n\\n    /**\\n     * @notice Returns whether or not a profile creator is whitelisted.\\n     *\\n     * @param profileCreator The address of the profile creator to check.\\n     *\\n     * @return bool True if the profile creator is whitelisted, false otherwise.\\n     */\\n    function isProfileCreatorWhitelisted(address profileCreator) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the treasury address.\\n     *\\n     * @return address The treasury address.\\n     */\\n    function getTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the treasury fee.\\n     *\\n     * @return uint16 The treasury fee.\\n     */\\n    function getTreasuryFee() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the treasury address and treasury fee in a single call.\\n     *\\n     * @return tuple First, the treasury address, second, the treasury fee.\\n     */\\n    function getTreasuryData() external view returns (address, uint16);\\n\\n    /**\\n     * @notice Gets the profile token URI contract.\\n     *\\n     * @return address The profile token URI contract.\\n     */\\n    function getProfileTokenURIContract() external view returns (address);\\n\\n    /**\\n     * @notice Gets the follow token URI contract.\\n     *\\n     * @return address The follow token URI contract.\\n     */\\n    function getFollowTokenURIContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4fb99da977c479cbd417768ad4c3ad052446e7a8fcba4f3621d5dc631d19acda\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {ILensProtocol} from '../interfaces/ILensProtocol.sol';\\nimport {ILensGovernable} from '../interfaces/ILensGovernable.sol';\\nimport {ILensHubEventHooks} from '../interfaces/ILensHubEventHooks.sol';\\nimport {ILensImplGetters} from '../interfaces/ILensImplGetters.sol';\\nimport {ILensProfiles} from '../interfaces/ILensProfiles.sol';\\nimport {ILensVersion} from '../interfaces/ILensVersion.sol';\\n\\ninterface ILensHub is\\n    ILensProfiles,\\n    ILensProtocol,\\n    ILensGovernable,\\n    ILensHubEventHooks,\\n    ILensImplGetters,\\n    ILensVersion\\n{}\\n\",\"keccak256\":\"0x42a786c73ee2e5c47695354ec4578894bb0c19583eec0ca90caf63088db3813c\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensHubEventHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title ILensHubEventHooks\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub contract's event hooks. As we want most of the core events to be\\n * emitted by the LensHub contract, event hooks are needed for core events generated by pheripheral contracts.\\n */\\ninterface ILensHubEventHooks {\\n    /**\\n     * @dev Helper function to emit an `Unfollowed` event from the hub, to be consumed by indexers to track unfollows.\\n     * @custom:permissions FollowNFT of the Profile unfollowed.\\n     *\\n     * @param unfollowerProfileId The ID of the profile that executed the unfollow.\\n     * @param idOfProfileUnfollowed The ID of the profile that was unfollowed.\\n     * @param transactionExecutor The address of the account executing the unfollow operation.\\n     */\\n    function emitUnfollowedEvent(\\n        uint256 unfollowerProfileId,\\n        uint256 idOfProfileUnfollowed,\\n        address transactionExecutor\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6681eee20562c880f152a420cc62eaf374647230611ad6c5d8efebbbc70cd35e\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensImplGetters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title ILensImplGetters\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub contract's implementation getters. These implementations will be used\\n * for deploying each respective contract for each profile.\\n */\\ninterface ILensImplGetters {\\n    /**\\n     * @notice Returns the Follow NFT implementation address that is used for all deployed Follow NFTs.\\n     *\\n     * @return address The Follow NFT implementation address.\\n     */\\n    function getFollowNFTImpl() external view returns (address);\\n\\n    /**\\n     * @notice Returns the Collect NFT implementation address that is used for each new deployed Collect NFT.\\n     * @custom:pending-deprecation\\n     *\\n     * @return address The Collect NFT implementation address.\\n     */\\n    function getLegacyCollectNFTImpl() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the registry that stores all modules that are used by the Lens Protocol.\\n     *\\n     * @return address The address of the Module Registry contract.\\n     */\\n    function getModuleRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9048a5464879c9fdd90d54739e0e7ed997517b49d0ea06a5df4f6f19f0a185e1\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensProfiles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {ILensERC721} from '../interfaces/ILensERC721.sol';\\n\\ninterface ILensProfiles is ILensERC721 {\\n    /**\\n     * @notice DANGER: Triggers disabling the profile protection mechanism for the msg.sender, which will allow\\n     * transfers or approvals over profiles held by it.\\n     * Disabling the mechanism will have a timelock before it becomes effective, allowing the owner to re-enable\\n     * the protection back in case of being under attack.\\n     * The protection layer only applies to EOA wallets.\\n     */\\n    function DANGER__disableTokenGuardian() external;\\n\\n    /**\\n     * @notice Enables back the profile protection mechanism for the msg.sender, preventing profile transfers or\\n     * approvals (except when revoking them).\\n     * The protection layer only applies to EOA wallets.\\n     */\\n    function enableTokenGuardian() external;\\n\\n    /**\\n     * @notice Returns the timestamp at which the Token Guardian will become effectively disabled.\\n     *\\n     * @param wallet The address to check the timestamp for.\\n     *\\n     * @return uint256 The timestamp at which the Token Guardian will become effectively disabled. Zero if enabled.\\n     */\\n    function getTokenGuardianDisablingTimestamp(address wallet) external view returns (uint256);\\n\\n    /**\\n     * @notice allows transferring of profile but keeping the delegate settings\\n     */\\n    function transferFromKeepingDelegates(address from, address to, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xb5d399c6b187e48005d1a7be383594d3e2d8d2f5dc9bc2a1ab521dca4a2a9e66\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from '../libraries/constants/Types.sol';\\n\\n/**\\n * @title ILensProtocol\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for Lens Protocol's core functions. It contains all the entry points for performing\\n * social operations.\\n */\\ninterface ILensProtocol {\\n    /**\\n     * @notice Creates a profile with the specified parameters, minting a Profile NFT to the given recipient.\\n     * @custom:permissions Any whitelisted profile creator.\\n     *\\n     * @param createProfileParams A CreateProfileParams struct containing the needed params.\\n     */\\n    function createProfile(Types.CreateProfileParams calldata createProfileParams) external returns (uint256);\\n\\n    /**\\n     * @notice Sets the metadata URI for the given profile.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param profileId The token ID of the profile to set the metadata URI for.\\n     * @param metadataURI The metadata URI to set for the given profile.\\n     */\\n    function setProfileMetadataURI(uint256 profileId, string calldata metadataURI) external;\\n\\n    /**\\n     * @custom:meta-tx setProfileMetadataURI.\\n     */\\n    function setProfileMetadataURIWithSig(\\n        uint256 profileId,\\n        string calldata metadataURI,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Sets the follow module for the given profile.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param profileId The token ID of the profile to set the follow module for.\\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\\n     */\\n    function setFollowModule(uint256 profileId, address followModule, bytes calldata followModuleInitData) external;\\n\\n    /**\\n     * @custom:meta-tx setFollowModule.\\n     */\\n    function setFollowModuleWithSig(\\n        uint256 profileId,\\n        address followModule,\\n        bytes calldata followModuleInitData,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Changes the delegated executors configuration for the given profile. It allows setting the approvals for\\n     * delegated executors in the specified configuration, as well as switching to it.\\n     * @custom:permissions Profile Owner.\\n     *\\n     * @param delegatorProfileId The ID of the profile to which the delegated executor is being changed for.\\n     * @param delegatedExecutors The array of delegated executors to set the approval for.\\n     * @param approvals The array of booleans indicating the corresponding executor's new approval status.\\n     * @param configNumber The number of the configuration where the executor approval state is being set.\\n     * @param switchToGivenConfig A boolean indicating if the configuration must be switched to the one with the given\\n     * number.\\n     */\\n    function changeDelegatedExecutorsConfig(\\n        uint256 delegatorProfileId,\\n        address[] calldata delegatedExecutors,\\n        bool[] calldata approvals,\\n        uint64 configNumber,\\n        bool switchToGivenConfig\\n    ) external;\\n\\n    /**\\n     * @notice Changes the delegated executors configuration for the given profile under the current configuration.\\n     * @custom:permissions Profile Owner.\\n     *\\n     * @param delegatorProfileId The ID of the profile to which the delegated executor is being changed for.\\n     * @param delegatedExecutors The array of delegated executors to set the approval for.\\n     * @param approvals The array of booleans indicating the corresponding executor's new approval status.\\n     */\\n    function changeDelegatedExecutorsConfig(\\n        uint256 delegatorProfileId,\\n        address[] calldata delegatedExecutors,\\n        bool[] calldata approvals\\n    ) external;\\n\\n    /**\\n     * @custom:meta-tx changeDelegatedExecutorsConfig.\\n     */\\n    function changeDelegatedExecutorsConfigWithSig(\\n        uint256 delegatorProfileId,\\n        address[] calldata delegatedExecutors,\\n        bool[] calldata approvals,\\n        uint64 configNumber,\\n        bool switchToGivenConfig,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Publishes a post.\\n     * Post is the most basic publication type, and can be used to publish any kind of content.\\n     * Posts can have these types of modules initialized:\\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\\n     *  - Reference module: a module handling the rules when referencing this post (e.g. token-gated comments)\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param postParams A PostParams struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function post(Types.PostParams calldata postParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx post.\\n     */\\n    function postWithSig(\\n        Types.PostParams calldata postParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment on the given publication.\\n     * Comment is a type of reference publication that points to another publication.\\n     * Comments can have these types of modules initialized:\\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\\n     *  - Reference module: a module handling the rules when referencing this comment (e.g. token-gated mirrors)\\n     * Comments can have referrers (e.g. publications or profiles that helped to discover the pointed publication).\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param commentParams A CommentParams struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function comment(Types.CommentParams calldata commentParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx comment.\\n     */\\n    function commentWithSig(\\n        Types.CommentParams calldata commentParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror of the given publication.\\n     * Mirror is a type of reference publication that points to another publication but doesn't have content.\\n     * Mirrors don't have any modules initialized.\\n     * Mirrors can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * You cannot mirror a mirror, comment on a mirror, or quote a mirror.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param mirrorParams A MirrorParams struct containing the necessary parameters.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirror(Types.MirrorParams calldata mirrorParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx mirror.\\n     */\\n    function mirrorWithSig(\\n        Types.MirrorParams calldata mirrorParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a quote of the given publication.\\n     * Quote is a type of reference publication similar to mirror, but it has content and modules.\\n     * Quotes can have these types of modules initialized:\\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\\n     *  - Reference module: a module handling the rules when referencing this quote (e.g. token-gated comments on quote)\\n     * Quotes can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * Unlike mirrors, you can mirror a quote, comment on a quote, or quote a quote.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param quoteParams A QuoteParams struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the quote's publication ID.\\n     */\\n    function quote(Types.QuoteParams calldata quoteParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx quote.\\n     */\\n    function quoteWithSig(\\n        Types.QuoteParams calldata quoteParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Follows given profiles, executing each profile's follow module logic (if any).\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @dev Both the `idsOfProfilesToFollow`, `followTokenIds`, and `datas` arrays must be of the same length,\\n     * regardless if the profiles do not have a follow module set.\\n     *\\n     * @param followerProfileId The ID of the profile the follows are being executed for.\\n     * @param idsOfProfilesToFollow The array of IDs of profiles to follow.\\n     * @param followTokenIds The array of follow token IDs to use for each follow (0 if you don't own a follow token).\\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\\n     *\\n     * @return uint256[] An array of follow token IDs representing the follow tokens created for each follow.\\n     */\\n    function follow(\\n        uint256 followerProfileId,\\n        uint256[] calldata idsOfProfilesToFollow,\\n        uint256[] calldata followTokenIds,\\n        bytes[] calldata datas\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @custom:meta-tx follow.\\n     */\\n    function followWithSig(\\n        uint256 followerProfileId,\\n        uint256[] calldata idsOfProfilesToFollow,\\n        uint256[] calldata followTokenIds,\\n        bytes[] calldata datas,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @notice Unfollows given profiles.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param unfollowerProfileId The ID of the profile the unfollows are being executed for.\\n     * @param idsOfProfilesToUnfollow The array of IDs of profiles to unfollow.\\n     */\\n    function unfollow(uint256 unfollowerProfileId, uint256[] calldata idsOfProfilesToUnfollow) external;\\n\\n    /**\\n     * @custom:meta-tx unfollow.\\n     */\\n    function unfollowWithSig(\\n        uint256 unfollowerProfileId,\\n        uint256[] calldata idsOfProfilesToUnfollow,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Sets the block status for the given profiles. Changing a profile's block status to `true` (i.e. blocked),\\n     * when will also force them to unfollow.\\n     * Blocked profiles cannot perform any actions with the profile that blocked them: they cannot comment or mirror\\n     * their publications, they cannot follow them, they cannot collect, tip them, etc.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @dev Both the `idsOfProfilesToSetBlockStatus` and `blockStatus` arrays must be of the same length.\\n     *\\n     * @param byProfileId The ID of the profile that is blocking/unblocking somebody.\\n     * @param idsOfProfilesToSetBlockStatus The array of IDs of profiles to set block status.\\n     * @param blockStatus The array of block statuses to use for each (true is blocked).\\n     */\\n    function setBlockStatus(\\n        uint256 byProfileId,\\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\\n        bool[] calldata blockStatus\\n    ) external;\\n\\n    /**\\n     * @custom:meta-tx setBlockStatus.\\n     */\\n    function setBlockStatusWithSig(\\n        uint256 byProfileId,\\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\\n        bool[] calldata blockStatus,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Collects a given publication via signature with the specified parameters.\\n     * Collect can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * @custom:permissions Collector Profile Owner or its Delegated Executor.\\n     * @custom:pending-deprecation Collect modules were replaced by PublicationAction Collect modules in V2. This method\\n     * is left here for backwards compatibility with posts made in V1 that had Collect modules.\\n     *\\n     * @param collectParams A CollectParams struct containing the parameters.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collectLegacy(Types.LegacyCollectParams calldata collectParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx collect.\\n     * @custom:pending-deprecation\\n     */\\n    function collectLegacyWithSig(\\n        Types.LegacyCollectParams calldata collectParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Acts on a given publication with the specified parameters.\\n     * You can act on a publication except a mirror (if it has at least one action module initialized).\\n     * Actions can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * @custom:permissions Actor Profile Owner or its Delegated Executor.\\n     *\\n     * @param publicationActionParams A PublicationActionParams struct containing the parameters.\\n     *\\n     * @return bytes Arbitrary data the action module returns.\\n     */\\n    function act(Types.PublicationActionParams calldata publicationActionParams) external returns (bytes memory);\\n\\n    /**\\n     * @custom:meta-tx act.\\n     */\\n    function actWithSig(\\n        Types.PublicationActionParams calldata publicationActionParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (bytes memory);\\n\\n    /**\\n     * @dev This function is used to invalidate signatures by incrementing the nonce of the signer.\\n     * @param increment The amount to increment the nonce by (max 255).\\n     */\\n    function incrementNonce(uint8 increment) external;\\n\\n    /////////////////////////////////\\n    ///       VIEW FUNCTIONS      ///\\n    /////////////////////////////////\\n\\n    /**\\n     * @notice Returns whether or not `followerProfileId` is following `followedProfileId`.\\n     *\\n     * @param followerProfileId The ID of the profile whose following state should be queried.\\n     * @param followedProfileId The ID of the profile whose followed state should be queried.\\n     *\\n     * @return bool True if `followerProfileId` is following `followedProfileId`, false otherwise.\\n     */\\n    function isFollowing(uint256 followerProfileId, uint256 followedProfileId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether the given address is approved as delegated executor, in the configuration with the given\\n     * number, to act on behalf of the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile to check the delegated executor approval for.\\n     * @param delegatedExecutor The address to query the delegated executor approval for.\\n     * @param configNumber The number of the configuration where the executor approval state is being queried.\\n     *\\n     * @return bool True if the address is approved as a delegated executor to act on behalf of the profile in the\\n     * given configuration, false otherwise.\\n     */\\n    function isDelegatedExecutorApproved(\\n        uint256 delegatorProfileId,\\n        address delegatedExecutor,\\n        uint64 configNumber\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether the given address is approved as delegated executor, in the current configuration, to act\\n     * on behalf of the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile to check the delegated executor approval for.\\n     * @param delegatedExecutor The address to query the delegated executor approval for.\\n     *\\n     * @return bool True if the address is approved as a delegated executor to act on behalf of the profile in the\\n     * current configuration, false otherwise.\\n     */\\n    function isDelegatedExecutorApproved(\\n        uint256 delegatorProfileId,\\n        address delegatedExecutor\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the current delegated executor config number for the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile from which the delegated executors config number is being queried\\n     *\\n     * @return uint256 The current delegated executor configuration number.\\n     */\\n    function getDelegatedExecutorsConfigNumber(uint256 delegatorProfileId) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the previous used delegated executor config number for the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile from which the delegated executors' previous configuration number\\n     * set is being queried.\\n     *\\n     * @return uint256 The delegated executor configuration number previously set. It will coincide with the current\\n     * configuration set if it was never switched from the default one.\\n     */\\n    function getDelegatedExecutorsPrevConfigNumber(uint256 delegatorProfileId) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the maximum delegated executor config number for the given profile.\\n     * This is the maximum config number that was ever used by this profile.\\n     * When creating a new clean configuration, you can only use a number that is maxConfigNumber + 1.\\n     *\\n     * @param delegatorProfileId The ID of the profile from which the delegated executors' maximum configuration number\\n     * set is being queried.\\n     *\\n     * @return uint256 The delegated executor maximum configuration number set.\\n     */\\n    function getDelegatedExecutorsMaxConfigNumberSet(uint256 delegatorProfileId) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns whether `profileId` is blocked by `byProfileId`.\\n     * See setBlockStatus() for more information on how blocking works on the platform.\\n     *\\n     * @param profileId The ID of the profile whose blocked status should be queried.\\n     * @param byProfileId The ID of the profile whose blocker status should be queried.\\n     *\\n     * @return bool True if `profileId` is blocked by `byProfileId`, false otherwise.\\n     */\\n    function isBlocked(uint256 profileId, uint256 byProfileId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the URI associated with a given publication.\\n     * This is used to store the publication's metadata, e.g.: content, images, etc.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return string The URI associated with a given publication.\\n     */\\n    function getContentURI(uint256 profileId, uint256 pubId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the full profile struct associated with a given profile token ID.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return Profile The profile struct of the given profile.\\n     */\\n    function getProfile(uint256 profileId) external view returns (Types.Profile memory);\\n\\n    /**\\n     * @notice Returns the full publication struct for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return Publication The publication struct associated with the queried publication.\\n     */\\n    function getPublication(uint256 profileId, uint256 pubId) external view returns (Types.PublicationMemory memory);\\n\\n    /**\\n     * @notice Returns the type of a given publication.\\n     * The type can be one of the following (see PublicationType enum):\\n     * - Nonexistent\\n     * - Post\\n     * - Comment\\n     * - Mirror\\n     * - Quote\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PublicationType The publication type of the queried publication.\\n     */\\n    function getPublicationType(uint256 profileId, uint256 pubId) external view returns (Types.PublicationType);\\n\\n    /**\\n     * @notice Returns wether a given Action Module is enabled for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     * @param module The address of the Action Module to query.\\n     *\\n     * @return bool True if the Action Module is enabled for the queried publication, false if not.\\n     */\\n    function isActionModuleEnabledInPublication(\\n        uint256 profileId,\\n        uint256 pubId,\\n        address module\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1960db7eb00db58fa1ece3aa4a668dd60285c04cba4d4e1937f1fe25980d480c\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensVersion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title ILensVersion\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub Version getters and emitter.\\n * It allows to emit a LensHub version during an upgrade, and also to get the current version.\\n */\\ninterface ILensVersion {\\n    /**\\n     * @notice Returns the LensHub current Version.\\n     *\\n     * @return version The LensHub current Version.\\n     */\\n    function getVersion() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the LensHub current Git Commit.\\n     *\\n     * @return gitCommit The LensHub current Git Commit.\\n     */\\n    function getGitCommit() external view returns (bytes20);\\n\\n    /**\\n     * @notice Emits the LensHub current Version. Used in upgradeAndCall().\\n     */\\n    function emitVersion() external;\\n}\\n\",\"keccak256\":\"0x080d3c3631ce80c794b7649664b4f6ec90620079cee7d382bf8184d7280d15a0\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/IModuleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IModuleRegistry {\\n    enum ModuleType {\\n        __, // Just to avoid 0 as valid ModuleType\\n        PUBLICATION_ACTION_MODULE,\\n        REFERENCE_MODULE,\\n        FOLLOW_MODULE\\n    }\\n\\n    // Modules functions\\n\\n    function verifyModule(address moduleAddress, uint256 moduleType) external returns (bool);\\n\\n    function registerModule(address moduleAddress, uint256 moduleType) external returns (bool);\\n\\n    function getModuleTypes(address moduleAddress) external view returns (uint256);\\n\\n    function isModuleRegistered(address moduleAddress) external view returns (bool);\\n\\n    function isModuleRegisteredAs(address moduleAddress, uint256 moduleType) external view returns (bool);\\n\\n    // Currencies functions\\n\\n    function verifyErc20Currency(address currencyAddress) external returns (bool);\\n\\n    function registerErc20Currency(address currencyAddress) external returns (bool);\\n\\n    function isErc20CurrencyRegistered(address currencyAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf5a583c97e3ad53e24ca137daf7adcc1437460621ccdbbb466da20e5a9af7d16\",\"license\":\"MIT\"},\"lens-modules/contracts/libraries/constants/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nlibrary Errors {\\n    error CannotInitImplementation();\\n    error Initialized();\\n    error SignatureExpired();\\n    error SignatureInvalid();\\n    error InvalidOwner();\\n    error NotOwnerOrApproved();\\n    error NotHub();\\n    error TokenDoesNotExist();\\n    error NotGovernance();\\n    error NotGovernanceOrEmergencyAdmin();\\n    error EmergencyAdminCanOnlyPauseFurther();\\n    error NotProfileOwner();\\n    error PublicationDoesNotExist();\\n    error CallerNotFollowNFT();\\n    error CallerNotCollectNFT(); // Legacy\\n    error ArrayMismatch();\\n    error NotWhitelisted();\\n    error NotRegistered();\\n    error InvalidParameter();\\n    error ExecutorInvalid();\\n    error Blocked();\\n    error SelfBlock();\\n    error NotFollowing();\\n    error SelfFollow();\\n    error InvalidReferrer();\\n    error InvalidPointedPub();\\n    error NonERC721ReceiverImplementer();\\n    error AlreadyEnabled();\\n\\n    // Module Errors\\n    error InitParamsInvalid();\\n    error ActionNotAllowed();\\n\\n    error CollectNotAllowed(); // Used in LegacyCollectLib (pending deprecation)\\n\\n    // MultiState Errors\\n    error Paused();\\n    error PublishingPaused();\\n\\n    // Profile Guardian Errors\\n    error GuardianEnabled();\\n    error NotEOA();\\n    error DisablingAlreadyTriggered();\\n\\n    // Migration Errors\\n    error NotMigrationAdmin();\\n\\n    error NotAllowed();\\n}\\n\",\"keccak256\":\"0xecf4eaf8baa0d939119e9bcabffae896cc419ca9c6234c9ed7711a31a55f99d1\",\"license\":\"MIT\"},\"lens-modules/contracts/libraries/constants/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Types\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol.\\n */\\nlibrary Types {\\n    /**\\n     * @notice ERC721Timestamped storage. Contains the owner address and the mint timestamp for every NFT.\\n     *\\n     * Note: Instead of the owner address in the _tokenOwners private mapping, we now store it in the\\n     * _tokenData mapping, alongside the mint timestamp.\\n     *\\n     * @param owner The token owner.\\n     * @param mintTimestamp The mint timestamp.\\n     */\\n    struct TokenData {\\n        address owner;\\n        uint96 mintTimestamp;\\n    }\\n\\n    /**\\n     * @notice A struct containing token follow-related data.\\n     *\\n     * @param followerProfileId The ID of the profile using the token to follow.\\n     * @param originalFollowTimestamp The timestamp of the first follow performed with the token.\\n     * @param followTimestamp The timestamp of the current follow, if a profile is using the token to follow.\\n     * @param profileIdAllowedToRecover The ID of the profile allowed to recover the follow ID, if any.\\n     */\\n    struct FollowData {\\n        uint160 followerProfileId;\\n        uint48 originalFollowTimestamp;\\n        uint48 followTimestamp;\\n        uint256 profileIdAllowedToRecover;\\n    }\\n\\n    /**\\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n     *\\n     * @param Unpaused The fully unpaused state.\\n     * @param PublishingPaused The state where only publication creation functions are paused.\\n     * @param Paused The fully paused state.\\n     */\\n    enum ProtocolState {\\n        Unpaused,\\n        PublishingPaused,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\\n     *\\n     * @param Nonexistent An indicator showing the queried publication does not exist.\\n     * @param Post A standard post, having an URI, action modules and no pointer to another publication.\\n     * @param Comment A comment, having an URI, action modules and a pointer to another publication.\\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or action modules.\\n     * @param Quote A quote, having an URI, action modules, and a pointer to another publication.\\n     */\\n    enum PublicationType {\\n        Nonexistent,\\n        Post,\\n        Comment,\\n        Mirror,\\n        Quote\\n    }\\n\\n    /**\\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\\n     *\\n     * @param signer The address of the signer. Specially needed as a parameter to support EIP-1271.\\n     * @param v The signature's recovery parameter.\\n     * @param r The signature's r parameter.\\n     * @param s The signature's s parameter.\\n     * @param deadline The signature's deadline.\\n     */\\n    struct EIP712Signature {\\n        address signer;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice A struct containing profile data.\\n     *\\n     * @param pubCount The number of publications made to this profile.\\n     * @param followModule The address of the current follow module in use by this profile, can be address(0) in none.\\n     * @param followNFT The address of the followNFT associated with this profile. It can be address(0) if the\\n     * profile has not been followed yet, as the collection is lazy-deployed upon the first follow.\\n     * @param __DEPRECATED__handle DEPRECATED in V2: handle slot, was replaced with LensHandles.\\n     * @param __DEPRECATED__imageURI DEPRECATED in V2: The URI to be used for the profile image.\\n     * @param __DEPRECATED__followNFTURI DEPRECATED in V2: The URI used for the follow NFT image.\\n     * @param metadataURI MetadataURI is used to store the profile's metadata, for example: displayed name, description,\\n     * interests, etc.\\n     */\\n    struct Profile {\\n        uint256 pubCount; // offset 0\\n        address followModule; // offset 1\\n        address followNFT; // offset 2\\n        string __DEPRECATED__handle; // offset 3\\n        string __DEPRECATED__imageURI; // offset 4\\n        string __DEPRECATED__followNFTURI; // Deprecated in V2 as we have a common tokenURI for all Follows, offset 5\\n        string metadataURI; // offset 6\\n    }\\n\\n    /**\\n     * @notice A struct containing publication data.\\n     *\\n     * @param pointedProfileId The profile token ID to point the publication to.\\n     * @param pointedPubId The publication ID to point the publication to.\\n     * These are used to implement the \\\"reference\\\" feature of the platform and is used in:\\n     * - Mirrors\\n     * - Comments\\n     * - Quotes\\n     * There are (0,0) if the publication is not pointing to any other publication (i.e. the publication is a Post).\\n     * @param contentURI The URI to set for the content of publication (can be ipfs, arweave, http, etc).\\n     * @param referenceModule Reference module associated with this profile, if any.\\n     * @param __DEPRECATED__collectModule Collect module associated with this publication, if any. Deprecated in V2.\\n     * @param __DEPRECATED__collectNFT Collect NFT associated with this publication, if any. Deprecated in V2.\\n     * @param pubType The type of publication, can be Nonexistent, Post, Comment, Mirror or Quote.\\n     * @param rootProfileId The profile ID of the root post (to determine if comments/quotes and mirrors come from it).\\n     * Posts, V1 publications and publications rooted in V1 publications don't have it set.\\n     * @param rootPubId The publication ID of the root post (to determine if comments/quotes and mirrors come from it).\\n     * Posts, V1 publications and publications rooted in V1 publications don't have it set.\\n     * @param actionModuleEnabled The action modules enabled in a given publication.\\n     */\\n    struct Publication {\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        string contentURI;\\n        address referenceModule;\\n        address __DEPRECATED__collectModule; // Deprecated in V2\\n        address __DEPRECATED__collectNFT; // Deprecated in V2\\n        // Added in Lens V2, so these will be zero for old publications:\\n        PublicationType pubType;\\n        uint256 rootProfileId;\\n        uint256 rootPubId;\\n        mapping(address => bool) actionModuleEnabled;\\n    }\\n\\n    struct PublicationMemory {\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        string contentURI;\\n        address referenceModule;\\n        address __DEPRECATED__collectModule; // Deprecated in V2\\n        address __DEPRECATED__collectNFT; // Deprecated in V2\\n        // Added in Lens V2, so these will be zero for old publications:\\n        PublicationType pubType;\\n        uint256 rootProfileId;\\n        uint256 rootPubId;\\n        // bytes32 __ACTION_MODULE_ENABLED_MAPPING; // Mappings are not supported in memory.\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `createProfile()` function.\\n     *\\n     * @param to The address receiving the profile.\\n     * @param followModule The follow module to use, can be the zero address.\\n     * @param followModuleInitData The follow module initialization data, if any.\\n     */\\n    struct CreateProfileParams {\\n        address to;\\n        address followModule;\\n        bytes followModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `post()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct PostParams {\\n        uint256 profileId;\\n        string contentURI;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param pointedProfileId The profile token ID to point the comment to.\\n     * @param pointedPubId The publication ID to point the comment to.\\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct CommentParams {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `quote()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param pointedProfileId The profile token ID of the publication author that is quoted.\\n     * @param pointedPubId The publication ID that is quoted.\\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct QuoteParams {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` or `quote()` internal functions.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param pointedProfileId The profile token ID of the publication author that is commented on/quoted.\\n     * @param pointedPubId The publication ID that is commented on/quoted.\\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct ReferencePubParams {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirror()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param metadataURI the URI containing metadata attributes to attach to this mirror publication.\\n     * @param pointedProfileId The profile token ID to point the mirror to.\\n     * @param pointedPubId The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     */\\n    struct MirrorParams {\\n        uint256 profileId;\\n        string metadataURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n    }\\n\\n    /**\\n     * Deprecated in V2: Will be removed after some time after upgrading to V2.\\n     * @notice A struct containing the parameters required for the legacy `collect()` function.\\n     * @dev The referrer can only be a mirror of the publication being collected.\\n     *\\n     * @param publicationCollectedProfileId The token ID of the profile that published the publication to collect.\\n     * @param publicationCollectedId The publication to collect's publication ID.\\n     * @param collectorProfileId The collector profile.\\n     * @param referrerProfileId The ID of a profile that authored a mirror that helped discovering the collected pub.\\n     * @param referrerPubId The ID of the mirror that helped discovering the collected pub.\\n     * @param collectModuleData The arbitrary data to pass to the collectModule if needed.\\n     */\\n    struct LegacyCollectParams {\\n        uint256 publicationCollectedProfileId;\\n        uint256 publicationCollectedId;\\n        uint256 collectorProfileId;\\n        uint256 referrerProfileId;\\n        uint256 referrerPubId;\\n        bytes collectModuleData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `action()` function.\\n     *\\n     * @param publicationActedProfileId The token ID of the profile that published the publication to action.\\n     * @param publicationActedId The publication to action's publication ID.\\n     * @param actorProfileId The actor profile.\\n     * @param referrerProfileId\\n     * @param referrerPubId\\n     * @param actionModuleAddress\\n     * @param actionModuleData The arbitrary data to pass to the actionModule if needed.\\n     */\\n    struct PublicationActionParams {\\n        uint256 publicationActedProfileId;\\n        uint256 publicationActedId;\\n        uint256 actorProfileId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        address actionModuleAddress;\\n        bytes actionModuleData;\\n    }\\n\\n    struct ProcessActionParams {\\n        uint256 publicationActedProfileId;\\n        uint256 publicationActedId;\\n        uint256 actorProfileId;\\n        address actorProfileOwner;\\n        address transactionExecutor;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes actionModuleData;\\n    }\\n\\n    struct ProcessCommentParams {\\n        uint256 profileId;\\n        uint256 pubId;\\n        address transactionExecutor;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes data;\\n    }\\n\\n    struct ProcessQuoteParams {\\n        uint256 profileId;\\n        uint256 pubId;\\n        address transactionExecutor;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes data;\\n    }\\n\\n    struct ProcessMirrorParams {\\n        uint256 profileId;\\n        uint256 pubId;\\n        address transactionExecutor;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @notice A struct containing a profile's delegated executors configuration.\\n     *\\n     * @param isApproved Tells when an address is approved as delegated executor in the given configuration number.\\n     * @param configNumber Current configuration number in use.\\n     * @param prevConfigNumber Previous configuration number set, before switching to the current one.\\n     * @param maxConfigNumberSet Maximum configuration number ever used.\\n     */\\n    struct DelegatedExecutorsConfig {\\n        mapping(uint256 => mapping(address => bool)) isApproved; // isApproved[configNumber][delegatedExecutor]\\n        uint64 configNumber;\\n        uint64 prevConfigNumber;\\n        uint64 maxConfigNumberSet;\\n    }\\n\\n    struct TreasuryData {\\n        address treasury;\\n        uint16 treasuryFeeBPS;\\n    }\\n\\n    struct MigrationParams {\\n        address lensHandlesAddress;\\n        address tokenHandleRegistryAddress;\\n        address legacyFeeFollowModule;\\n        address legacyProfileFollowModule;\\n        address newFeeFollowModule;\\n    }\\n}\\n\",\"keccak256\":\"0xffe0b820ba574fcfed3e5df59cede6c65f5e1da294c43c46ca9b87139775c885\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/ActionRestricted.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport {Errors} from './constants/Errors.sol';\\n\\n/**\\n * @title ActionRestricted\\n * @author Lens Protocol\\n *\\n * @notice This abstract contract adds a public `ACTION_MODULE` immutable field, and `onlyActionModule` modifier,\\n * to inherit from contracts that have functions restricted to be only called by the Action Modules.\\n */\\nabstract contract ActionRestricted {\\n    address public immutable ACTION_MODULE;\\n\\n    modifier onlyActionModule() {\\n        if (msg.sender != ACTION_MODULE) {\\n            revert Errors.NotActionModule();\\n        }\\n        _;\\n    }\\n\\n    constructor(address actionModule) {\\n        ACTION_MODULE = actionModule;\\n    }\\n}\\n\",\"keccak256\":\"0xc0cbbe631b77bb8d238509fd2dd8d35a795bfac5a5cf090d04e6b158b58d9add\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/FeeModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {Errors} from './constants/Errors.sol';\\nimport {ILensHub} from '../interfaces/ILensHub.sol';\\nimport {IModuleRegistry} from '../interfaces/IModuleRegistry.sol';\\n\\n/**\\n * @title FeeModuleBase\\n * @author Lens Protocol\\n *\\n * @notice This is an abstract contract to be inherited from by modules that require basic fee functionality.\\n * It contains getters for module globals parameters as well as a validation function to check expected data.\\n */\\nabstract contract FeeModuleBase {\\n    uint16 internal constant BPS_MAX = 10000;\\n\\n    ILensHub private immutable HUB;\\n    IModuleRegistry public immutable MODULE_REGISTRY;\\n\\n    constructor(address hub, address moduleRegistry) {\\n        HUB = ILensHub(hub);\\n        MODULE_REGISTRY = IModuleRegistry(moduleRegistry);\\n    }\\n\\n    function _verifyErc20Currency(address currency) internal {\\n        if (currency != address(0)) {\\n            MODULE_REGISTRY.verifyErc20Currency(currency);\\n        }\\n    }\\n\\n    function _treasuryData() internal view returns (address, uint16) {\\n        return HUB.getTreasuryData();\\n    }\\n\\n    function _validateDataIsExpected(bytes calldata data, address currency, uint256 amount) internal pure virtual {\\n        (address decodedCurrency, uint256 decodedAmount) = abi.decode(data, (address, uint256));\\n        if (decodedAmount != amount || decodedCurrency != currency) {\\n            revert Errors.ModuleDataMismatch();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae192f3ca5990d107be748bbf35f82ec4ebd72b45a9a4e73945ba7fb21c65214\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/LensModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {ILensModule} from './interfaces/ILensModule.sol';\\n\\nabstract contract LensModule is ILensModule {\\n    /// @inheritdoc ILensModule\\n    function supportsInterface(bytes4 interfaceID) public pure virtual override returns (bool) {\\n        return interfaceID == bytes4(keccak256(abi.encodePacked('LENS_MODULE')));\\n    }\\n}\\n\",\"keccak256\":\"0x2fae8afe2e476ebc1a1186bc0878133a69289c8a2a2b93736e83d698a10a65a6\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/LensModuleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {LensModule} from './LensModule.sol';\\n\\nabstract contract LensModuleMetadata is LensModule, Ownable {\\n    string private metadataURI;\\n\\n    function setModuleMetadataURI(string memory _metadataURI) external onlyOwner {\\n        metadataURI = _metadataURI;\\n    }\\n\\n    function getModuleMetadataURI() external view returns (string memory) {\\n        return metadataURI;\\n    }\\n}\\n\",\"keccak256\":\"0x3d8c2d6c124e261cc5b751edad530bd2520f9d80d41250583c69204ec6d9b3e9\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/act/collect/base/BaseFeeCollectModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {Errors} from '../../../constants/Errors.sol';\\nimport {FeeModuleBase} from '../../../FeeModuleBase.sol';\\nimport {ICollectModule} from '../../../interfaces/ICollectModule.sol';\\nimport {ActionRestricted} from '../../../ActionRestricted.sol';\\n\\nimport {ModuleTypes} from '../../../libraries/constants/ModuleTypes.sol';\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {FollowValidationLib} from '../../../libraries/FollowValidationLib.sol';\\n\\nimport {BaseFeeCollectModuleInitData, BaseProfilePublicationData, IBaseFeeCollectModule} from '../../../interfaces/IBaseFeeCollectModule.sol';\\n\\n/**\\n * @title BaseFeeCollectModule\\n * @author Lens Protocol\\n *\\n * @notice This is base Lens CollectModule implementation, allowing customization of time to collect, number of collects\\n * and Followers-only restriction. Charges a fee for collect and distributing it among Receiver/Referrals/Treasury.\\n * @dev Here we use \\\"Base\\\" terminology to anything that represents this base functionality (base structs,\\n * base functions, base storage). Other collect modules can be built on top of the \\\"Base\\\" by inheriting from this\\n * contract and overriding functions.\\n * This contract is marked \\\"abstract\\\" as it requires you to implement initializePublicationCollectModule and\\n * getPublicationData functions when you inherit from it. See SimpleFeeCollectModule as an example implementation.\\n */\\nabstract contract BaseFeeCollectModule is FeeModuleBase, ActionRestricted, IBaseFeeCollectModule {\\n    using SafeERC20 for IERC20;\\n\\n    address immutable HUB;\\n\\n    mapping(uint256 => mapping(uint256 => BaseProfilePublicationData)) internal _dataByPublicationByProfile;\\n\\n    constructor(\\n        address hub,\\n        address actionModule,\\n        address moduleRegistry\\n    ) ActionRestricted(actionModule) FeeModuleBase(hub, moduleRegistry) {\\n        HUB = hub;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public pure virtual returns (bool) {\\n        return interfaceID == type(ICollectModule).interfaceId;\\n    }\\n\\n    /**\\n     * @inheritdoc ICollectModule\\n     * @notice Processes a collect by:\\n     *  1. Validating that collect action meets all needed criteria\\n     *  2. Processing the collect action either with or without referral\\n     *\\n     * @param processCollectParams Collect action parameters (see ModuleTypes.ProcessCollectParams struct)\\n     */\\n    function processCollect(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\\n    ) external virtual onlyActionModule returns (bytes memory) {\\n        _validateAndStoreCollect(processCollectParams);\\n\\n        if (processCollectParams.referrerProfileIds.length == 0) {\\n            _processCollect(processCollectParams);\\n        } else {\\n            _processCollectWithReferral(processCollectParams);\\n        }\\n        return '';\\n    }\\n\\n    /// @inheritdoc IBaseFeeCollectModule\\n    function getBasePublicationData(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) public view virtual returns (BaseProfilePublicationData memory) {\\n        return _dataByPublicationByProfile[profileId][pubId];\\n    }\\n\\n    /// @inheritdoc IBaseFeeCollectModule\\n    function calculateFee(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\\n    ) public view virtual returns (uint160) {\\n        return\\n            _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\\n                processCollectParams.publicationCollectedId\\n            ].amount;\\n    }\\n\\n    /**\\n     * @dev Validates the Base parameters like:\\n     * 1) Is the currency whitelisted\\n     * 2) Is the referralFee in valid range\\n     * 3) Is the end of collects timestamp in valid range\\n     *\\n     * This should be called during initializePublicationCollectModule()\\n     *\\n     * @param baseInitData Module initialization data (see BaseFeeCollectModuleInitData struct)\\n     */\\n    function _validateBaseInitData(BaseFeeCollectModuleInitData memory baseInitData) internal virtual {\\n        if (\\n            (baseInitData.amount == 0 && baseInitData.currency != address(0)) ||\\n            (baseInitData.amount != 0 && baseInitData.currency == address(0)) ||\\n            baseInitData.referralFee > BPS_MAX ||\\n            (baseInitData.endTimestamp != 0 && baseInitData.endTimestamp < block.timestamp)\\n        ) {\\n            revert Errors.InitParamsInvalid();\\n        }\\n        _verifyErc20Currency(baseInitData.currency);\\n    }\\n\\n    /**\\n     * @dev Stores the initial module parameters\\n     *\\n     * This should be called during initializePublicationCollectModule()\\n     *\\n     * @param profileId The token ID of the profile publishing the publication.\\n     * @param pubId The publication ID.\\n     * @param baseInitData Module initialization data (see BaseFeeCollectModuleInitData struct)\\n     */\\n    function _storeBasePublicationCollectParameters(\\n        uint256 profileId,\\n        uint256 pubId,\\n        BaseFeeCollectModuleInitData memory baseInitData\\n    ) internal virtual {\\n        _dataByPublicationByProfile[profileId][pubId].amount = baseInitData.amount;\\n        _dataByPublicationByProfile[profileId][pubId].collectLimit = baseInitData.collectLimit;\\n        _dataByPublicationByProfile[profileId][pubId].currency = baseInitData.currency;\\n        _dataByPublicationByProfile[profileId][pubId].recipient = baseInitData.recipient;\\n        _dataByPublicationByProfile[profileId][pubId].referralFee = baseInitData.referralFee;\\n        _dataByPublicationByProfile[profileId][pubId].followerOnly = baseInitData.followerOnly;\\n        _dataByPublicationByProfile[profileId][pubId].endTimestamp = baseInitData.endTimestamp;\\n    }\\n\\n    /**\\n     * @dev Validates the collect action by checking that:\\n     * 1) the collector is a follower (if enabled)\\n     * 2) the number of collects after the action doesn't surpass the collect limit (if enabled)\\n     * 3) the current block timestamp doesn't surpass the end timestamp (if enabled)\\n     *\\n     * This should be called during processCollect()\\n     */\\n    function _validateAndStoreCollect(ModuleTypes.ProcessCollectParams calldata processCollectParams) internal virtual {\\n        uint96 collectsAfter = ++_dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\\n            processCollectParams.publicationCollectedId\\n        ].currentCollects;\\n\\n        if (\\n            _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\\n                processCollectParams.publicationCollectedId\\n            ].followerOnly\\n        ) {\\n            FollowValidationLib.validateIsFollowingOrSelf({\\n                hub: HUB,\\n                followerProfileId: processCollectParams.collectorProfileId,\\n                followedProfileId: processCollectParams.publicationCollectedProfileId\\n            });\\n        }\\n\\n        uint256 endTimestamp = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\\n            processCollectParams.publicationCollectedId\\n        ].endTimestamp;\\n        uint256 collectLimit = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\\n            processCollectParams.publicationCollectedId\\n        ].collectLimit;\\n\\n        if (collectLimit != 0 && collectsAfter > collectLimit) {\\n            revert Errors.MintLimitExceeded();\\n        }\\n        if (endTimestamp != 0 && block.timestamp > endTimestamp) {\\n            revert Errors.CollectExpired();\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal processing of a collect:\\n     *  1. Calculation of fees\\n     *  2. Validation that fees are what collector expected\\n     *  3. Transfer of fees to recipient(-s) and treasury\\n     *\\n     * @param processCollectParams Parameters of the collect\\n     */\\n    function _processCollect(ModuleTypes.ProcessCollectParams calldata processCollectParams) internal virtual {\\n        uint256 amount = calculateFee(processCollectParams);\\n        address currency = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\\n            processCollectParams.publicationCollectedId\\n        ].currency;\\n        _validateDataIsExpected(processCollectParams.data, currency, amount);\\n\\n        (address treasury, uint16 treasuryFee) = _treasuryData();\\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\\n\\n        if (treasuryAmount > 0) {\\n            IERC20(currency).safeTransferFrom(processCollectParams.transactionExecutor, treasury, treasuryAmount);\\n        }\\n\\n        // Send amount after treasury cut, to all recipients\\n        _transferToRecipients(processCollectParams, currency, amount - treasuryAmount);\\n    }\\n\\n    /**\\n     * @dev Internal processing of a collect with a referrals (if any).\\n     *\\n     * Same as _processCollect, but also includes transfer to referrals (if any):\\n     *  1. Calculation of fees\\n     *  2. Validation that fees are what collector expected\\n     *  3. Transfer of fees to treasury, referrals (if any) and recipients\\n     *\\n     * @param processCollectParams Parameters of the collect\\n     */\\n    function _processCollectWithReferral(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\\n    ) internal virtual {\\n        uint256 amount = calculateFee(processCollectParams);\\n        address currency = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\\n            processCollectParams.publicationCollectedId\\n        ].currency;\\n\\n        _validateDataIsExpected(processCollectParams.data, currency, amount);\\n\\n        (address treasury, uint16 treasuryFee) = _treasuryData();\\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\\n\\n        if (treasuryAmount > 0) {\\n            IERC20(currency).safeTransferFrom(processCollectParams.transactionExecutor, treasury, treasuryAmount);\\n        }\\n\\n        uint256 amountAfterReferrals = _transferToReferrals(processCollectParams, currency, amount - treasuryAmount);\\n\\n        _transferToRecipients(processCollectParams, currency, amountAfterReferrals);\\n    }\\n\\n    /**\\n     * @dev Tranfers the fee to recipient(-s)\\n     *\\n     * Override this to add additional functionality (e.g. multiple recipients)\\n     *\\n     * @param processCollectParams Parameters of the collect\\n     * @param currency Currency of the transaction\\n     * @param amount Amount to transfer to recipient(-s)\\n     */\\n    function _transferToRecipients(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams,\\n        address currency,\\n        uint256 amount\\n    ) internal virtual {\\n        address recipient = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\\n            processCollectParams.publicationCollectedId\\n        ].recipient;\\n\\n        if (amount > 0) {\\n            IERC20(currency).safeTransferFrom(processCollectParams.transactionExecutor, recipient, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tranfers the part of fee to referral(-s)\\n     *\\n     * Override this to add additional functionality (e.g. different amounts to different referrals, etc)\\n     *\\n     * @param processCollectParams Parameters of the collect\\n     * @param currency Currency of the transaction\\n     * @param amount Amount of the fee after subtracting the Treasury part.\\n     */\\n    function _transferToReferrals(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams,\\n        address currency,\\n        uint256 amount\\n    ) internal virtual returns (uint256) {\\n        uint256 referralFee = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\\n            processCollectParams.publicationCollectedId\\n        ].referralFee;\\n        uint256 totalReferralsAmount;\\n        if (referralFee != 0) {\\n            // The reason we levy the referral fee on the adjusted amount is so that referral fees\\n            // don't bypass the treasury fee, in essence referrals pay their fair share to the treasury.\\n            totalReferralsAmount = (amount * referralFee) / BPS_MAX;\\n            uint256 numberOfReferrals = processCollectParams.referrerProfileIds.length;\\n            uint256 amountPerReferral = totalReferralsAmount / numberOfReferrals;\\n            if (amountPerReferral > 0) {\\n                uint256 i;\\n                while (i < numberOfReferrals) {\\n                    address referralRecipient = IERC721(HUB).ownerOf(processCollectParams.referrerProfileIds[i]);\\n\\n                    // Send referral fee in ERC20 tokens\\n                    IERC20(currency).safeTransferFrom(\\n                        processCollectParams.transactionExecutor,\\n                        referralRecipient,\\n                        amountPerReferral\\n                    );\\n                    unchecked {\\n                        ++i;\\n                    }\\n                }\\n            }\\n        }\\n        return amount - totalReferralsAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x064b31d6a4280d583359873a82b808704b6a6c60266f7f270ffe9051651fe464\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/constants/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nlibrary Errors {\\n    error FollowInvalid();\\n    error ModuleDataMismatch();\\n    error NotHub();\\n    error InitParamsInvalid();\\n    error InvalidParams();\\n    error MintLimitExceeded();\\n    error CollectExpired();\\n    error NotActionModule();\\n    error CollectNotAllowed();\\n    error AlreadyInitialized();\\n}\\n\",\"keccak256\":\"0x97050f82838b8c13a931705209f2301eebcf3e63e6f30014e325f3a4d1555f28\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/interfaces/IBaseFeeCollectModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport {ICollectModule} from './ICollectModule.sol';\\nimport {ModuleTypes} from '../libraries/constants/ModuleTypes.sol';\\n\\n/**\\n * @notice A struct containing the necessary data to execute collect actions on a publication.\\n *\\n * @param amount The collecting cost associated with this publication. 0 for free collect.\\n * @param collectLimit The maximum number of collects for this publication. 0 for no limit.\\n * @param currency The currency associated with this publication.\\n * @param currentCollects The current number of collects for this publication.\\n * @param referralFee The referral fee associated with this publication.\\n * @param followerOnly True if only followers of publisher may collect the post.\\n * @param endTimestamp The end timestamp after which collecting is impossible. 0 for no expiry.\\n * @param recipient Recipient of collect fees.\\n */\\nstruct BaseProfilePublicationData {\\n    uint160 amount;\\n    uint96 collectLimit;\\n    address currency;\\n    uint96 currentCollects;\\n    address recipient;\\n    uint16 referralFee;\\n    bool followerOnly;\\n    uint72 endTimestamp;\\n}\\n\\n/**\\n * @notice A struct containing the necessary data to initialize this Base Collect Module.\\n *\\n * @param amount The collecting cost associated with this publication. 0 for free collect.\\n * @param collectLimit The maximum number of collects for this publication. 0 for no limit.\\n * @param currency The currency associated with this publication.\\n * @param referralFee The referral fee associated with this publication.\\n * @param followerOnly True if only followers of publisher may collect the post.\\n * @param endTimestamp The end timestamp after which collecting is impossible. 0 for no expiry.\\n * @param recipient Recipient of collect fees.\\n */\\nstruct BaseFeeCollectModuleInitData {\\n    uint160 amount;\\n    uint96 collectLimit;\\n    address currency;\\n    uint16 referralFee;\\n    bool followerOnly;\\n    uint72 endTimestamp;\\n    address recipient;\\n}\\n\\ninterface IBaseFeeCollectModule is ICollectModule {\\n    /**\\n     * @notice Returns the Base publication data for a given publication, or an empty struct if that publication was not\\n     * initialized with this module.\\n     *\\n     * @param profileId The token ID of the profile mapped to the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return The BaseProfilePublicationData struct mapped to that publication.\\n     */\\n    function getBasePublicationData(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (BaseProfilePublicationData memory);\\n\\n    /**\\n     * @notice Calculates and returns the collect fee of a publication.\\n     * @dev Override this function to use a different formula for the fee.\\n     *\\n     * @return The collect fee of the specified publication.\\n     */\\n    function calculateFee(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\\n    ) external view returns (uint160);\\n}\\n\",\"keccak256\":\"0x98d59a0cc605a33755afa72e366e4d90ea558b6e730d6dfc5139619e97e3bbd0\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/interfaces/ICollectModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {ModuleTypes} from '../libraries/constants/ModuleTypes.sol';\\n\\n/**\\n * @title ICollectModule\\n * @author Lens Protocol\\n *\\n * @notice This is the standard interface for all Lens-compatible CollectModules.\\n * Collect modules allow users to execute custom logic upon a collect action over a publication, like:\\n *  - Only allow the collect if the collector is following the publication author.\\n *  - Only allow the collect if the collector has made a payment to\\n *  - Allow any collect but only during the first 24 hours.\\n *  - Etc.\\n */\\ninterface ICollectModule {\\n    /**\\n     * @notice Initializes data for a given publication being published.\\n     * @custom:permissions LensHub.\\n     *\\n     * @param profileId The token ID of the profile publishing the publication.\\n     * @param pubId The associated publication's LensHub publication ID.\\n     * @param transactionExecutor The owner or an approved delegated executor.\\n     * @param data Arbitrary data __passed from the user!__ to be decoded.\\n     *\\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\\n     * indexers or UIs.\\n     */\\n    function initializePublicationCollectModule(\\n        uint256 profileId,\\n        uint256 pubId,\\n        address transactionExecutor,\\n        bytes calldata data\\n    ) external returns (bytes memory);\\n\\n    /**\\n     * @notice Processes a collect action for a given publication.\\n     * @custom:permissions LensHub.\\n     *\\n     * @param processCollectParams The parameters for the collect action.\\n     *\\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\\n     * indexers or UIs.\\n     */\\n    function processCollect(\\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\\n    ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x66749fd89107fb1e0b6cd605a8c2db916b78ff3787070050055976f7cd8b6e61\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/interfaces/ILensModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\ninterface ILensModule is IERC165 {\\n    /// @dev for now we check for keccak('LENS_MODULE');\\n    /// Override this and add the type(IModuleInterface).interfaceId for corresponding module type\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    /// @notice Human-readable description of the module\\n    // Can be JSON\\n    // Can be contract source code\\n    // Can be github link\\n    // Can be ipfs with documentation\\n    // etc\\n    function getModuleMetadataURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa359c950c9ad8de4b9f9a4b38eb40656c9ca64133f24df0627115ff6c1d215c0\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/libraries/FollowValidationLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport {ILensHub} from '../../interfaces/ILensHub.sol';\\nimport {Errors} from '../../libraries/constants/Errors.sol';\\n\\n/**\\n * @title FollowValidationLib\\n * @author Lens Protocol\\n *\\n * @notice A library contract that verifies that a user is following another user and reverts if not.\\n */\\nlibrary FollowValidationLib {\\n    function validateIsFollowing(address hub, uint256 followerProfileId, uint256 followedProfileId) internal view {\\n        if (!ILensHub(hub).isFollowing(followerProfileId, followedProfileId)) {\\n            revert Errors.NotFollowing();\\n        }\\n    }\\n\\n    function validateIsFollowingOrSelf(\\n        address hub,\\n        uint256 followerProfileId,\\n        uint256 followedProfileId\\n    ) internal view {\\n        // We treat following yourself is always true\\n        if (followerProfileId == followedProfileId) {\\n            return;\\n        }\\n        validateIsFollowing(hub, followerProfileId, followedProfileId);\\n    }\\n}\\n\",\"keccak256\":\"0x1625a4341e64c8c603b689e9d05049330a5fd26d8511ac1a87b4513614c9e0af\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/libraries/constants/ModuleTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from '../../../libraries/constants/Types.sol';\\n\\n/**\\n * @title Types\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol modules.\\n */\\nlibrary ModuleTypes {\\n    struct ProcessCollectParams {\\n        uint256 publicationCollectedProfileId;\\n        uint256 publicationCollectedId;\\n        uint256 collectorProfileId;\\n        address collectorProfileOwner;\\n        address transactionExecutor;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0xf7a3fb9c79891a5ec3b0aa7e7d5aaa538d34a0fe9a49ce6c1b93a87c0ba3f620\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100346200010657601f6200235f38819003918201601f19168301916001600160401b038311848410176200010b5780849260809460405283398101031262000106578062000053620000a89262000121565b620000616020830162000121565b6200007d6060620000756040860162000121565b940162000121565b6001600160a01b0383811660805290931660a05260c05260e052620000a23362000136565b62000136565b6040516121df908162000180823960805181611e9c015260a0518181816103980152818161093b0152818161150a01526116c7015260c05181818161043101528181610bae01526112ad015260e051818181610c0b0152611a150152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200010657565b600180546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a356fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146112f75750806322366844146112dc578063397a2a88146112975780633f5038921461104d578063681591c114610ec05780636fb7166114610b95578063715018a614610b385780638da5cb5b14610b0f57806391027b53146103c7578063b95ddb5214610382578063ce90d52e1461029b578063e0f0da851461026e578063f2fde38b146101a8578063f8d7758c1461015b5763fcdd2347146100c457600080fd5b34610156576101006100de6100d836611375565b90611755565b68ffffffffffffffffff60e06040519260018060a01b0380825116855260208201516001600160601b0380911660208701528160408401511660408701526060830151166060860152608082015116608085015261ffff60a08201511660a085015260c0810151151560c085015201511660e0820152f35b600080fd5b3461015657602061019661016e36611451565b803560009081526020818152604080832093820135835292905220546001600160a01b031690565b6040516001600160a01b039091168152f35b34610156576020366003190112610156576004356001600160a01b0381811691829003610156576101d7611810565b811561021a57600154826001600160601b0360a01b821617600155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461015657600036600319011261015657610287611810565b6020610291611697565b6040519015158152f35b34610156576000366003190112610156576040516002546000826102be83611619565b9182825260209360019085600182169182600014610362575050600114610305575b506102ed925003836113de565b610301604051928284938452830190611483565b0390f35b84915060026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906000915b85831061034a5750506102ed9350820101856102e0565b80548389018501528794508693909201918101610333565b60ff1916858201526102ed95151560051b85010192508791506102e09050565b34610156576000366003190112610156576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610156576080366003190112610156576044356001600160a01b03811603610156576001600160401b036064351161015657366023606435011215610156576001600160401b0360643560040135116101565736602460643560040135606435010111610156577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610afd5761012060643560048101358101031261015657606435602401356001600160a01b03811681036101565760446064350135906001600160601b0382168203610156576104ae60648035016114c3565b916104bd608460643501611688565b9160a460643501359384151585036101565760c460643501359368ffffffffffffffffff85168503610156576001600160401b0360e4606435013511610156576024606435600401356064350101604360e46064350135606435010112156101565761053460643560e48101350160240135611562565b9461054260405196876113de565b60643560e48101358101602481810135808a5260208a019360048101350190910160069190911b909101604401116101565760643560e481013501604401905b60643560e481013501602481013560061b016044018210610ab15750506040606435600481013581010360df19011261015657604051966105c2886113a7565b6105d1610104606435016114c3565b808952610124606435013560208a0152604051906370a0823160e01b6020830152306024830152602482528160608101106001600160401b03606084011117610a735760608201604052815160009283926020909101906001600160a01b03165afa61063b611c0b565b60208a015115918215610aa8575b508115610a9b575b50610a895760043560005260036020526040600020602435600052602052604060002060018060a01b038951166001600160601b0360a01b825416178155600160208a0151910155604051958660e08101106001600160401b0360e089011117610a735760e0870160409081526001600160a01b0387811689526001600160601b039290921660208901529085169087015261ffff9092166060860152901515608085015268ffffffffffffffffff1660a0840152600060c0840152835115159182610a46575b50506109bb5780516001600160a01b0316158080610a2f575b8115610a0b575b5080156109f8575b80156109cd575b6109bb5760408101516001600160a01b03168061091b575b5061077360a0926024359060043590611c65565b8051600435600090815260208181526040808320602435845282529091208054918401516001600160a01b031960a09190911b166001861b600019019093166001600160601b03861b909216919091176001600160a01b03169190911790556040818101516004356000908152602081815283822060243583529052919091206001808201805491861b600019019384166001600160601b03871b92831617905560c084015160029092018054606086015161ffff60a01b60a09190911b1693909416939091169290921761ffff60a01b1916179055608081015160043560008181526020818152604080832060243580855290835292819020600201805497909601516001600160b81b031960b89190911b1660ff60b01b95151560b01b959095166001600160b01b03909716969096179390931790935584519482015184516001600160a01b03909616865291850191909152909290917e1b01f30767efad067e528e93b9be9561450f768ae05e7fbeaddadb6a4415e191a3610301610907366064356004013560246064350161141a565b604051918291602083526020830190611483565b604051633f8ecfd360e21b815260048101919091529160208360248160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156109af5760a09361077392610980575b50925061075f565b6109a19060203d6020116109a8575b61099981836113de565b8101906114d7565b5085610978565b503d61098f565b6040513d6000823e3d90fd5b6040516348be0eb360e01b8152600490fd5b5068ffffffffffffffffff60a08201511680151590816109ee575b50610747565b90504211846109e8565b5061271061ffff60608301511611610740565b90501580610a1a575b84610738565b5060408101516001600160a01b031615610a14565b60408301516001600160a01b031615159150610731565b6001600160a01b03161591508115610a61575b508480610718565b6001600160a01b031615905084610a59565b634e487b7160e01b600052604160045260246000fd5b604051631e448c8760e21b8152600490fd5b6020915051141589610651565b1591508a610649565b604060248360643560040135606435010301126101565760206040918251610ad8816113a7565b610ae1856114c3565b8152610aee838601611688565b83820152815201910190610582565b604051632fc56e1160e21b8152600490fd5b34610156576000366003190112610156576001546040516001600160a01b039091168152602090f35b3461015657600036600319011261015657610b51611810565b600180546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461015657610ba336611451565b6001600160a01b03907f000000000000000000000000000000000000000000000000000000000000000082163303610afd576040810135918135906020938484013583600052600386526040600020816000528652610c0560406000206115f2565b838151167f000000000000000000000000000000000000000000000000000000000000000094604051906331a9108f60e11b82528560048301528982602481848b165afa80156109af578a92600091610e88575b506040516370a0823160e01b81529116600482015291829060249082905afa9081156109af57600091610e5b575b5087868514159283610e4e575b505050610e3c5783600052600086526040600020816000528652600160406000200192835460a01c6001600160601b0393848214610e265785546001600160a01b031660019290920160a081901b6001600160a01b031916929092179095559385908160005260008952604060002084600052895260ff60026040600020015460b01c16610e15575b50905060005260008652604060002081600052865260026040600020015460b81c9360005260008652604060002090600052855260406000205460a01c908115159283610e09575b505050610df7578015159081610ded575b50610ddb57610d8860a0820182611653565b15159050610dcd57610d9990611b4b565b604051908082018281106001600160401b03821117610a735760405260008252610301604051928284938452830190611483565b610dd6906118e2565b610d99565b6040516304cd703960e51b8152600490fd5b9050421183610d76565b604051635b21dfd360e11b8152600490fd5b16119050848080610d65565b610e1e92611da5565b868481610d1d565b634e487b7160e01b600052601160045260246000fd5b60405163569d45cf60e11b8152600490fd5b0151119050878781610c94565b90508781813d8311610e81575b610e7281836113de565b81010312610156575188610c87565b503d610e68565b83819492503d8311610eb9575b610e9f81836113de565b81010312610156576024610eb38b93611868565b90610c59565b503d610e95565b3461015657602080600319360112610156576001600160401b03600435818111610156573660238201121561015657610f0390369060248160040135910161141a565b91610f0c611810565b8251918211610a7357610f20600254611619565b601f8111610fe8575b50602090601f8311600114610f6757508192600092610f5c575b5050600019600383901b1c191660019190911b17600255005b015190508280610f43565b90601f1983169360026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace926000905b868210610fd05750508360019510610fb7575b505050811b01600255005b015160001960f88460031b161c19169055828080610fac565b80600185968294968601518155019501930190610f99565b60026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace601f840160051c81019160208510611043575b601f0160051c01905b8181106110375750610f29565b6000815560010161102a565b9091508190611021565b346101565761119361105e36611375565b919060405161106c8161138b565b6000815260006020820152600060408201526000606082015260006080820152600060a0820152600060c0820152606060e0820152610100604051916110b1836113a7565b600083526000602084015201526111896110cb8483611755565b60018060a01b03815116946001600160601b036020830151169160018060a01b036040820151166001600160601b0360608301511661ffff60a0840151169168ffffffffffffffffff60e060c08601511515950151169488600052600360205260406000208160005260205260406000209860005260046020526040600020906000526020526040600020956040519a6111648c61138b565b8b5260208b015260408a01526060890152608088015260a087015260c0860152611579565b60e08401526115f2565b6101008201526040516020815260018060a01b0382511660208201526001600160601b03602083015116604082015260018060a01b0360408301511660608201526001600160601b03606083015116608082015261ffff60808301511660a082015260a0820151151560c082015268ffffffffffffffffff60c08301511660e082015260e0820151610140806101008401528151806101608501526020610180850193019060005b8181106112685750505060206101008495015160018060a01b038151166101208601520151908301520390f35b825180516001600160a01b0316865260209081015161ffff16818701526040909501949092019160010161123b565b34610156576000366003190112610156576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101565760003660031901126101565760206102916114ef565b34610156576020366003190112610156576001600160e01b0319906004358281169081900361015657602092637f5ab69960e11b8214928315611342575b5050506040519015158152f35b90919250838101906a4c454e535f4d4f44554c4560a81b8252600b8152611368816113a7565b5190201614828080611335565b6040906003190112610156576004359060243590565b61012081019081106001600160401b03821117610a7357604052565b604081019081106001600160401b03821117610a7357604052565b61010081019081106001600160401b03821117610a7357604052565b90601f801991011681019081106001600160401b03821117610a7357604052565b6001600160401b038111610a7357601f01601f191660200190565b929192611426826113ff565b9161143460405193846113de565b829481845281830111610156578281602093846000960137010152565b6003199060208183011261015657600435916001600160401b0383116101565782610120920301126101565760040190565b919082519283825260005b8481106114af575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161148e565b35906001600160a01b038216820361015657565b90816020910312610156575180151581036101565790565b604051631c5ebe2f60e01b81523060048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156109af57600091611546575090565b61155f915060203d6020116109a85761099981836113de565b90565b6001600160401b038111610a735760051b60200190565b90815461158581611562565b9260409361159660405191826113de565b82815280946020809201926000526020600020906000935b8585106115bd57505050505050565b600184819284516115cd816113a7565b61ffff8754858060a01b038116835260a01c16838201528152019301940193916115ae565b906040516115ff816113a7565b82546001600160a01b031681526001909201546020830152565b90600182811c92168015611649575b602083101461163357565b634e487b7160e01b600052602260045260246000fd5b91607f1691611628565b903590601e198136030182121561015657018035906001600160401b03821161015657602001918160051b3603831361015657565b359061ffff8216820361015657565b61169f6114ef565b611750576040516320d5a27760e11b81523060048201526001602482015260208160448160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156109af57600091611731575b50806117095790565b7fb24617d9cac8b35b25b3bcaf3eb7e8e8e1cbed6ee116121e4e1c08a977431062600080a190565b61174a915060203d6020116109a85761099981836113de565b38611700565b600190565b60e060409283928351611767816113c2565b600093818580935282602082015282878201528260608201528260808201528260a08201528260c08201520152825281602052828220908252602052209060028151926117b3846113c2565b80549260018060a01b0393848116865260a01c60208601526001820154908482169086015260a01c60608501520154908116608083015261ffff8160a01c1660a083015260ff8160b01c16151560c083015260b81c60e082015290565b6001546001600160a01b0316330361182457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b51906001600160a01b038216820361015657565b903590601e198136030182121561015657018035906001600160401b0382116101565760200191813603831361015657565b81810292918115918404141715610e2657565b356001600160a01b03811681036101565790565b91908203918211610e2657565b80356000908152602081815260408083208285013584529091529020549091906001600160a01b03908116908115611b455790839182359060009282845260209184835260409485812095848801359687835285526001938382842060010154169788826101008c01611955908d61187c565b61195f9391611e25565b88611968611e85565b936127109e8f61ffff80971661197e90846118ae565b0480938115159561199796611b2d575b505050506118d5565b97845283875282842090845286526002828420015460a01c1699829a806119d6575b505050505050506119d493946119ce916118d5565b91612068565b565b6119e79192939495969b50876118ae565b049860a08801926119f8848a611653565b8093915015611b1957828c049485611a11575b506119b9565b92957f00000000000000000000000000000000000000000000000000000000000000001692825b878110611a455750611a0b565b611a4f828d611653565b821015611b05578651906331a9108f60e11b82528260051b013560048201528381602481895afa908115611afb5791888b928f948f908992611aaa575b50611a9e6080611aa4959697016118c1565b90611f38565b01611a38565b945050505091508381813d8311611af4575b611ac681836113de565b81010312611af05790611aa4888e8e611a9e60808f97611ae590611868565b939796955050611a8c565b8480fd5b503d611abc565b87513d87823e3d90fd5b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b82526012600452602482fd5b611a9e6080611b3c95016118c1565b8c82388e61198e565b50509050565b80356000908152602081815260408083208285013584529091529020546001600160a01b03919082168015611c06576119ce61ffff6119d49484356000526000602052604060002060208601356000526020526001604060002001541692611bc28185611bbc61010089018961187c565b90611e25565b612710611bd9611bd0611e85565b909416836118ae565b04918280611be9575b50506118d5565b611bff91611bf9608089016118c1565b87611f38565b3882611be2565b505050565b3d15611c36573d90611c1c826113ff565b91611c2a60405193846113de565b82523d6000602084013e565b606090565b8051821015611c4f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b92919280518015611d9e5760009260005b828110611ca0575050505061271091925003611c8e57565b60405163195f90f160e21b8152600490fd5b61ffff906020958287611cb38489611c3b565b5101511615611d8c578287611cc88489611c3b565b510151168101809111610e265795836000526004928382526040806000208b600052835260002091611cfa8489611c3b565b519280549068010000000000000000821015611d7757600196878301808355831015611d625750600090815282902084519101805492909401516001600160b01b03199092166001600160a01b039190911617911660a01b61ffff60a01b1617905501611c76565b603290634e487b7160e01b6000525260246000fd5b604187634e487b7160e01b6000525260246000fd5b60405163409bab8160e01b8152600490fd5b5050509050565b91808214611c06576040516347720ebb60e01b81526004810192909252602482015290602090829060449082906001600160a01b03165afa9081156109af57600091611e06575b5015611df457565b6040516322d9eef360e21b8152600490fd5b611e1f915060203d6020116109a85761099981836113de565b38611dec565b90816040919493948101031261015657611e3e816114c3565b602091909101359091148015926001600160a01b0391611e74575b505050611e6257565b6040516346308bd560e01b8152600490fd5b819293501691161415388080611e59565b604080516398f965d160e01b8152919080836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315611f2d576000918294611edd575b50509190565b9080929450813d8311611f26575b611ef581836113de565b81010312611f22576020611f0882611868565b9101519261ffff84168403611f1f57503880611ed7565b80fd5b8280fd5b503d611eeb565b50513d6000823e3d90fd5b6040516323b872dd60e01b602082019081526001600160a01b0393841660248301529383166044820152606480820195909552938452919260a08101929091906001600160401b03841183851017610a7357611fe0946000928392866040521693611fa2866113a7565b602086527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152519082855af1611fda611c0b565b9161210c565b805190811591821561204e575b505015611ff657565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b61206192506020809183010191016114d7565b3880611fed565b909181356000526020926004602052604060002060208401356000526020526120946040600020611579565b9182519460005b8681106120ab5750505050505050565b806127106120cc61ffff856120c26001968b611c3b565b51015116866118ae565b04806120da575b500161209b565b61210690838060a01b036120f060808b016118c1565b816120fb868c611c3b565b515116918916611f38565b386120d3565b9192901561216e5750815115612120575090565b3b156121295790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156121815750805190602001fd5b60405162461bcd60e51b8152602060048201529081906121a5906024830190611483565b0390fdfea2646970667358221220b108c5c66c3f77b01dcf1e047ac8bd12ce198f6b49307b6e82a5bd1ec11b519864736f6c63430008170033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146112f75750806322366844146112dc578063397a2a88146112975780633f5038921461104d578063681591c114610ec05780636fb7166114610b95578063715018a614610b385780638da5cb5b14610b0f57806391027b53146103c7578063b95ddb5214610382578063ce90d52e1461029b578063e0f0da851461026e578063f2fde38b146101a8578063f8d7758c1461015b5763fcdd2347146100c457600080fd5b34610156576101006100de6100d836611375565b90611755565b68ffffffffffffffffff60e06040519260018060a01b0380825116855260208201516001600160601b0380911660208701528160408401511660408701526060830151166060860152608082015116608085015261ffff60a08201511660a085015260c0810151151560c085015201511660e0820152f35b600080fd5b3461015657602061019661016e36611451565b803560009081526020818152604080832093820135835292905220546001600160a01b031690565b6040516001600160a01b039091168152f35b34610156576020366003190112610156576004356001600160a01b0381811691829003610156576101d7611810565b811561021a57600154826001600160601b0360a01b821617600155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461015657600036600319011261015657610287611810565b6020610291611697565b6040519015158152f35b34610156576000366003190112610156576040516002546000826102be83611619565b9182825260209360019085600182169182600014610362575050600114610305575b506102ed925003836113de565b610301604051928284938452830190611483565b0390f35b84915060026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906000915b85831061034a5750506102ed9350820101856102e0565b80548389018501528794508693909201918101610333565b60ff1916858201526102ed95151560051b85010192508791506102e09050565b34610156576000366003190112610156576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610156576080366003190112610156576044356001600160a01b03811603610156576001600160401b036064351161015657366023606435011215610156576001600160401b0360643560040135116101565736602460643560040135606435010111610156577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610afd5761012060643560048101358101031261015657606435602401356001600160a01b03811681036101565760446064350135906001600160601b0382168203610156576104ae60648035016114c3565b916104bd608460643501611688565b9160a460643501359384151585036101565760c460643501359368ffffffffffffffffff85168503610156576001600160401b0360e4606435013511610156576024606435600401356064350101604360e46064350135606435010112156101565761053460643560e48101350160240135611562565b9461054260405196876113de565b60643560e48101358101602481810135808a5260208a019360048101350190910160069190911b909101604401116101565760643560e481013501604401905b60643560e481013501602481013560061b016044018210610ab15750506040606435600481013581010360df19011261015657604051966105c2886113a7565b6105d1610104606435016114c3565b808952610124606435013560208a0152604051906370a0823160e01b6020830152306024830152602482528160608101106001600160401b03606084011117610a735760608201604052815160009283926020909101906001600160a01b03165afa61063b611c0b565b60208a015115918215610aa8575b508115610a9b575b50610a895760043560005260036020526040600020602435600052602052604060002060018060a01b038951166001600160601b0360a01b825416178155600160208a0151910155604051958660e08101106001600160401b0360e089011117610a735760e0870160409081526001600160a01b0387811689526001600160601b039290921660208901529085169087015261ffff9092166060860152901515608085015268ffffffffffffffffff1660a0840152600060c0840152835115159182610a46575b50506109bb5780516001600160a01b0316158080610a2f575b8115610a0b575b5080156109f8575b80156109cd575b6109bb5760408101516001600160a01b03168061091b575b5061077360a0926024359060043590611c65565b8051600435600090815260208181526040808320602435845282529091208054918401516001600160a01b031960a09190911b166001861b600019019093166001600160601b03861b909216919091176001600160a01b03169190911790556040818101516004356000908152602081815283822060243583529052919091206001808201805491861b600019019384166001600160601b03871b92831617905560c084015160029092018054606086015161ffff60a01b60a09190911b1693909416939091169290921761ffff60a01b1916179055608081015160043560008181526020818152604080832060243580855290835292819020600201805497909601516001600160b81b031960b89190911b1660ff60b01b95151560b01b959095166001600160b01b03909716969096179390931790935584519482015184516001600160a01b03909616865291850191909152909290917e1b01f30767efad067e528e93b9be9561450f768ae05e7fbeaddadb6a4415e191a3610301610907366064356004013560246064350161141a565b604051918291602083526020830190611483565b604051633f8ecfd360e21b815260048101919091529160208360248160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156109af5760a09361077392610980575b50925061075f565b6109a19060203d6020116109a8575b61099981836113de565b8101906114d7565b5085610978565b503d61098f565b6040513d6000823e3d90fd5b6040516348be0eb360e01b8152600490fd5b5068ffffffffffffffffff60a08201511680151590816109ee575b50610747565b90504211846109e8565b5061271061ffff60608301511611610740565b90501580610a1a575b84610738565b5060408101516001600160a01b031615610a14565b60408301516001600160a01b031615159150610731565b6001600160a01b03161591508115610a61575b508480610718565b6001600160a01b031615905084610a59565b634e487b7160e01b600052604160045260246000fd5b604051631e448c8760e21b8152600490fd5b6020915051141589610651565b1591508a610649565b604060248360643560040135606435010301126101565760206040918251610ad8816113a7565b610ae1856114c3565b8152610aee838601611688565b83820152815201910190610582565b604051632fc56e1160e21b8152600490fd5b34610156576000366003190112610156576001546040516001600160a01b039091168152602090f35b3461015657600036600319011261015657610b51611810565b600180546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461015657610ba336611451565b6001600160a01b03907f000000000000000000000000000000000000000000000000000000000000000082163303610afd576040810135918135906020938484013583600052600386526040600020816000528652610c0560406000206115f2565b838151167f000000000000000000000000000000000000000000000000000000000000000094604051906331a9108f60e11b82528560048301528982602481848b165afa80156109af578a92600091610e88575b506040516370a0823160e01b81529116600482015291829060249082905afa9081156109af57600091610e5b575b5087868514159283610e4e575b505050610e3c5783600052600086526040600020816000528652600160406000200192835460a01c6001600160601b0393848214610e265785546001600160a01b031660019290920160a081901b6001600160a01b031916929092179095559385908160005260008952604060002084600052895260ff60026040600020015460b01c16610e15575b50905060005260008652604060002081600052865260026040600020015460b81c9360005260008652604060002090600052855260406000205460a01c908115159283610e09575b505050610df7578015159081610ded575b50610ddb57610d8860a0820182611653565b15159050610dcd57610d9990611b4b565b604051908082018281106001600160401b03821117610a735760405260008252610301604051928284938452830190611483565b610dd6906118e2565b610d99565b6040516304cd703960e51b8152600490fd5b9050421183610d76565b604051635b21dfd360e11b8152600490fd5b16119050848080610d65565b610e1e92611da5565b868481610d1d565b634e487b7160e01b600052601160045260246000fd5b60405163569d45cf60e11b8152600490fd5b0151119050878781610c94565b90508781813d8311610e81575b610e7281836113de565b81010312610156575188610c87565b503d610e68565b83819492503d8311610eb9575b610e9f81836113de565b81010312610156576024610eb38b93611868565b90610c59565b503d610e95565b3461015657602080600319360112610156576001600160401b03600435818111610156573660238201121561015657610f0390369060248160040135910161141a565b91610f0c611810565b8251918211610a7357610f20600254611619565b601f8111610fe8575b50602090601f8311600114610f6757508192600092610f5c575b5050600019600383901b1c191660019190911b17600255005b015190508280610f43565b90601f1983169360026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace926000905b868210610fd05750508360019510610fb7575b505050811b01600255005b015160001960f88460031b161c19169055828080610fac565b80600185968294968601518155019501930190610f99565b60026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace601f840160051c81019160208510611043575b601f0160051c01905b8181106110375750610f29565b6000815560010161102a565b9091508190611021565b346101565761119361105e36611375565b919060405161106c8161138b565b6000815260006020820152600060408201526000606082015260006080820152600060a0820152600060c0820152606060e0820152610100604051916110b1836113a7565b600083526000602084015201526111896110cb8483611755565b60018060a01b03815116946001600160601b036020830151169160018060a01b036040820151166001600160601b0360608301511661ffff60a0840151169168ffffffffffffffffff60e060c08601511515950151169488600052600360205260406000208160005260205260406000209860005260046020526040600020906000526020526040600020956040519a6111648c61138b565b8b5260208b015260408a01526060890152608088015260a087015260c0860152611579565b60e08401526115f2565b6101008201526040516020815260018060a01b0382511660208201526001600160601b03602083015116604082015260018060a01b0360408301511660608201526001600160601b03606083015116608082015261ffff60808301511660a082015260a0820151151560c082015268ffffffffffffffffff60c08301511660e082015260e0820151610140806101008401528151806101608501526020610180850193019060005b8181106112685750505060206101008495015160018060a01b038151166101208601520151908301520390f35b825180516001600160a01b0316865260209081015161ffff16818701526040909501949092019160010161123b565b34610156576000366003190112610156576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101565760003660031901126101565760206102916114ef565b34610156576020366003190112610156576001600160e01b0319906004358281169081900361015657602092637f5ab69960e11b8214928315611342575b5050506040519015158152f35b90919250838101906a4c454e535f4d4f44554c4560a81b8252600b8152611368816113a7565b5190201614828080611335565b6040906003190112610156576004359060243590565b61012081019081106001600160401b03821117610a7357604052565b604081019081106001600160401b03821117610a7357604052565b61010081019081106001600160401b03821117610a7357604052565b90601f801991011681019081106001600160401b03821117610a7357604052565b6001600160401b038111610a7357601f01601f191660200190565b929192611426826113ff565b9161143460405193846113de565b829481845281830111610156578281602093846000960137010152565b6003199060208183011261015657600435916001600160401b0383116101565782610120920301126101565760040190565b919082519283825260005b8481106114af575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161148e565b35906001600160a01b038216820361015657565b90816020910312610156575180151581036101565790565b604051631c5ebe2f60e01b81523060048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156109af57600091611546575090565b61155f915060203d6020116109a85761099981836113de565b90565b6001600160401b038111610a735760051b60200190565b90815461158581611562565b9260409361159660405191826113de565b82815280946020809201926000526020600020906000935b8585106115bd57505050505050565b600184819284516115cd816113a7565b61ffff8754858060a01b038116835260a01c16838201528152019301940193916115ae565b906040516115ff816113a7565b82546001600160a01b031681526001909201546020830152565b90600182811c92168015611649575b602083101461163357565b634e487b7160e01b600052602260045260246000fd5b91607f1691611628565b903590601e198136030182121561015657018035906001600160401b03821161015657602001918160051b3603831361015657565b359061ffff8216820361015657565b61169f6114ef565b611750576040516320d5a27760e11b81523060048201526001602482015260208160448160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156109af57600091611731575b50806117095790565b7fb24617d9cac8b35b25b3bcaf3eb7e8e8e1cbed6ee116121e4e1c08a977431062600080a190565b61174a915060203d6020116109a85761099981836113de565b38611700565b600190565b60e060409283928351611767816113c2565b600093818580935282602082015282878201528260608201528260808201528260a08201528260c08201520152825281602052828220908252602052209060028151926117b3846113c2565b80549260018060a01b0393848116865260a01c60208601526001820154908482169086015260a01c60608501520154908116608083015261ffff8160a01c1660a083015260ff8160b01c16151560c083015260b81c60e082015290565b6001546001600160a01b0316330361182457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b51906001600160a01b038216820361015657565b903590601e198136030182121561015657018035906001600160401b0382116101565760200191813603831361015657565b81810292918115918404141715610e2657565b356001600160a01b03811681036101565790565b91908203918211610e2657565b80356000908152602081815260408083208285013584529091529020549091906001600160a01b03908116908115611b455790839182359060009282845260209184835260409485812095848801359687835285526001938382842060010154169788826101008c01611955908d61187c565b61195f9391611e25565b88611968611e85565b936127109e8f61ffff80971661197e90846118ae565b0480938115159561199796611b2d575b505050506118d5565b97845283875282842090845286526002828420015460a01c1699829a806119d6575b505050505050506119d493946119ce916118d5565b91612068565b565b6119e79192939495969b50876118ae565b049860a08801926119f8848a611653565b8093915015611b1957828c049485611a11575b506119b9565b92957f00000000000000000000000000000000000000000000000000000000000000001692825b878110611a455750611a0b565b611a4f828d611653565b821015611b05578651906331a9108f60e11b82528260051b013560048201528381602481895afa908115611afb5791888b928f948f908992611aaa575b50611a9e6080611aa4959697016118c1565b90611f38565b01611a38565b945050505091508381813d8311611af4575b611ac681836113de565b81010312611af05790611aa4888e8e611a9e60808f97611ae590611868565b939796955050611a8c565b8480fd5b503d611abc565b87513d87823e3d90fd5b634e487b7160e01b85526032600452602485fd5b634e487b7160e01b82526012600452602482fd5b611a9e6080611b3c95016118c1565b8c82388e61198e565b50509050565b80356000908152602081815260408083208285013584529091529020546001600160a01b03919082168015611c06576119ce61ffff6119d49484356000526000602052604060002060208601356000526020526001604060002001541692611bc28185611bbc61010089018961187c565b90611e25565b612710611bd9611bd0611e85565b909416836118ae565b04918280611be9575b50506118d5565b611bff91611bf9608089016118c1565b87611f38565b3882611be2565b505050565b3d15611c36573d90611c1c826113ff565b91611c2a60405193846113de565b82523d6000602084013e565b606090565b8051821015611c4f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b92919280518015611d9e5760009260005b828110611ca0575050505061271091925003611c8e57565b60405163195f90f160e21b8152600490fd5b61ffff906020958287611cb38489611c3b565b5101511615611d8c578287611cc88489611c3b565b510151168101809111610e265795836000526004928382526040806000208b600052835260002091611cfa8489611c3b565b519280549068010000000000000000821015611d7757600196878301808355831015611d625750600090815282902084519101805492909401516001600160b01b03199092166001600160a01b039190911617911660a01b61ffff60a01b1617905501611c76565b603290634e487b7160e01b6000525260246000fd5b604187634e487b7160e01b6000525260246000fd5b60405163409bab8160e01b8152600490fd5b5050509050565b91808214611c06576040516347720ebb60e01b81526004810192909252602482015290602090829060449082906001600160a01b03165afa9081156109af57600091611e06575b5015611df457565b6040516322d9eef360e21b8152600490fd5b611e1f915060203d6020116109a85761099981836113de565b38611dec565b90816040919493948101031261015657611e3e816114c3565b602091909101359091148015926001600160a01b0391611e74575b505050611e6257565b6040516346308bd560e01b8152600490fd5b819293501691161415388080611e59565b604080516398f965d160e01b8152919080836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315611f2d576000918294611edd575b50509190565b9080929450813d8311611f26575b611ef581836113de565b81010312611f22576020611f0882611868565b9101519261ffff84168403611f1f57503880611ed7565b80fd5b8280fd5b503d611eeb565b50513d6000823e3d90fd5b6040516323b872dd60e01b602082019081526001600160a01b0393841660248301529383166044820152606480820195909552938452919260a08101929091906001600160401b03841183851017610a7357611fe0946000928392866040521693611fa2866113a7565b602086527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152519082855af1611fda611c0b565b9161210c565b805190811591821561204e575b505015611ff657565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b61206192506020809183010191016114d7565b3880611fed565b909181356000526020926004602052604060002060208401356000526020526120946040600020611579565b9182519460005b8681106120ab5750505050505050565b806127106120cc61ffff856120c26001968b611c3b565b51015116866118ae565b04806120da575b500161209b565b61210690838060a01b036120f060808b016118c1565b816120fb868c611c3b565b515116918916611f38565b386120d3565b9192901561216e5750815115612120575090565b3b156121295790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156121815750805190602001fd5b60405162461bcd60e51b8152602060048201529081906121a5906024830190611483565b0390fdfea2646970667358221220b108c5c66c3f77b01dcf1e047ac8bd12ce198f6b49307b6e82a5bd1ec11b519864736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateFee((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))": {
        "details": "Override this function to use a different formula for the fee.",
        "returns": {
          "_0": "The collect fee of the specified publication."
        }
      },
      "getBasePublicationData(uint256,uint256)": {
        "params": {
          "profileId": "The token ID of the profile mapped to the publication to query.",
          "pubId": "The publication ID of the publication to query."
        },
        "returns": {
          "_0": "The BaseProfilePublicationData struct mapped to that publication."
        }
      },
      "getPublicationData(uint256,uint256)": {
        "params": {
          "profileId": "The token ID of the profile mapped to the publication to query.",
          "pubId": "The publication ID of the publication to query."
        },
        "returns": {
          "_0": "The TokenGatedCollectPublicationData struct mapped to that publication."
        }
      },
      "isRegistered()": {
        "details": "Checks if the module is registered in the module registry",
        "returns": {
          "_0": "True if the module is registered, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processCollect((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))": {
        "params": {
          "processCollectParams": "Collect action parameters (see ModuleTypes.ProcessCollectParams struct)"
        },
        "returns": {
          "_0": "bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by indexers or UIs."
        }
      },
      "registerModule()": {
        "details": "Registers the open action in the module registry",
        "returns": {
          "_0": "True if the module was registered, false otherwise"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateFee((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))": {
        "notice": "Calculates and returns the collect fee of a publication."
      },
      "getBasePublicationData(uint256,uint256)": {
        "notice": "Returns the Base publication data for a given publication, or an empty struct if that publication was not initialized with this module."
      },
      "getModuleMetadataURI()": {
        "notice": "Human-readable description of the module"
      },
      "getPublicationData(uint256,uint256)": {
        "notice": "Returns the publication data for a given publication, or an empty struct if that publication was not initialized with this module."
      },
      "processCollect((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))": {
        "notice": "Processes a collect by:  1. Validating that collect action meets all needed criteria  2. Processing the collect action either with or without referral"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23778,
        "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
        "label": "_dataByPublicationByProfile",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(BaseProfilePublicationData)24850_storage))"
      },
      {
        "astId": 7,
        "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 22273,
        "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
        "label": "metadataURI",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4219,
        "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
        "label": "_gateParams",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GateParams)4158_storage))"
      },
      {
        "astId": 4227,
        "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
        "label": "_recipients",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(RecipientData)4152_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RecipientData)4152_storage)dyn_storage": {
        "base": "t_struct(RecipientData)4152_storage",
        "encoding": "dynamic_array",
        "label": "struct RecipientData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_array(t_struct(RecipientData)4152_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RecipientData[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(RecipientData)4152_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(RecipientData)4152_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct RecipientData[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(RecipientData)4152_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(BaseProfilePublicationData)24850_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct BaseProfilePublicationData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(BaseProfilePublicationData)24850_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GateParams)4158_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct GateParams))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(GateParams)4158_storage)"
      },
      "t_mapping(t_uint256,t_struct(BaseProfilePublicationData)24850_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BaseProfilePublicationData)",
        "numberOfBytes": "32",
        "value": "t_struct(BaseProfilePublicationData)24850_storage"
      },
      "t_mapping(t_uint256,t_struct(GateParams)4158_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GateParams)",
        "numberOfBytes": "32",
        "value": "t_struct(GateParams)4158_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BaseProfilePublicationData)24850_storage": {
        "encoding": "inplace",
        "label": "struct BaseProfilePublicationData",
        "members": [
          {
            "astId": 24835,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint160"
          },
          {
            "astId": 24837,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "collectLimit",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 24839,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "currency",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 24841,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "currentCollects",
            "offset": 20,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 24843,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "recipient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 24845,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "referralFee",
            "offset": 20,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 24847,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "followerOnly",
            "offset": 22,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 24849,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "endTimestamp",
            "offset": 23,
            "slot": "2",
            "type": "t_uint72"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(GateParams)4158_storage": {
        "encoding": "inplace",
        "label": "struct GateParams",
        "members": [
          {
            "astId": 4155,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4157,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "minThreshold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RecipientData)4152_storage": {
        "encoding": "inplace",
        "label": "struct RecipientData",
        "members": [
          {
            "astId": 4149,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4151,
            "contract": "contracts/TokenGatedCollectModule.sol:TokenGatedCollectModule",
            "label": "split",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint72": {
        "encoding": "inplace",
        "label": "uint72",
        "numberOfBytes": "9"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}