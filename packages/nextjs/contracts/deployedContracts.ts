/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    MockConditionalTokens: {
      address: "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      abi: [
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "parentCollectionId",
              type: "bytes32",
            },
            {
              internalType: "bytes32",
              name: "conditionId",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "indexSet",
              type: "uint256",
            },
          ],
          name: "getCollectionId",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "oracle",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "questionId",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "outcomeSlotCount",
              type: "uint256",
            },
          ],
          name: "getConditionId",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "contract IERC20",
              name: "collateralToken",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "collectionId",
              type: "bytes32",
            },
          ],
          name: "getPositionId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
      ],
      inheritedFunctions: {
        getCollectionId: "contracts/interfaces/IConditionalTokens.sol",
        getConditionId: "contracts/interfaces/IConditionalTokens.sol",
        getPositionId: "contracts/interfaces/IConditionalTokens.sol",
      },
    },
    MockCtfExchange: {
      address: "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "AlreadyRegistered",
          type: "error",
        },
        {
          inputs: [],
          name: "InvalidComplement",
          type: "error",
        },
        {
          inputs: [],
          name: "InvalidShortString",
          type: "error",
        },
        {
          inputs: [],
          name: "InvalidTokenId",
          type: "error",
        },
        {
          inputs: [],
          name: "MakingGtRemaining",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "str",
              type: "string",
            },
          ],
          name: "StringTooLong",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [],
          name: "EIP712DomainChanged",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "token0",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "token1",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "conditionId",
              type: "bytes32",
            },
          ],
          name: "TokenRegistered",
          type: "event",
        },
        {
          inputs: [],
          name: "eip712Domain",
          outputs: [
            {
              internalType: "bytes1",
              name: "fields",
              type: "bytes1",
            },
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "version",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "chainId",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "verifyingContract",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32",
            },
            {
              internalType: "uint256[]",
              name: "extensions",
              type: "uint256[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "token",
              type: "uint256",
            },
          ],
          name: "getComplement",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "token",
              type: "uint256",
            },
          ],
          name: "getConditionId",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "orderHash",
              type: "bytes32",
            },
          ],
          name: "getOrderStatus",
          outputs: [
            {
              components: [
                {
                  internalType: "bool",
                  name: "isFilledOrCancelled",
                  type: "bool",
                },
                {
                  internalType: "uint256",
                  name: "remaining",
                  type: "uint256",
                },
              ],
              internalType: "struct OrderStatus",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "salt",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "maker",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "signer",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "taker",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "makerAmount",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "takerAmount",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "expiration",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "feeRateBps",
                  type: "uint256",
                },
                {
                  internalType: "enum Side",
                  name: "side",
                  type: "uint8",
                },
                {
                  internalType: "enum SignatureType",
                  name: "signatureType",
                  type: "uint8",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
              internalType: "struct Order",
              name: "order",
              type: "tuple",
            },
          ],
          name: "hashOrder",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          name: "orderStatus",
          outputs: [
            {
              internalType: "bool",
              name: "isFilledOrCancelled",
              type: "bool",
            },
            {
              internalType: "uint256",
              name: "remaining",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "token0",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "token1",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "conditionId",
              type: "bytes32",
            },
          ],
          name: "registerToken",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "registry",
          outputs: [
            {
              internalType: "uint256",
              name: "complement",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "conditionId",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "token",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "complement",
              type: "uint256",
            },
          ],
          name: "validateComplement",
          outputs: [],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "validateTokenId",
          outputs: [],
          stateMutability: "view",
          type: "function",
        },
      ],
      inheritedFunctions: {
        getComplement: "contracts/interfaces/ICtfExchange.sol",
        getConditionId: "contracts/interfaces/ICtfExchange.sol",
        getOrderStatus: "contracts/interfaces/ICtfExchange.sol",
        hashOrder: "contracts/interfaces/ICtfExchange.sol",
        registry: "contracts/interfaces/ICtfExchange.sol",
        validateComplement: "contracts/interfaces/ICtfExchange.sol",
        validateTokenId: "contracts/interfaces/ICtfExchange.sol",
        eip712Domain: "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
      },
    },
    MockModuleRegistry: {
      address: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "moduleAddress",
              type: "address",
            },
          ],
          name: "getModuleTypes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "currencyAddress",
              type: "address",
            },
          ],
          name: "isErc20CurrencyRegistered",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "moduleAddress",
              type: "address",
            },
          ],
          name: "isModuleRegistered",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "moduleAddress",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "moduleType",
              type: "uint256",
            },
          ],
          name: "isModuleRegisteredAs",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "currencyAddress",
              type: "address",
            },
          ],
          name: "registerErc20Currency",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "moduleAddress",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "moduleType",
              type: "uint256",
            },
          ],
          name: "registerModule",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "currencyAddress",
              type: "address",
            },
          ],
          name: "verifyErc20Currency",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "moduleAddress",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "moduleType",
              type: "uint256",
            },
          ],
          name: "verifyModule",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
      inheritedFunctions: {
        getModuleTypes: "lens-modules/contracts/interfaces/IModuleRegistry.sol",
        isErc20CurrencyRegistered: "lens-modules/contracts/interfaces/IModuleRegistry.sol",
        isModuleRegistered: "lens-modules/contracts/interfaces/IModuleRegistry.sol",
        isModuleRegisteredAs: "lens-modules/contracts/interfaces/IModuleRegistry.sol",
        registerErc20Currency: "lens-modules/contracts/interfaces/IModuleRegistry.sol",
        registerModule: "lens-modules/contracts/interfaces/IModuleRegistry.sol",
        verifyErc20Currency: "lens-modules/contracts/interfaces/IModuleRegistry.sol",
        verifyModule: "lens-modules/contracts/interfaces/IModuleRegistry.sol",
      },
    },
    MockUmaCtfAdapter: {
      address: "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "creator",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "Flagged",
          type: "error",
        },
        {
          inputs: [],
          name: "Initialized",
          type: "error",
        },
        {
          inputs: [],
          name: "InvalidAncillaryData",
          type: "error",
        },
        {
          inputs: [],
          name: "InvalidOOPrice",
          type: "error",
        },
        {
          inputs: [],
          name: "InvalidPayouts",
          type: "error",
        },
        {
          inputs: [],
          name: "NotFlagged",
          type: "error",
        },
        {
          inputs: [],
          name: "NotInitialized",
          type: "error",
        },
        {
          inputs: [],
          name: "NotOptimisticOracle",
          type: "error",
        },
        {
          inputs: [],
          name: "NotReadyToResolve",
          type: "error",
        },
        {
          inputs: [],
          name: "Paused",
          type: "error",
        },
        {
          inputs: [],
          name: "PriceNotAvailable",
          type: "error",
        },
        {
          inputs: [],
          name: "Resolved",
          type: "error",
        },
        {
          inputs: [],
          name: "SafetyPeriodNotPassed",
          type: "error",
        },
        {
          inputs: [],
          name: "UnsupportedToken",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
            {
              indexed: false,
              internalType: "uint256[]",
              name: "payouts",
              type: "uint256[]",
            },
          ],
          name: "QuestionEmergencyResolved",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "QuestionFlagged",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "requestTimestamp",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "creator",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "ancillaryData",
              type: "bytes",
            },
            {
              indexed: false,
              internalType: "address",
              name: "rewardToken",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "reward",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "proposalBond",
              type: "uint256",
            },
          ],
          name: "QuestionInitialized",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "QuestionPaused",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "QuestionReset",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
            {
              indexed: true,
              internalType: "int256",
              name: "settledPrice",
              type: "int256",
            },
            {
              indexed: false,
              internalType: "uint256[]",
              name: "payouts",
              type: "uint256[]",
            },
          ],
          name: "QuestionResolved",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "QuestionUnpaused",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "flag",
          outputs: [],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "getQuestion",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "requestTimestamp",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "reward",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "proposalBond",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "emergencyResolutionTimestamp",
                  type: "uint256",
                },
                {
                  internalType: "bool",
                  name: "resolved",
                  type: "bool",
                },
                {
                  internalType: "bool",
                  name: "paused",
                  type: "bool",
                },
                {
                  internalType: "bool",
                  name: "reset",
                  type: "bool",
                },
                {
                  internalType: "address",
                  name: "rewardToken",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "creator",
                  type: "address",
                },
                {
                  internalType: "bytes",
                  name: "ancillaryData",
                  type: "bytes",
                },
              ],
              internalType: "struct QuestionDataV2",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "ancillaryData",
              type: "bytes",
            },
            {
              internalType: "address",
              name: "rewardToken",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "reward",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "proposalBond",
              type: "uint256",
            },
          ],
          name: "initialize",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "maxAncillaryData",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "pause",
          outputs: [],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          name: "questions",
          outputs: [
            {
              internalType: "uint256",
              name: "requestTimestamp",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "reward",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "proposalBond",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "emergencyResolutionTimestamp",
              type: "uint256",
            },
            {
              internalType: "bool",
              name: "resolved",
              type: "bool",
            },
            {
              internalType: "bool",
              name: "paused",
              type: "bool",
            },
            {
              internalType: "bool",
              name: "reset",
              type: "bool",
            },
            {
              internalType: "address",
              name: "rewardToken",
              type: "address",
            },
            {
              internalType: "address",
              name: "creator",
              type: "address",
            },
            {
              internalType: "bytes",
              name: "ancillaryData",
              type: "bytes",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "ready",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "reset",
          outputs: [],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "resolve",
          outputs: [],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "questionID",
              type: "bytes32",
            },
          ],
          name: "unpause",
          outputs: [],
          stateMutability: "pure",
          type: "function",
        },
      ],
      inheritedFunctions: {
        flag: "contracts/interfaces/IUmaCtfAdapterV2.sol",
        getQuestion: "contracts/interfaces/IUmaCtfAdapterV2.sol",
        initialize: "contracts/interfaces/IUmaCtfAdapterV2.sol",
        pause: "contracts/interfaces/IUmaCtfAdapterV2.sol",
        ready: "contracts/interfaces/IUmaCtfAdapterV2.sol",
        reset: "contracts/interfaces/IUmaCtfAdapterV2.sol",
        resolve: "contracts/interfaces/IUmaCtfAdapterV2.sol",
        unpause: "contracts/interfaces/IUmaCtfAdapterV2.sol",
      },
    },
    PolymarketAttestActionModule: {
      address: "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "lensHub",
              type: "address",
            },
            {
              internalType: "address",
              name: "lensModuleRegistry",
              type: "address",
            },
            {
              internalType: "contract ICtfExchange",
              name: "exchange",
              type: "address",
            },
            {
              internalType: "contract IERC20",
              name: "collateralToken",
              type: "address",
            },
            {
              internalType: "contract IConditionalTokens",
              name: "conditionalTokens",
              type: "address",
            },
            {
              internalType: "contract IUmaCtfAdapterV2",
              name: "umaCtfAdapterV2",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "BinaryOutcomesInvalid",
          type: "error",
        },
        {
          inputs: [],
          name: "ConditionIdDoesNotMatch",
          type: "error",
        },
        {
          inputs: [],
          name: "MarketNotFound",
          type: "error",
        },
        {
          inputs: [],
          name: "NotHub",
          type: "error",
        },
        {
          inputs: [],
          name: "OracleMustBeProvided",
          type: "error",
        },
        {
          inputs: [],
          name: "OracleNotSupported",
          type: "error",
        },
        {
          inputs: [],
          name: "OrderInvalid",
          type: "error",
        },
        {
          inputs: [],
          name: "OrderMustBeProvided",
          type: "error",
        },
        {
          inputs: [],
          name: "OrderNotSignedByActor",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          name: "OwnableInvalidOwner",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          name: "OwnableUnauthorizedAccount",
          type: "error",
        },
        {
          inputs: [],
          name: "QuestionIdMustBeProvided",
          type: "error",
        },
        {
          inputs: [],
          name: "QuestionNotFound",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "publicationActedProfileId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "publicationActedId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "address",
              name: "oracle",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "questionId",
              type: "bytes32",
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "conditionId",
              type: "bytes32",
            },
            {
              indexed: false,
              internalType: "uint256[2]",
              name: "tokenIds",
              type: "uint256[2]",
            },
          ],
          name: "MarketRegistered",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [],
          name: "ModuleRegistered",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "publicationActedProfileId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "publicationActedId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "actorProfileId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "actorProfileOwner",
              type: "address",
            },
            {
              indexed: false,
              internalType: "address",
              name: "oracle",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "questionId",
              type: "bytes32",
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "conditionId",
              type: "bytes32",
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "salt",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "maker",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "signer",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "taker",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "makerAmount",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "takerAmount",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "expiration",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "feeRateBps",
                  type: "uint256",
                },
                {
                  internalType: "enum Side",
                  name: "side",
                  type: "uint8",
                },
                {
                  internalType: "enum SignatureType",
                  name: "signatureType",
                  type: "uint8",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
              indexed: false,
              internalType: "struct Order",
              name: "order",
              type: "tuple",
            },
          ],
          name: "OrderVerified",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "previousOwner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "OwnershipTransferred",
          type: "event",
        },
        {
          inputs: [],
          name: "HUB",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "MODULE_REGISTRY",
          outputs: [
            {
              internalType: "contract IModuleRegistry",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "OUTCOME_SLOT_COUNT",
          outputs: [
            {
              internalType: "uint8",
              name: "",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getCollateralToken",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "profileId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "pubId",
              type: "uint256",
            },
          ],
          name: "getConditionId",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getConditionalTokens",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getExchange",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getModuleMetadataURI",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getOracle",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "profileId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "pubId",
              type: "uint256",
            },
          ],
          name: "getQuestionId",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "profileId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "pubId",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          name: "initializePublicationAction",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "isRegistered",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "publicationActedProfileId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "publicationActedId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "actorProfileId",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "actorProfileOwner",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "transactionExecutor",
                  type: "address",
                },
                {
                  internalType: "uint256[]",
                  name: "referrerProfileIds",
                  type: "uint256[]",
                },
                {
                  internalType: "uint256[]",
                  name: "referrerPubIds",
                  type: "uint256[]",
                },
                {
                  internalType: "enum Types.PublicationType[]",
                  name: "referrerPubTypes",
                  type: "uint8[]",
                },
                {
                  internalType: "bytes",
                  name: "actionModuleData",
                  type: "bytes",
                },
              ],
              internalType: "struct Types.ProcessActionParams",
              name: "params",
              type: "tuple",
            },
          ],
          name: "processPublicationAction",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "registerModule",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "renounceOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_metadataURI",
              type: "string",
            },
          ],
          name: "setModuleMetadataURI",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceID",
              type: "bytes4",
            },
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        initializePublicationAction: "lens-modules/contracts/interfaces/IPublicationActionModule.sol",
        processPublicationAction: "lens-modules/contracts/interfaces/IPublicationActionModule.sol",
        HUB: "lens-modules/contracts/base/HubRestricted.sol",
        getModuleMetadataURI: "lens-modules/contracts/modules/LensModuleMetadata.sol",
        owner: "contracts/base/LensModuleRegistrant.sol",
        renounceOwnership: "contracts/base/LensModuleRegistrant.sol",
        setModuleMetadataURI: "lens-modules/contracts/modules/LensModuleMetadata.sol",
        supportsInterface: "lens-modules/contracts/modules/LensModuleMetadata.sol",
        transferOwnership: "contracts/base/LensModuleRegistrant.sol",
        MODULE_REGISTRY: "contracts/base/LensModuleRegistrant.sol",
        isRegistered: "contracts/base/LensModuleRegistrant.sol",
        registerModule: "contracts/base/LensModuleRegistrant.sol",
      },
    },
    TestToken: {
      address: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "allowance",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "needed",
              type: "uint256",
            },
          ],
          name: "ERC20InsufficientAllowance",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "balance",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "needed",
              type: "uint256",
            },
          ],
          name: "ERC20InsufficientBalance",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "approver",
              type: "address",
            },
          ],
          name: "ERC20InvalidApprover",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "receiver",
              type: "address",
            },
          ],
          name: "ERC20InvalidReceiver",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
          ],
          name: "ERC20InvalidSender",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
          ],
          name: "ERC20InvalidSpender",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "Approval",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "Transfer",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
          ],
          name: "allowance",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "approve",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "decimals",
          outputs: [
            {
              internalType: "uint8",
              name: "",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "mint",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "name",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "symbol",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "totalSupply",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "transfer",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          name: "transferFrom",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        allowance: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        approve: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        balanceOf: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        decimals: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        name: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        symbol: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        totalSupply: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        transfer: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        transferFrom: "@openzeppelin/contracts/token/ERC20/ERC20.sol",
      },
    },
  },
  80001: {
    PolymarketAttestActionModule: {
      address: "0x9EdEEdc0ee45e30d4DDB26C0266984a4e21C0312",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "lensHub",
              type: "address",
            },
            {
              internalType: "address",
              name: "lensModuleRegistry",
              type: "address",
            },
            {
              internalType: "contract ICTFExchange",
              name: "exchange",
              type: "address",
            },
            {
              internalType: "contract IERC20",
              name: "collateralToken",
              type: "address",
            },
            {
              internalType: "contract IConditionalTokens",
              name: "conditionalTokens",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "BinaryOutcomesInvalid",
          type: "error",
        },
        {
          inputs: [],
          name: "ConditionIdDoesNotMatch",
          type: "error",
        },
        {
          inputs: [],
          name: "MarketNotFound",
          type: "error",
        },
        {
          inputs: [],
          name: "NotHub",
          type: "error",
        },
        {
          inputs: [],
          name: "OracleMustBeProvided",
          type: "error",
        },
        {
          inputs: [],
          name: "OracleNotSupported",
          type: "error",
        },
        {
          inputs: [],
          name: "OrderInvalid",
          type: "error",
        },
        {
          inputs: [],
          name: "OrderMustBeProvided",
          type: "error",
        },
        {
          inputs: [],
          name: "OrderNotSignedByActor",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          name: "OwnableInvalidOwner",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          name: "OwnableUnauthorizedAccount",
          type: "error",
        },
        {
          inputs: [],
          name: "QuestionIdMustBeProvided",
          type: "error",
        },
        {
          inputs: [],
          name: "QuestionNotFound",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "publicationActedProfileId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "publicationActedId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "address",
              name: "oracle",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "questionId",
              type: "bytes32",
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "conditionId",
              type: "bytes32",
            },
            {
              indexed: false,
              internalType: "uint256[2]",
              name: "tokenIds",
              type: "uint256[2]",
            },
          ],
          name: "MarketRegistered",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [],
          name: "ModuleRegistered",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "publicationActedProfileId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "publicationActedId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "actorProfileId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "actorProfileOwner",
              type: "address",
            },
            {
              indexed: false,
              internalType: "address",
              name: "oracle",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "questionId",
              type: "bytes32",
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "conditionId",
              type: "bytes32",
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "salt",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "maker",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "signer",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "taker",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "makerAmount",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "takerAmount",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "expiration",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "feeRateBps",
                  type: "uint256",
                },
                {
                  internalType: "enum Side",
                  name: "side",
                  type: "uint8",
                },
                {
                  internalType: "enum SignatureType",
                  name: "signatureType",
                  type: "uint8",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
              indexed: false,
              internalType: "struct Order",
              name: "order",
              type: "tuple",
            },
          ],
          name: "OrderVerified",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "previousOwner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "OwnershipTransferred",
          type: "event",
        },
        {
          inputs: [],
          name: "HUB",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "MODULE_REGISTRY",
          outputs: [
            {
              internalType: "contract IModuleRegistry",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "OUTCOME_SLOT_COUNT",
          outputs: [
            {
              internalType: "uint8",
              name: "",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "UMA_CTF_ADAPTER_V2",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "UMA_CTF_ADAPTER_V3",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "profileId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "pubId",
              type: "uint256",
            },
          ],
          name: "getConditionId",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "profileId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "pubId",
              type: "uint256",
            },
          ],
          name: "getMarketData",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "oracle",
                  type: "address",
                },
                {
                  internalType: "bytes32",
                  name: "questionId",
                  type: "bytes32",
                },
              ],
              internalType: "struct PolymarketAttestActionModule.MarketData",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getModuleMetadataURI",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "profileId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "pubId",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          name: "initializePublicationAction",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "isRegistered",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "publicationActedProfileId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "publicationActedId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "actorProfileId",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "actorProfileOwner",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "transactionExecutor",
                  type: "address",
                },
                {
                  internalType: "uint256[]",
                  name: "referrerProfileIds",
                  type: "uint256[]",
                },
                {
                  internalType: "uint256[]",
                  name: "referrerPubIds",
                  type: "uint256[]",
                },
                {
                  internalType: "enum Types.PublicationType[]",
                  name: "referrerPubTypes",
                  type: "uint8[]",
                },
                {
                  internalType: "bytes",
                  name: "actionModuleData",
                  type: "bytes",
                },
              ],
              internalType: "struct Types.ProcessActionParams",
              name: "params",
              type: "tuple",
            },
          ],
          name: "processPublicationAction",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "registerModule",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "renounceOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_metadataURI",
              type: "string",
            },
          ],
          name: "setModuleMetadataURI",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceID",
              type: "bytes4",
            },
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        initializePublicationAction: "lens-modules/contracts/interfaces/IPublicationActionModule.sol",
        processPublicationAction: "lens-modules/contracts/interfaces/IPublicationActionModule.sol",
        HUB: "lens-modules/contracts/base/HubRestricted.sol",
        getModuleMetadataURI: "lens-modules/contracts/modules/LensModuleMetadata.sol",
        owner: "contracts/base/LensModuleRegistrant.sol",
        renounceOwnership: "contracts/base/LensModuleRegistrant.sol",
        setModuleMetadataURI: "lens-modules/contracts/modules/LensModuleMetadata.sol",
        supportsInterface: "lens-modules/contracts/modules/LensModuleMetadata.sol",
        transferOwnership: "contracts/base/LensModuleRegistrant.sol",
        MODULE_REGISTRY: "contracts/base/LensModuleRegistrant.sol",
        isRegistered: "contracts/base/LensModuleRegistrant.sol",
        registerModule: "contracts/base/LensModuleRegistrant.sol",
      },
    },
    PolymarketTradingActionModule: {
      address: "0xf4C79295274BBdc1aBAaf37a57d5Be0E20bC320b",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "lensHub",
              type: "address",
            },
            {
              internalType: "address",
              name: "lensModuleRegistry",
              type: "address",
            },
            {
              internalType: "contract ICTFExchange",
              name: "exchange",
              type: "address",
            },
            {
              internalType: "contract IERC20",
              name: "collateralToken",
              type: "address",
            },
            {
              internalType: "contract IConditionalTokens",
              name: "conditionalTokens",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "ConditionIdDoesNotMatch",
          type: "error",
        },
        {
          inputs: [],
          name: "ConditionIdMustBeProvided",
          type: "error",
        },
        {
          inputs: [],
          name: "ConditionIdNotRegistered",
          type: "error",
        },
        {
          inputs: [],
          name: "MarketNotFound",
          type: "error",
        },
        {
          inputs: [],
          name: "NotHub",
          type: "error",
        },
        {
          inputs: [],
          name: "OrderNotSignedByActor",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          name: "OwnableInvalidOwner",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          name: "OwnableUnauthorizedAccount",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "publicationActedProfileId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "publicationActedId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "actorProfileId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "actorProfileOwner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "conditionId",
              type: "bytes32",
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "salt",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "maker",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "signer",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "taker",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "makerAmount",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "takerAmount",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "expiration",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "feeRateBps",
                  type: "uint256",
                },
                {
                  internalType: "enum Side",
                  name: "side",
                  type: "uint8",
                },
                {
                  internalType: "enum SignatureType",
                  name: "signatureType",
                  type: "uint8",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
              indexed: false,
              internalType: "struct Order",
              name: "order",
              type: "tuple",
            },
          ],
          name: "MarketOrderPlaced",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "publicationActedProfileId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "publicationActedId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "conditionId",
              type: "bytes32",
            },
          ],
          name: "MarketRegistered",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [],
          name: "ModuleRegistered",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "previousOwner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "OwnershipTransferred",
          type: "event",
        },
        {
          inputs: [],
          name: "HUB",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "MODULE_REGISTRY",
          outputs: [
            {
              internalType: "contract IModuleRegistry",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "profileId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "pubId",
              type: "uint256",
            },
          ],
          name: "getConditionId",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getModuleMetadataURI",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "profileId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "pubId",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          name: "initializePublicationAction",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "isRegistered",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "publicationActedProfileId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "publicationActedId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "actorProfileId",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "actorProfileOwner",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "transactionExecutor",
                  type: "address",
                },
                {
                  internalType: "uint256[]",
                  name: "referrerProfileIds",
                  type: "uint256[]",
                },
                {
                  internalType: "uint256[]",
                  name: "referrerPubIds",
                  type: "uint256[]",
                },
                {
                  internalType: "enum Types.PublicationType[]",
                  name: "referrerPubTypes",
                  type: "uint8[]",
                },
                {
                  internalType: "bytes",
                  name: "actionModuleData",
                  type: "bytes",
                },
              ],
              internalType: "struct Types.ProcessActionParams",
              name: "params",
              type: "tuple",
            },
          ],
          name: "processPublicationAction",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "registerModule",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "renounceOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_metadataURI",
              type: "string",
            },
          ],
          name: "setModuleMetadataURI",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceID",
              type: "bytes4",
            },
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        initializePublicationAction: "lens-modules/contracts/interfaces/IPublicationActionModule.sol",
        processPublicationAction: "lens-modules/contracts/interfaces/IPublicationActionModule.sol",
        HUB: "lens-modules/contracts/base/HubRestricted.sol",
        getModuleMetadataURI: "lens-modules/contracts/modules/LensModuleMetadata.sol",
        owner: "contracts/base/LensModuleRegistrant.sol",
        renounceOwnership: "contracts/base/LensModuleRegistrant.sol",
        setModuleMetadataURI: "lens-modules/contracts/modules/LensModuleMetadata.sol",
        supportsInterface: "lens-modules/contracts/modules/LensModuleMetadata.sol",
        transferOwnership: "contracts/base/LensModuleRegistrant.sol",
        MODULE_REGISTRY: "contracts/base/LensModuleRegistrant.sol",
        isRegistered: "contracts/base/LensModuleRegistrant.sol",
        registerModule: "contracts/base/LensModuleRegistrant.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
