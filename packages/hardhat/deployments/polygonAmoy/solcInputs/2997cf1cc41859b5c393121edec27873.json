{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/lens-modules/contracts/misc/ModuleRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport 'lens-modules/contracts/misc/ModuleRegistry.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/lens-modules/contracts/modules/act/collect/CollectNFT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport 'lens-modules/contracts/modules/act/collect/CollectNFT.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/lens-modules/contracts/modules/act/collect/CollectPublicationAction.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport 'lens-modules/contracts/modules/act/collect/CollectPublicationAction.sol';\n"
    },
    "contracts/helpers/TestToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestToken is ERC20 {\n    constructor() ERC20(\"TestToken\", \"TEST\") {}\n\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/PayWhatYouWantCollectModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {Types} from \"lens-modules/contracts/libraries/constants/Types.sol\";\nimport {IPublicationActionModule} from \"lens-modules/contracts/interfaces/IPublicationActionModule.sol\";\nimport {HubRestricted} from \"lens-modules/contracts/base/HubRestricted.sol\";\nimport {IModuleRegistry} from \"lens-modules/contracts/interfaces/IModuleRegistry.sol\";\nimport {LensModuleMetadata} from \"lens-modules/contracts/modules/LensModuleMetadata.sol\";\nimport {LensModuleRegistrant} from \"lens-modules/contracts/modules/base/LensModuleRegistrant.sol\";\nimport {ICollectModule} from \"lens-modules/contracts/modules/interfaces/ICollectModule.sol\";\nimport {BaseFeeCollectModule} from \"lens-modules/contracts/modules/act/collect/base/BaseFeeCollectModule.sol\";\nimport {IBaseFeeCollectModule, BaseFeeCollectModuleInitData, BaseProfilePublicationData} from \"lens-modules/contracts/modules/interfaces/IBaseFeeCollectModule.sol\";\nimport {ModuleTypes} from \"lens-modules/contracts/modules/libraries/constants/ModuleTypes.sol\";\nimport {LensModule} from \"lens-modules/contracts/modules/LensModule.sol\";\n\n/**\n * @notice A struct containing the recipient address and the fraction of the fee they should receive.\n *\n * @param recipient The address of the recipient.\n * @param split The fraction of the fee they should receive, as a fraction of BPS_MAX (10 000).\n */\nstruct RecipientData {\n    address recipient;\n    uint16 split;\n}\n\n/**\n * @notice A struct containing the necessary data to initialize this module.\n *\n * @param amountFloor The minimum amount that can be collected. 0 for no floor.\n * @param collectLimit The maximum number of collects for this publication. 0 for no limit.\n * @param currency The optional currency to restrict collects to. address(0) for no restriction.\n * @param referralFee The referral fee associated with this publication.\n * @param followerOnly True if only followers of publisher may collect the post.\n * @param endTimestamp The end timestamp after which collecting is impossible. 0 for no expiry.\n * @param recipients Array of RecipientData items to split collect fees across multiple recipients.\n */\nstruct PayWhatYouWantCollectModuleInitData {\n    uint160 amountFloor;\n    uint96 collectLimit;\n    address currency;\n    uint16 referralFee;\n    bool followerOnly;\n    uint72 endTimestamp;\n    RecipientData[5] recipients;\n}\n\n/**\n * @notice A struct containing the necessary data to initialize this module.\n *\n * @param amountFloor The minimum amount that can be collected. 0 for no floor.\n * @param collectLimit The maximum number of collects for this publication. 0 for no limit.\n * @param currency The optional currency to restrict collects to. address(0) for no restriction.\n * @param currentCollects The current number of collects for this publication.\n * @param referralFee The referral fee associated with this publication.\n * @param followerOnly True if only followers of publisher may collect the post.\n * @param endTimestamp The end timestamp after which collecting is impossible. 0 for no expiry.\n * @param recipients Array of RecipientData items to split collect fees across multiple recipients.\n */\nstruct PayWhatYouWantCollectProfilePublicationData {\n    uint160 amountFloor;\n    uint96 collectLimit;\n    address currency;\n    uint96 currentCollects;\n    uint16 referralFee;\n    bool followerOnly;\n    uint72 endTimestamp;\n    RecipientData[] recipients;\n}\n\nerror InvalidInitParams();\nerror InvalidOffer();\nerror InvalidRecipientSplits();\n\ncontract PayWhatYouWantCollectModule is\n    BaseFeeCollectModule,\n    LensModuleMetadata\n{\n    using SafeERC20 for IERC20;\n\n    mapping(uint256 => mapping(uint256 => RecipientData[]))\n        internal _recipientsByPublicationByProfile;\n\n    constructor(\n        address hub,\n        address actionModule,\n        address moduleRegistry\n    )\n        Ownable()\n        BaseFeeCollectModule(hub, actionModule, moduleRegistry)\n        LensModuleMetadata()\n    {}\n\n    /**\n     * @notice Returns the publication data for a given publication, or an empty struct if that publication was not\n     * initialized with this module.\n     *\n     * @param profileId The token ID of the profile mapped to the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return The PayWhatYouWantCollectProfilePublicationData struct mapped to that publication.\n     */\n    function getPublicationData(\n        uint256 profileId,\n        uint256 pubId\n    )\n        external\n        view\n        returns (PayWhatYouWantCollectProfilePublicationData memory)\n    {\n        BaseProfilePublicationData memory baseData = getBasePublicationData(\n            profileId,\n            pubId\n        );\n        RecipientData[] memory recipients = _recipientsByPublicationByProfile[\n            profileId\n        ][pubId];\n        return\n            PayWhatYouWantCollectProfilePublicationData({\n                amountFloor: baseData.amount,\n                collectLimit: baseData.collectLimit,\n                currency: baseData.currency,\n                currentCollects: baseData.currentCollects,\n                referralFee: baseData.referralFee,\n                followerOnly: baseData.followerOnly,\n                endTimestamp: baseData.endTimestamp,\n                recipients: recipients\n            });\n    }\n\n    function supportsInterface(\n        bytes4 interfaceID\n    ) public pure override(BaseFeeCollectModule, LensModule) returns (bool) {\n        return\n            BaseFeeCollectModule.supportsInterface(interfaceID) ||\n            LensModule.supportsInterface(interfaceID);\n    }\n\n    /**\n     * @dev Validates the Base parameters like:\n     * 1) Is the currency whitelisted\n     * 2) Is the referralFee in valid range\n     * 3) Is the end of collects timestamp in valid range\n     *\n     * This should be called during initializePublicationCollectModule()\n     *\n     * @param initData Module initialization data (see PayWhatYouWantCollectModuleInitData struct)\n     */\n    function _validateInitData(\n        PayWhatYouWantCollectModuleInitData memory initData\n    ) internal virtual {\n        if (\n            (initData.amountFloor != 0 && initData.currency == address(0)) ||\n            initData.referralFee > BPS_MAX ||\n            (initData.endTimestamp != 0 &&\n                initData.endTimestamp < block.timestamp)\n        ) {\n            revert InvalidInitParams();\n        }\n\n        if (initData.currency != address(0)) {\n            _verifyErc20Currency(initData.currency);\n        }\n    }\n\n    /// @inheritdoc ICollectModule\n    function initializePublicationCollectModule(\n        uint256 profileId,\n        uint256 pubId,\n        address /* transactionExecutor */,\n        bytes calldata data\n    ) external override onlyActionModule returns (bytes memory) {\n        PayWhatYouWantCollectModuleInitData memory initData = abi.decode(\n            data,\n            (PayWhatYouWantCollectModuleInitData)\n        );\n\n        BaseFeeCollectModuleInitData\n            memory baseInitData = BaseFeeCollectModuleInitData({\n                amount: initData.amountFloor,\n                collectLimit: initData.collectLimit,\n                currency: initData.currency,\n                referralFee: initData.referralFee,\n                followerOnly: initData.followerOnly,\n                endTimestamp: initData.endTimestamp,\n                recipient: address(0)\n            });\n\n        RecipientData[] memory recipients = new RecipientData[](\n            initData.recipients.length\n        );\n\n        for (uint256 i = 0; i < initData.recipients.length; i++) {\n            recipients[i] = initData.recipients[i];\n        }\n\n        _validateInitData(initData);\n        _validateAndStoreRecipients(recipients, profileId, pubId);\n        _storeBasePublicationCollectParameters(profileId, pubId, baseInitData);\n\n        return data;\n    }\n\n    /**\n     * @dev Validates the recipients array and stores them to (a separate from Base) storage.\n     *\n     * @param recipients An array of recipients\n     * @param profileId The profile ID who is publishing the publication.\n     * @param pubId The associated publication's LensHub publication ID.\n     */\n    function _validateAndStoreRecipients(\n        RecipientData[] memory recipients,\n        uint256 profileId,\n        uint256 pubId\n    ) internal {\n        uint256 len = recipients.length;\n        if (len == 0) {\n            revert InvalidInitParams();\n        }\n\n        // Check recipient splits sum to 10 000 BPS (100%)\n        uint256 totalSplits;\n        uint256 i;\n        while (i < len) {\n            if (\n                recipients[i].recipient != address(0) &&\n                recipients[i].split == 0\n            ) {\n                revert InvalidRecipientSplits();\n            }\n\n            totalSplits += recipients[i].split;\n\n            // Store each recipient while looping - avoids extra gas costs in successful cases\n            _recipientsByPublicationByProfile[profileId][pubId].push(\n                recipients[i]\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (totalSplits != BPS_MAX) {\n            revert InvalidRecipientSplits();\n        }\n    }\n\n    /**\n     * @dev Transfers the fee to multiple recipients.\n     *\n     * @inheritdoc BaseFeeCollectModule\n     */\n    function _transferToRecipients(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams,\n        address currency,\n        uint256 amount\n    ) internal override {\n        RecipientData[] memory recipients = _recipientsByPublicationByProfile[\n            processCollectParams.publicationCollectedProfileId\n        ][processCollectParams.publicationCollectedId];\n        uint256 len = recipients.length;\n\n        uint256 i;\n        while (i < len) {\n            uint256 amountForRecipient = (amount * recipients[i].split) /\n                BPS_MAX;\n            if (amountForRecipient != 0)\n                IERC20(currency).safeTransferFrom(\n                    processCollectParams.transactionExecutor,\n                    recipients[i].recipient,\n                    amountForRecipient\n                );\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Internal processing of a collect:\n     *  1. Calculation of fees\n     *  2. Validation that fees are what collector expected\n     *  3. Transfer of fees to recipient(-s) and treasury\n     *\n     * @param processCollectParams Parameters of the collect\n     */\n    function _processCollect(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) internal virtual override {\n        uint256 amountFloor = _dataByPublicationByProfile[\n            processCollectParams.publicationCollectedProfileId\n        ][processCollectParams.publicationCollectedId].amount;\n        address acceptedCurrency = _dataByPublicationByProfile[\n            processCollectParams.publicationCollectedProfileId\n        ][processCollectParams.publicationCollectedId].currency;\n\n        (address currency, uint256 amount) = abi.decode(\n            processCollectParams.data,\n            (address, uint256)\n        );\n\n        if (\n            (acceptedCurrency != address(0) && acceptedCurrency != currency) ||\n            amount < amountFloor\n        ) {\n            revert InvalidOffer();\n        }\n\n        _verifyErc20Currency(currency);\n\n        (address treasury, uint16 treasuryFee) = _treasuryData();\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\n\n        if (treasuryAmount > 0) {\n            IERC20(currency).safeTransferFrom(\n                processCollectParams.transactionExecutor,\n                treasury,\n                treasuryAmount\n            );\n        }\n\n        // Send amount after treasury cut, to all recipients\n        _transferToRecipients(\n            processCollectParams,\n            currency,\n            amount - treasuryAmount\n        );\n    }\n\n    /**\n     * @dev Internal processing of a collect with a referrals (if any).\n     *\n     * Same as _processCollect, but also includes transfer to referrals (if any):\n     *  1. Calculation of fees\n     *  2. Validation that fees are what collector expected\n     *  3. Transfer of fees to treasury, referrals (if any) and recipients\n     *\n     * @param processCollectParams Parameters of the collect\n     */\n    function _processCollectWithReferral(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) internal virtual override {\n        (address currency, uint256 amount) = abi.decode(\n            processCollectParams.data,\n            (address, uint256)\n        );\n\n        (address treasury, uint16 treasuryFee) = _treasuryData();\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\n\n        if (treasuryAmount > 0) {\n            IERC20(currency).safeTransferFrom(\n                processCollectParams.transactionExecutor,\n                treasury,\n                treasuryAmount\n            );\n        }\n\n        uint256 amountAfterReferrals = _transferToReferrals(\n            processCollectParams,\n            currency,\n            amount - treasuryAmount\n        );\n\n        _transferToRecipients(\n            processCollectParams,\n            currency,\n            amountAfterReferrals\n        );\n    }\n}\n"
    },
    "lens-modules/contracts/base/ERC2981CollectionRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Errors} from '../libraries/constants/Errors.sol';\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport {IERC2981} from '@openzeppelin/contracts/interfaces/IERC2981.sol';\n\nabstract contract ERC2981CollectionRoyalties is IERC2981 {\n    uint16 internal constant BASIS_POINTS = 10000;\n    // bytes4(keccak256('royaltyInfo(uint256,uint256)')) == 0x2a55205a\n    bytes4 internal constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == INTERFACE_ID_ERC2981 || interfaceId == type(IERC165).interfaceId;\n    }\n\n    /**\n     * @notice Changes the royalty percentage for secondary sales.\n     *\n     * @param royaltiesInBasisPoints The royalty percentage (measured in basis points).\n     */\n    function setRoyalty(uint256 royaltiesInBasisPoints) external {\n        _beforeRoyaltiesSet(royaltiesInBasisPoints);\n        _setRoyalty(royaltiesInBasisPoints);\n    }\n\n    /**\n     * @notice Called with the sale price to determine how much royalty is owed and to whom.\n     *\n     * @param tokenId The ID of the token queried for royalty information.\n     * @param salePrice The sale price of the token specified.\n     * @return A tuple with the address that should receive the royalties and the royalty\n     * payment amount for the given sale price.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address, uint256) {\n        return (_getReceiver(tokenId), _getRoyaltyAmount(tokenId, salePrice));\n    }\n\n    function _setRoyalty(uint256 royaltiesInBasisPoints) internal virtual {\n        if (royaltiesInBasisPoints > BASIS_POINTS) {\n            revert Errors.InvalidParameter();\n        }\n        _storeRoyaltiesInBasisPoints(royaltiesInBasisPoints);\n    }\n\n    function _getRoyaltyAmount(uint256 /* tokenId */, uint256 salePrice) internal view virtual returns (uint256) {\n        return (salePrice * _loadRoyaltiesInBasisPoints()) / BASIS_POINTS;\n    }\n\n    function _storeRoyaltiesInBasisPoints(uint256 royaltiesInBasisPoints) internal virtual {\n        uint256 royaltiesInBasisPointsSlot = _getRoyaltiesInBasisPointsSlot();\n        assembly {\n            sstore(royaltiesInBasisPointsSlot, royaltiesInBasisPoints)\n        }\n    }\n\n    function _loadRoyaltiesInBasisPoints() internal view virtual returns (uint256) {\n        uint256 royaltiesInBasisPointsSlot = _getRoyaltiesInBasisPointsSlot();\n        uint256 royaltyAmount;\n        assembly {\n            royaltyAmount := sload(royaltiesInBasisPointsSlot)\n        }\n        return royaltyAmount;\n    }\n\n    function _beforeRoyaltiesSet(uint256 royaltiesInBasisPoints) internal view virtual;\n\n    function _getRoyaltiesInBasisPointsSlot() internal view virtual returns (uint256);\n\n    function _getReceiver(uint256 tokenId) internal view virtual returns (address);\n}\n"
    },
    "lens-modules/contracts/base/HubRestricted.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport {Errors} from '../libraries/constants/Errors.sol';\n\n/**\n * @title HubRestricted\n * @author Lens Protocol\n *\n * @notice This abstract contract adds a public `HUB` immutable field, as well as an `onlyHub` modifier,\n * to inherit from contracts that have functions restricted to be only called by the Lens hub.\n */\nabstract contract HubRestricted {\n    address public immutable HUB;\n\n    modifier onlyHub() {\n        if (msg.sender != HUB) {\n            revert Errors.NotHub();\n        }\n        _;\n    }\n\n    constructor(address hub) {\n        HUB = hub;\n    }\n}\n"
    },
    "lens-modules/contracts/base/LensBaseERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Errors} from '../libraries/constants/Errors.sol';\nimport {Types} from '../libraries/constants/Types.sol';\nimport {MetaTxLib} from '../libraries/MetaTxLib.sol';\nimport {ILensERC721} from '../interfaces/ILensERC721.sol';\nimport {IERC721Timestamped} from '../interfaces/IERC721Timestamped.sol';\nimport {IERC721Burnable} from '../interfaces/IERC721Burnable.sol';\nimport {IERC721MetaTx} from '../interfaces/IERC721MetaTx.sol';\nimport {IERC721Receiver} from '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport {IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\nimport {ERC165} from '@openzeppelin/contracts/utils/introspection/ERC165.sol';\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n *\n * Modifications:\n * 1. Refactored _operatorApprovals setter into an internal function to allow meta-transactions.\n * 2. Constructor replaced with an initializer.\n * 3. Mint timestamp is now stored in a TokenData struct alongside the owner address.\n */\nabstract contract LensBaseERC721 is ERC165, ILensERC721 {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to token Data (owner address and mint timestamp uint96), this\n    // replaces the original mapping(uint256 => address) private _owners;\n    mapping(uint256 => Types.TokenData) private _tokenData;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Deprecated in V2 after removing ERC712Enumerable logic.\n    mapping(address => mapping(uint256 => uint256)) private __DEPRECATED__ownedTokens;\n    mapping(uint256 => uint256) private __DEPRECATED__ownedTokensIndex;\n\n    // Dirty hack on a deprecated slot:\n    uint256 private _totalSupply; // uint256[] private __DEPRECATED__allTokens;\n\n    // Deprecated in V2 after removing ERC712Enumerable logic.\n    mapping(uint256 => uint256) private __DEPRECATED__allTokensIndex;\n\n    mapping(address => uint256) private _nonces;\n\n    /**\n     * @dev Initializes the ERC721 name and symbol.\n     *\n     * @param name_ The name to set.\n     * @param symbol_ The symbol to set.\n     */\n    function _initialize(string calldata name_, string calldata symbol_) internal {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory);\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Timestamped).interfaceId ||\n            interfaceId == type(IERC721Burnable).interfaceId ||\n            interfaceId == type(IERC721MetaTx).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function nonces(address signer) public view override returns (uint256) {\n        return _nonces[signer];\n    }\n\n    /// @inheritdoc IERC721MetaTx\n    function getDomainSeparator() external view virtual override returns (bytes32) {\n        return MetaTxLib.calculateDomainSeparator();\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) {\n            revert Errors.InvalidParameter();\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _tokenData[tokenId].owner;\n        if (owner == address(0)) {\n            revert Errors.TokenDoesNotExist();\n        }\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Timestamped-mintTimestampOf}\n     */\n    function mintTimestampOf(uint256 tokenId) public view virtual override returns (uint256) {\n        uint96 mintTimestamp = _tokenData[tokenId].mintTimestamp;\n        if (mintTimestamp == 0) {\n            revert Errors.TokenDoesNotExist();\n        }\n        return mintTimestamp;\n    }\n\n    /**\n     * @dev See {IERC721Timestamped-tokenDataOf}\n     */\n    function tokenDataOf(uint256 tokenId) public view virtual override returns (Types.TokenData memory) {\n        if (!_exists(tokenId)) {\n            revert Errors.TokenDoesNotExist();\n        }\n        return _tokenData[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721Timestamped-exists}\n     */\n    function exists(uint256 tokenId) public view virtual override returns (bool) {\n        return _exists(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n        if (to == owner) {\n            revert Errors.InvalidParameter();\n        }\n\n        if (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) {\n            revert Errors.NotOwnerOrApproved();\n        }\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) {\n            revert Errors.TokenDoesNotExist();\n        }\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == msg.sender) {\n            revert Errors.InvalidParameter();\n        }\n\n        _setOperatorApproval(msg.sender, operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) {\n            revert Errors.NotOwnerOrApproved();\n        }\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) {\n            revert Errors.NotOwnerOrApproved();\n        }\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Burns `tokenId`.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual override {\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) {\n            revert Errors.NotOwnerOrApproved();\n        }\n        _burn(tokenId);\n    }\n\n    /**\n     * @notice Returns the owner of the `tokenId` token.\n     *\n     * @dev It is prefixed as `unsafe` as it does not revert when the token does not exist.\n     *\n     * @param tokenId The token whose owner is being queried.\n     *\n     * @return address The address owning the given token, zero address if the token does not exist.\n     */\n    function _unsafeOwnerOf(uint256 tokenId) internal view returns (address) {\n        return _tokenData[tokenId].owner;\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform a token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) {\n            revert Errors.NonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenData[tokenId].owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ownerOf(tokenId);\n        // We don't check owner for != address(0) cause it's done inside ownerOf()\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        if (to == address(0) || _exists(tokenId)) {\n            revert Errors.InvalidParameter();\n        }\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        unchecked {\n            ++_balances[to];\n            ++_totalSupply;\n        }\n        _tokenData[tokenId].owner = to;\n        _tokenData[tokenId].mintTimestamp = uint96(block.timestamp);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        unchecked {\n            --_balances[owner];\n            --_totalSupply;\n        }\n        delete _tokenData[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        if (ownerOf(tokenId) != from) {\n            revert Errors.InvalidOwner();\n        }\n        if (to == address(0)) {\n            revert Errors.InvalidParameter();\n        }\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        unchecked {\n            --_balances[from];\n            ++_balances[to];\n        }\n        _tokenData[tokenId].owner = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Refactored from the original OZ ERC721 implementation: approve or revoke approval from\n     * `operator` to operate on all tokens owned by `owner`.\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setOperatorApproval(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert Errors.NonERC721ReceiverImplementer();\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "lens-modules/contracts/interfaces/ICollectNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title ICollectNFT\n * @author Lens Protocol\n *\n * @notice This is the interface for the CollectNFT contract. Which is cloned upon the first collect for any given\n * publication.\n */\ninterface ICollectNFT {\n    /**\n     * @notice Initializes the collect NFT, setting the feed as the privileged minter, storing the collected publication pointer\n     * and initializing the name and symbol in the LensNFTBase contract.\n     * @custom:permissions CollectPublicationAction.\n     *\n     * @param profileId The token ID of the profile in the hub that this Collect NFT points to.\n     * @param pubId The profile publication ID in the hub that this Collect NFT points to.\n     */\n    function initialize(uint256 profileId, uint256 pubId) external;\n\n    /**\n     * @notice Mints a collect NFT to the specified address. This can only be called by the hub and is called\n     * upon collection.\n     * @custom:permissions CollectPublicationAction.\n     *\n     * @param to The address to mint the NFT to.\n     *\n     * @return uint256 An integer representing the minted token ID.\n     */\n    function mint(address to) external returns (uint256);\n\n    /**\n     * @notice Returns the source publication of this collect NFT.\n     *\n     * @return tuple First is the profile ID, and second is the publication ID.\n     */\n    function getSourcePublicationPointer() external view returns (uint256, uint256);\n}\n"
    },
    "lens-modules/contracts/interfaces/IERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title IERC721Burnable\n * @author Lens Protocol\n *\n * @notice Extension of ERC-721 including a function that allows the token to be burned.\n */\ninterface IERC721Burnable {\n    /**\n     * @notice Burns an NFT, removing it from circulation and essentially destroying it.\n     * @custom:permission Owner of the NFT.\n     *\n     * @param tokenId The token ID of the token to burn.\n     */\n    function burn(uint256 tokenId) external;\n}\n"
    },
    "lens-modules/contracts/interfaces/IERC721MetaTx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title IERC721MetaTx\n * @author Lens Protocol\n *\n * @notice Extension of ERC-721 including meta-tx signatures related functions.\n */\ninterface IERC721MetaTx {\n    /**\n     * @notice Returns the current signature nonce of the given signer.\n     *\n     * @param signer The address for which to query the nonce.\n     *\n     * @return uint256 The current nonce of the given signer.\n     */\n    function nonces(address signer) external view returns (uint256);\n\n    /**\n     * @notice Returns the EIP-712 domain separator for this contract.\n     *\n     * @return bytes32 The domain separator.\n     */\n    function getDomainSeparator() external view returns (bytes32);\n}\n"
    },
    "lens-modules/contracts/interfaces/IERC721Timestamped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from '../libraries/constants/Types.sol';\n\n/**\n * @title IERC721Timestamped\n * @author Lens Protocol\n *\n * @notice Extension of ERC-721 including a struct for token data, which contains the owner and the mint timestamp, as\n * well as their associated getters.\n */\ninterface IERC721Timestamped {\n    /**\n     * @notice Returns the mint timestamp associated with a given NFT.\n     *\n     * @param tokenId The token ID of the NFT to query the mint timestamp for.\n     *\n     * @return uint256 Mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary\n     * padding.\n     */\n    function mintTimestampOf(uint256 tokenId) external view returns (uint256);\n\n    /**\n     * @notice Returns the token data associated with a given NFT. This allows fetching the token owner and\n     * mint timestamp in a single call.\n     *\n     * @param tokenId The token ID of the NFT to query the token data for.\n     *\n     * @return TokenData A struct containing both the owner address and the mint timestamp.\n     */\n    function tokenDataOf(uint256 tokenId) external view returns (Types.TokenData memory);\n\n    /**\n     * @notice Returns whether a token with the given token ID exists.\n     *\n     * @param tokenId The token ID of the NFT to check existence for.\n     *\n     * @return bool True if the token exists.\n     */\n    function exists(uint256 tokenId) external view returns (bool);\n\n    /**\n     * @notice Returns the amount of tokens in circulation.\n     *\n     * @return uint256 The current total supply of tokens.\n     */\n    function totalSupply() external view returns (uint256);\n}\n"
    },
    "lens-modules/contracts/interfaces/IFollowModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title IFollowModule\n * @author Lens Protocol\n *\n * @notice This is the standard interface for all Lens-compatible Follow Modules.\n * These are responsible for processing the follow actions and can be used to implement any kind of follow logic.\n * For example:\n *  - Token-gated follows (e.g. a user must hold a certain amount of a token to follow a profile).\n *  - Paid follows (e.g. a user must pay a certain amount of a token to follow a profile).\n *  - Rewarding users for following a profile.\n *  - Etc.\n */\ninterface IFollowModule {\n    /**\n     * @notice Initializes a follow module for a given Lens profile.\n     * @custom:permissions LensHub.\n     *\n     * @param profileId The Profile ID to initialize this follow module for.\n     * @param transactionExecutor The address of the transaction executor (e.g. for any funds to transferFrom).\n     * @param data Arbitrary data passed from the user to be decoded by the Follow Module during initialization.\n     *\n     * @return bytes The encoded data to be emitted from the hub.\n     */\n    function initializeFollowModule(\n        uint256 profileId,\n        address transactionExecutor,\n        bytes calldata data\n    ) external returns (bytes memory);\n\n    /**\n     * @notice Processes a given follow.\n     * @custom:permissions LensHub.\n     *\n     * @param followerProfileId The Profile ID of the follower's profile.\n     * @param followTokenId The Follow Token ID that is being used to follow. Zero if we are processing a new fresh\n     * follow, in this case, the follow ID assigned can be queried from the Follow NFT collection if needed.\n     * @param transactionExecutor The address of the transaction executor (e.g. for any funds to transferFrom).\n     * @param targetProfileId The token ID of the profile being followed.\n     * @param data Arbitrary data passed by the follower.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function processFollow(\n        uint256 followerProfileId,\n        uint256 followTokenId,\n        address transactionExecutor,\n        uint256 targetProfileId,\n        bytes calldata data\n    ) external returns (bytes memory);\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport {IERC721Timestamped} from '../interfaces/IERC721Timestamped.sol';\nimport {IERC721Burnable} from '../interfaces/IERC721Burnable.sol';\nimport {IERC721MetaTx} from '../interfaces/IERC721MetaTx.sol';\nimport {IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\n\ninterface ILensERC721 is IERC721, IERC721Timestamped, IERC721Burnable, IERC721MetaTx, IERC721Metadata {}\n"
    },
    "lens-modules/contracts/interfaces/ILensGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from '../libraries/constants/Types.sol';\n\n/**\n * @title ILensGovernable\n * @author Lens Protocol\n *\n * @notice This is the interface for the Lens Protocol main governance functions.\n */\ninterface ILensGovernable {\n    /**\n     * @notice Sets the privileged governance role.\n     * @custom:permissions Governance.\n     *\n     * @param newGovernance The new governance address to set.\n     */\n    function setGovernance(address newGovernance) external;\n\n    /**\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state.\n     * @custom:permissions Governance.\n     *\n     * @param newEmergencyAdmin The new emergency admin address to set.\n     */\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\n\n    /**\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state.\n     * @custom:permissions Governance or Emergency Admin. Emergency Admin can only restrict more.\n     *\n     * @param newState The state to set. It can be one of the following:\n     *  - Unpaused: The protocol is fully operational.\n     *  - PublishingPaused: The protocol is paused for publishing, but it is still operational for others operations.\n     *  - Paused: The protocol is paused for all operations.\n     */\n    function setState(Types.ProtocolState newState) external;\n\n    /**\n     * @notice Adds or removes a profile creator from the whitelist.\n     * @custom:permissions Governance.\n     *\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\n     * @param whitelist Whether or not the profile creator should be whitelisted.\n     */\n    function whitelistProfileCreator(address profileCreator, bool whitelist) external;\n\n    /**\n     * @notice Sets the profile token URI contract.\n     * @custom:permissions Governance.\n     *\n     * @param profileTokenURIContract The profile token URI contract to set.\n     */\n    function setProfileTokenURIContract(address profileTokenURIContract) external;\n\n    /**\n     * @notice Sets the follow token URI contract.\n     * @custom:permissions Governance.\n     *\n     * @param followTokenURIContract The follow token URI contract to set.\n     */\n    function setFollowTokenURIContract(address followTokenURIContract) external;\n\n    /**\n     * @notice Sets the treasury address.\n     * @custom:permissions Governance\n     *\n     * @param newTreasury The new treasury address to set.\n     */\n    function setTreasury(address newTreasury) external;\n\n    /**\n     * @notice Sets the treasury fee.\n     * @custom:permissions Governance\n     *\n     * @param newTreasuryFee The new treasury fee to set.\n     */\n    function setTreasuryFee(uint16 newTreasuryFee) external;\n\n    /**\n     * @notice Returns the currently configured governance address.\n     *\n     * @return address The address of the currently configured governance.\n     */\n    function getGovernance() external view returns (address);\n\n    /**\n     * @notice Gets the state currently set in the protocol. It could be a global pause, a publishing pause or an\n     * unpaused state.\n     * @custom:permissions Anyone.\n     *\n     * @return Types.ProtocolState The state currently set in the protocol.\n     */\n    function getState() external view returns (Types.ProtocolState);\n\n    /**\n     * @notice Returns whether or not a profile creator is whitelisted.\n     *\n     * @param profileCreator The address of the profile creator to check.\n     *\n     * @return bool True if the profile creator is whitelisted, false otherwise.\n     */\n    function isProfileCreatorWhitelisted(address profileCreator) external view returns (bool);\n\n    /**\n     * @notice Returns the treasury address.\n     *\n     * @return address The treasury address.\n     */\n    function getTreasury() external view returns (address);\n\n    /**\n     * @notice Returns the treasury fee.\n     *\n     * @return uint16 The treasury fee.\n     */\n    function getTreasuryFee() external view returns (uint16);\n\n    /**\n     * @notice Returns the treasury address and treasury fee in a single call.\n     *\n     * @return tuple First, the treasury address, second, the treasury fee.\n     */\n    function getTreasuryData() external view returns (address, uint16);\n\n    /**\n     * @notice Gets the profile token URI contract.\n     *\n     * @return address The profile token URI contract.\n     */\n    function getProfileTokenURIContract() external view returns (address);\n\n    /**\n     * @notice Gets the follow token URI contract.\n     *\n     * @return address The follow token URI contract.\n     */\n    function getFollowTokenURIContract() external view returns (address);\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensHub.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {ILensProtocol} from '../interfaces/ILensProtocol.sol';\nimport {ILensGovernable} from '../interfaces/ILensGovernable.sol';\nimport {ILensHubEventHooks} from '../interfaces/ILensHubEventHooks.sol';\nimport {ILensImplGetters} from '../interfaces/ILensImplGetters.sol';\nimport {ILensProfiles} from '../interfaces/ILensProfiles.sol';\nimport {ILensVersion} from '../interfaces/ILensVersion.sol';\n\ninterface ILensHub is\n    ILensProfiles,\n    ILensProtocol,\n    ILensGovernable,\n    ILensHubEventHooks,\n    ILensImplGetters,\n    ILensVersion\n{}\n"
    },
    "lens-modules/contracts/interfaces/ILensHubEventHooks.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title ILensHubEventHooks\n * @author Lens Protocol\n *\n * @notice This is the interface for the LensHub contract's event hooks. As we want most of the core events to be\n * emitted by the LensHub contract, event hooks are needed for core events generated by pheripheral contracts.\n */\ninterface ILensHubEventHooks {\n    /**\n     * @dev Helper function to emit an `Unfollowed` event from the hub, to be consumed by indexers to track unfollows.\n     * @custom:permissions FollowNFT of the Profile unfollowed.\n     *\n     * @param unfollowerProfileId The ID of the profile that executed the unfollow.\n     * @param idOfProfileUnfollowed The ID of the profile that was unfollowed.\n     * @param transactionExecutor The address of the account executing the unfollow operation.\n     */\n    function emitUnfollowedEvent(\n        uint256 unfollowerProfileId,\n        uint256 idOfProfileUnfollowed,\n        address transactionExecutor\n    ) external;\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensImplGetters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title ILensImplGetters\n * @author Lens Protocol\n *\n * @notice This is the interface for the LensHub contract's implementation getters. These implementations will be used\n * for deploying each respective contract for each profile.\n */\ninterface ILensImplGetters {\n    /**\n     * @notice Returns the Follow NFT implementation address that is used for all deployed Follow NFTs.\n     *\n     * @return address The Follow NFT implementation address.\n     */\n    function getFollowNFTImpl() external view returns (address);\n\n    /**\n     * @notice Returns the Collect NFT implementation address that is used for each new deployed Collect NFT.\n     * @custom:pending-deprecation\n     *\n     * @return address The Collect NFT implementation address.\n     */\n    function getLegacyCollectNFTImpl() external view returns (address);\n\n    /**\n     * @notice Returns the address of the registry that stores all modules that are used by the Lens Protocol.\n     *\n     * @return address The address of the Module Registry contract.\n     */\n    function getModuleRegistry() external view returns (address);\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensProfiles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {ILensERC721} from '../interfaces/ILensERC721.sol';\n\ninterface ILensProfiles is ILensERC721 {\n    /**\n     * @notice DANGER: Triggers disabling the profile protection mechanism for the msg.sender, which will allow\n     * transfers or approvals over profiles held by it.\n     * Disabling the mechanism will have a timelock before it becomes effective, allowing the owner to re-enable\n     * the protection back in case of being under attack.\n     * The protection layer only applies to EOA wallets.\n     */\n    function DANGER__disableTokenGuardian() external;\n\n    /**\n     * @notice Enables back the profile protection mechanism for the msg.sender, preventing profile transfers or\n     * approvals (except when revoking them).\n     * The protection layer only applies to EOA wallets.\n     */\n    function enableTokenGuardian() external;\n\n    /**\n     * @notice Returns the timestamp at which the Token Guardian will become effectively disabled.\n     *\n     * @param wallet The address to check the timestamp for.\n     *\n     * @return uint256 The timestamp at which the Token Guardian will become effectively disabled. Zero if enabled.\n     */\n    function getTokenGuardianDisablingTimestamp(address wallet) external view returns (uint256);\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensProtocol.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from '../libraries/constants/Types.sol';\n\n/**\n * @title ILensProtocol\n * @author Lens Protocol\n *\n * @notice This is the interface for Lens Protocol's core functions. It contains all the entry points for performing\n * social operations.\n */\ninterface ILensProtocol {\n    /**\n     * @notice Creates a profile with the specified parameters, minting a Profile NFT to the given recipient.\n     * @custom:permissions Any whitelisted profile creator.\n     *\n     * @param createProfileParams A CreateProfileParams struct containing the needed params.\n     */\n    function createProfile(Types.CreateProfileParams calldata createProfileParams) external returns (uint256);\n\n    /**\n     * @notice Sets the metadata URI for the given profile.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param profileId The token ID of the profile to set the metadata URI for.\n     * @param metadataURI The metadata URI to set for the given profile.\n     */\n    function setProfileMetadataURI(uint256 profileId, string calldata metadataURI) external;\n\n    /**\n     * @custom:meta-tx setProfileMetadataURI.\n     */\n    function setProfileMetadataURIWithSig(\n        uint256 profileId,\n        string calldata metadataURI,\n        Types.EIP712Signature calldata signature\n    ) external;\n\n    /**\n     * @notice Sets the follow module for the given profile.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param profileId The token ID of the profile to set the follow module for.\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\n     */\n    function setFollowModule(uint256 profileId, address followModule, bytes calldata followModuleInitData) external;\n\n    /**\n     * @custom:meta-tx setFollowModule.\n     */\n    function setFollowModuleWithSig(\n        uint256 profileId,\n        address followModule,\n        bytes calldata followModuleInitData,\n        Types.EIP712Signature calldata signature\n    ) external;\n\n    /**\n     * @notice Changes the delegated executors configuration for the given profile. It allows setting the approvals for\n     * delegated executors in the specified configuration, as well as switching to it.\n     * @custom:permissions Profile Owner.\n     *\n     * @param delegatorProfileId The ID of the profile to which the delegated executor is being changed for.\n     * @param delegatedExecutors The array of delegated executors to set the approval for.\n     * @param approvals The array of booleans indicating the corresponding executor's new approval status.\n     * @param configNumber The number of the configuration where the executor approval state is being set.\n     * @param switchToGivenConfig A boolean indicating if the configuration must be switched to the one with the given\n     * number.\n     */\n    function changeDelegatedExecutorsConfig(\n        uint256 delegatorProfileId,\n        address[] calldata delegatedExecutors,\n        bool[] calldata approvals,\n        uint64 configNumber,\n        bool switchToGivenConfig\n    ) external;\n\n    /**\n     * @notice Changes the delegated executors configuration for the given profile under the current configuration.\n     * @custom:permissions Profile Owner.\n     *\n     * @param delegatorProfileId The ID of the profile to which the delegated executor is being changed for.\n     * @param delegatedExecutors The array of delegated executors to set the approval for.\n     * @param approvals The array of booleans indicating the corresponding executor's new approval status.\n     */\n    function changeDelegatedExecutorsConfig(\n        uint256 delegatorProfileId,\n        address[] calldata delegatedExecutors,\n        bool[] calldata approvals\n    ) external;\n\n    /**\n     * @custom:meta-tx changeDelegatedExecutorsConfig.\n     */\n    function changeDelegatedExecutorsConfigWithSig(\n        uint256 delegatorProfileId,\n        address[] calldata delegatedExecutors,\n        bool[] calldata approvals,\n        uint64 configNumber,\n        bool switchToGivenConfig,\n        Types.EIP712Signature calldata signature\n    ) external;\n\n    /**\n     * @notice Publishes a post.\n     * Post is the most basic publication type, and can be used to publish any kind of content.\n     * Posts can have these types of modules initialized:\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\n     *  - Reference module: a module handling the rules when referencing this post (e.g. token-gated comments)\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param postParams A PostParams struct containing the needed parameters.\n     *\n     * @return uint256 An integer representing the post's publication ID.\n     */\n    function post(Types.PostParams calldata postParams) external returns (uint256);\n\n    /**\n     * @custom:meta-tx post.\n     */\n    function postWithSig(\n        Types.PostParams calldata postParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256);\n\n    /**\n     * @notice Publishes a comment on the given publication.\n     * Comment is a type of reference publication that points to another publication.\n     * Comments can have these types of modules initialized:\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\n     *  - Reference module: a module handling the rules when referencing this comment (e.g. token-gated mirrors)\n     * Comments can have referrers (e.g. publications or profiles that helped to discover the pointed publication).\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param commentParams A CommentParams struct containing the needed parameters.\n     *\n     * @return uint256 An integer representing the comment's publication ID.\n     */\n    function comment(Types.CommentParams calldata commentParams) external returns (uint256);\n\n    /**\n     * @custom:meta-tx comment.\n     */\n    function commentWithSig(\n        Types.CommentParams calldata commentParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256);\n\n    /**\n     * @notice Publishes a mirror of the given publication.\n     * Mirror is a type of reference publication that points to another publication but doesn't have content.\n     * Mirrors don't have any modules initialized.\n     * Mirrors can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\n     * You cannot mirror a mirror, comment on a mirror, or quote a mirror.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param mirrorParams A MirrorParams struct containing the necessary parameters.\n     *\n     * @return uint256 An integer representing the mirror's publication ID.\n     */\n    function mirror(Types.MirrorParams calldata mirrorParams) external returns (uint256);\n\n    /**\n     * @custom:meta-tx mirror.\n     */\n    function mirrorWithSig(\n        Types.MirrorParams calldata mirrorParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256);\n\n    /**\n     * @notice Publishes a quote of the given publication.\n     * Quote is a type of reference publication similar to mirror, but it has content and modules.\n     * Quotes can have these types of modules initialized:\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\n     *  - Reference module: a module handling the rules when referencing this quote (e.g. token-gated comments on quote)\n     * Quotes can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\n     * Unlike mirrors, you can mirror a quote, comment on a quote, or quote a quote.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param quoteParams A QuoteParams struct containing the needed parameters.\n     *\n     * @return uint256 An integer representing the quote's publication ID.\n     */\n    function quote(Types.QuoteParams calldata quoteParams) external returns (uint256);\n\n    /**\n     * @custom:meta-tx quote.\n     */\n    function quoteWithSig(\n        Types.QuoteParams calldata quoteParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256);\n\n    /**\n     * @notice Follows given profiles, executing each profile's follow module logic (if any).\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @dev Both the `idsOfProfilesToFollow`, `followTokenIds`, and `datas` arrays must be of the same length,\n     * regardless if the profiles do not have a follow module set.\n     *\n     * @param followerProfileId The ID of the profile the follows are being executed for.\n     * @param idsOfProfilesToFollow The array of IDs of profiles to follow.\n     * @param followTokenIds The array of follow token IDs to use for each follow (0 if you don't own a follow token).\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\n     *\n     * @return uint256[] An array of follow token IDs representing the follow tokens created for each follow.\n     */\n    function follow(\n        uint256 followerProfileId,\n        uint256[] calldata idsOfProfilesToFollow,\n        uint256[] calldata followTokenIds,\n        bytes[] calldata datas\n    ) external returns (uint256[] memory);\n\n    /**\n     * @custom:meta-tx follow.\n     */\n    function followWithSig(\n        uint256 followerProfileId,\n        uint256[] calldata idsOfProfilesToFollow,\n        uint256[] calldata followTokenIds,\n        bytes[] calldata datas,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256[] memory);\n\n    /**\n     * @notice Unfollows given profiles.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @param unfollowerProfileId The ID of the profile the unfollows are being executed for.\n     * @param idsOfProfilesToUnfollow The array of IDs of profiles to unfollow.\n     */\n    function unfollow(uint256 unfollowerProfileId, uint256[] calldata idsOfProfilesToUnfollow) external;\n\n    /**\n     * @custom:meta-tx unfollow.\n     */\n    function unfollowWithSig(\n        uint256 unfollowerProfileId,\n        uint256[] calldata idsOfProfilesToUnfollow,\n        Types.EIP712Signature calldata signature\n    ) external;\n\n    /**\n     * @notice Sets the block status for the given profiles. Changing a profile's block status to `true` (i.e. blocked),\n     * when will also force them to unfollow.\n     * Blocked profiles cannot perform any actions with the profile that blocked them: they cannot comment or mirror\n     * their publications, they cannot follow them, they cannot collect, tip them, etc.\n     * @custom:permissions Profile Owner or Delegated Executor.\n     *\n     * @dev Both the `idsOfProfilesToSetBlockStatus` and `blockStatus` arrays must be of the same length.\n     *\n     * @param byProfileId The ID of the profile that is blocking/unblocking somebody.\n     * @param idsOfProfilesToSetBlockStatus The array of IDs of profiles to set block status.\n     * @param blockStatus The array of block statuses to use for each (true is blocked).\n     */\n    function setBlockStatus(\n        uint256 byProfileId,\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\n        bool[] calldata blockStatus\n    ) external;\n\n    /**\n     * @custom:meta-tx setBlockStatus.\n     */\n    function setBlockStatusWithSig(\n        uint256 byProfileId,\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\n        bool[] calldata blockStatus,\n        Types.EIP712Signature calldata signature\n    ) external;\n\n    /**\n     * @notice Collects a given publication via signature with the specified parameters.\n     * Collect can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\n     * @custom:permissions Collector Profile Owner or its Delegated Executor.\n     * @custom:pending-deprecation Collect modules were replaced by PublicationAction Collect modules in V2. This method\n     * is left here for backwards compatibility with posts made in V1 that had Collect modules.\n     *\n     * @param collectParams A CollectParams struct containing the parameters.\n     *\n     * @return uint256 An integer representing the minted token ID.\n     */\n    function collectLegacy(Types.LegacyCollectParams calldata collectParams) external returns (uint256);\n\n    /**\n     * @custom:meta-tx collect.\n     * @custom:pending-deprecation\n     */\n    function collectLegacyWithSig(\n        Types.LegacyCollectParams calldata collectParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (uint256);\n\n    /**\n     * @notice Acts on a given publication with the specified parameters.\n     * You can act on a publication except a mirror (if it has at least one action module initialized).\n     * Actions can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\n     * @custom:permissions Actor Profile Owner or its Delegated Executor.\n     *\n     * @param publicationActionParams A PublicationActionParams struct containing the parameters.\n     *\n     * @return bytes Arbitrary data the action module returns.\n     */\n    function act(Types.PublicationActionParams calldata publicationActionParams) external returns (bytes memory);\n\n    /**\n     * @custom:meta-tx act.\n     */\n    function actWithSig(\n        Types.PublicationActionParams calldata publicationActionParams,\n        Types.EIP712Signature calldata signature\n    ) external returns (bytes memory);\n\n    /**\n     * @dev This function is used to invalidate signatures by incrementing the nonce of the signer.\n     * @param increment The amount to increment the nonce by (max 255).\n     */\n    function incrementNonce(uint8 increment) external;\n\n    /////////////////////////////////\n    ///       VIEW FUNCTIONS      ///\n    /////////////////////////////////\n\n    /**\n     * @notice Returns whether or not `followerProfileId` is following `followedProfileId`.\n     *\n     * @param followerProfileId The ID of the profile whose following state should be queried.\n     * @param followedProfileId The ID of the profile whose followed state should be queried.\n     *\n     * @return bool True if `followerProfileId` is following `followedProfileId`, false otherwise.\n     */\n    function isFollowing(uint256 followerProfileId, uint256 followedProfileId) external view returns (bool);\n\n    /**\n     * @notice Returns whether the given address is approved as delegated executor, in the configuration with the given\n     * number, to act on behalf of the given profile.\n     *\n     * @param delegatorProfileId The ID of the profile to check the delegated executor approval for.\n     * @param delegatedExecutor The address to query the delegated executor approval for.\n     * @param configNumber The number of the configuration where the executor approval state is being queried.\n     *\n     * @return bool True if the address is approved as a delegated executor to act on behalf of the profile in the\n     * given configuration, false otherwise.\n     */\n    function isDelegatedExecutorApproved(\n        uint256 delegatorProfileId,\n        address delegatedExecutor,\n        uint64 configNumber\n    ) external view returns (bool);\n\n    /**\n     * @notice Returns whether the given address is approved as delegated executor, in the current configuration, to act\n     * on behalf of the given profile.\n     *\n     * @param delegatorProfileId The ID of the profile to check the delegated executor approval for.\n     * @param delegatedExecutor The address to query the delegated executor approval for.\n     *\n     * @return bool True if the address is approved as a delegated executor to act on behalf of the profile in the\n     * current configuration, false otherwise.\n     */\n    function isDelegatedExecutorApproved(\n        uint256 delegatorProfileId,\n        address delegatedExecutor\n    ) external view returns (bool);\n\n    /**\n     * @notice Returns the current delegated executor config number for the given profile.\n     *\n     * @param delegatorProfileId The ID of the profile from which the delegated executors config number is being queried\n     *\n     * @return uint256 The current delegated executor configuration number.\n     */\n    function getDelegatedExecutorsConfigNumber(uint256 delegatorProfileId) external view returns (uint64);\n\n    /**\n     * @notice Returns the previous used delegated executor config number for the given profile.\n     *\n     * @param delegatorProfileId The ID of the profile from which the delegated executors' previous configuration number\n     * set is being queried.\n     *\n     * @return uint256 The delegated executor configuration number previously set. It will coincide with the current\n     * configuration set if it was never switched from the default one.\n     */\n    function getDelegatedExecutorsPrevConfigNumber(uint256 delegatorProfileId) external view returns (uint64);\n\n    /**\n     * @notice Returns the maximum delegated executor config number for the given profile.\n     * This is the maximum config number that was ever used by this profile.\n     * When creating a new clean configuration, you can only use a number that is maxConfigNumber + 1.\n     *\n     * @param delegatorProfileId The ID of the profile from which the delegated executors' maximum configuration number\n     * set is being queried.\n     *\n     * @return uint256 The delegated executor maximum configuration number set.\n     */\n    function getDelegatedExecutorsMaxConfigNumberSet(uint256 delegatorProfileId) external view returns (uint64);\n\n    /**\n     * @notice Returns whether `profileId` is blocked by `byProfileId`.\n     * See setBlockStatus() for more information on how blocking works on the platform.\n     *\n     * @param profileId The ID of the profile whose blocked status should be queried.\n     * @param byProfileId The ID of the profile whose blocker status should be queried.\n     *\n     * @return bool True if `profileId` is blocked by `byProfileId`, false otherwise.\n     */\n    function isBlocked(uint256 profileId, uint256 byProfileId) external view returns (bool);\n\n    /**\n     * @notice Returns the URI associated with a given publication.\n     * This is used to store the publication's metadata, e.g.: content, images, etc.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return string The URI associated with a given publication.\n     */\n    function getContentURI(uint256 profileId, uint256 pubId) external view returns (string memory);\n\n    /**\n     * @notice Returns the full profile struct associated with a given profile token ID.\n     *\n     * @param profileId The token ID of the profile to query.\n     *\n     * @return Profile The profile struct of the given profile.\n     */\n    function getProfile(uint256 profileId) external view returns (Types.Profile memory);\n\n    /**\n     * @notice Returns the full publication struct for a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return Publication The publication struct associated with the queried publication.\n     */\n    function getPublication(uint256 profileId, uint256 pubId) external view returns (Types.PublicationMemory memory);\n\n    /**\n     * @notice Returns the type of a given publication.\n     * The type can be one of the following (see PublicationType enum):\n     * - Nonexistent\n     * - Post\n     * - Comment\n     * - Mirror\n     * - Quote\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return PublicationType The publication type of the queried publication.\n     */\n    function getPublicationType(uint256 profileId, uint256 pubId) external view returns (Types.PublicationType);\n\n    /**\n     * @notice Returns wether a given Action Module is enabled for a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     * @param module The address of the Action Module to query.\n     *\n     * @return bool True if the Action Module is enabled for the queried publication, false if not.\n     */\n    function isActionModuleEnabledInPublication(\n        uint256 profileId,\n        uint256 pubId,\n        address module\n    ) external view returns (bool);\n}\n"
    },
    "lens-modules/contracts/interfaces/ILensVersion.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title ILensVersion\n * @author Lens Protocol\n *\n * @notice This is the interface for the LensHub Version getters and emitter.\n * It allows to emit a LensHub version during an upgrade, and also to get the current version.\n */\ninterface ILensVersion {\n    /**\n     * @notice Returns the LensHub current Version.\n     *\n     * @return version The LensHub current Version.\n     */\n    function getVersion() external view returns (string memory);\n\n    /**\n     * @notice Returns the LensHub current Git Commit.\n     *\n     * @return gitCommit The LensHub current Git Commit.\n     */\n    function getGitCommit() external view returns (bytes20);\n\n    /**\n     * @notice Emits the LensHub current Version. Used in upgradeAndCall().\n     */\n    function emitVersion() external;\n}\n"
    },
    "lens-modules/contracts/interfaces/IModuleRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface IModuleRegistry {\n    enum ModuleType {\n        __, // Just to avoid 0 as valid ModuleType\n        PUBLICATION_ACTION_MODULE,\n        REFERENCE_MODULE,\n        FOLLOW_MODULE\n    }\n\n    // Modules functions\n\n    function verifyModule(address moduleAddress, uint256 moduleType) external returns (bool);\n\n    function registerModule(address moduleAddress, uint256 moduleType) external returns (bool);\n\n    function getModuleTypes(address moduleAddress) external view returns (uint256);\n\n    function isModuleRegistered(address moduleAddress) external view returns (bool);\n\n    function isModuleRegisteredAs(address moduleAddress, uint256 moduleType) external view returns (bool);\n\n    // Currencies functions\n\n    function verifyErc20Currency(address currencyAddress) external returns (bool);\n\n    function registerErc20Currency(address currencyAddress) external returns (bool);\n\n    function isErc20CurrencyRegistered(address currencyAddress) external view returns (bool);\n}\n"
    },
    "lens-modules/contracts/interfaces/IPublicationActionModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from '../libraries/constants/Types.sol';\n\n/**\n * @title IPublicationAction\n * @author Lens Protocol\n *\n * @notice This is the standard interface for all Lens-compatible Publication Actions.\n * Publication action modules allow users to execute actions directly from a publication, like:\n *  - Minting NFTs.\n *  - Collecting a publication.\n *  - Sending funds to the publication author (e.g. tipping).\n *  - Etc.\n * Referrers are supported, so any publication or profile that references the publication can receive a share from the\n * publication's action if the action module supports it.\n */\ninterface IPublicationActionModule {\n    /**\n     * @notice Initializes the action module for the given publication being published with this Action module.\n     * @custom:permissions LensHub.\n     *\n     * @param profileId The profile ID of the author publishing the content with this Publication Action.\n     * @param pubId The publication ID being published.\n     * @param transactionExecutor The address of the transaction executor (e.g. for any funds to transferFrom).\n     * @param data Arbitrary data passed from the user to be decoded by the Action Module during initialization.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function initializePublicationAction(\n        uint256 profileId,\n        uint256 pubId,\n        address transactionExecutor,\n        bytes calldata data\n    ) external returns (bytes memory);\n\n    /**\n     * @notice Processes the action for a given publication. This includes the action's logic and any monetary/token\n     * operations.\n     * @custom:permissions LensHub.\n     *\n     * @param processActionParams The parameters needed to execute the publication action.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function processPublicationAction(Types.ProcessActionParams calldata processActionParams)\n        external\n        returns (bytes memory);\n}\n"
    },
    "lens-modules/contracts/interfaces/IReferenceModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from '../libraries/constants/Types.sol';\n\n/**\n * @title IReferenceModule\n * @author Lens Protocol\n *\n * @notice This is the standard interface for all Lens-compatible ReferenceModules.\n * Reference modules allow executing some action when a publication is referenced, like:\n *  - Rewards for mirroring/commenting/quoting a publication.\n *  - Token-gated comments/mirrors/quotes of a publication.\n *  - Etc.\n */\ninterface IReferenceModule {\n    /**\n     * @notice Initializes data for the given publication being published with this Reference module.\n     * @custom:permissions LensHub.\n     *\n     * @param profileId The token ID of the profile publishing the publication.\n     * @param pubId The associated publication's LensHub publication ID.\n     * @param transactionExecutor The address of the transaction executor (e.g. for any funds to transferFrom).\n     * @param data Arbitrary data passed from the user to be decoded by the Reference Module during initialization.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function initializeReferenceModule(\n        uint256 profileId,\n        uint256 pubId,\n        address transactionExecutor,\n        bytes calldata data\n    ) external returns (bytes memory);\n\n    /**\n     * @notice Processes a comment being published. This includes any module logic like transferring tokens,\n     * checking for conditions (e.g. token-gated), etc.\n     * @custom:permissions LensHub.\n     *\n     * @param processCommentParams The parameters for processing a comment.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function processComment(Types.ProcessCommentParams calldata processCommentParams) external returns (bytes memory);\n\n    /**\n     * @notice Processes a quote being published. This includes any module logic like transferring tokens,\n     * checking for conditions (e.g. token-gated), etc.\n     * @custom:permissions LensHub\n     *\n     * @param processQuoteParams The parameters for processing a quote.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function processQuote(Types.ProcessQuoteParams calldata processQuoteParams) external returns (bytes memory);\n\n    /**\n     * @notice Processes a mirror being published. This includes any module logic like transferring tokens,\n     * checking for conditions (e.g. token-gated), etc.\n     * @custom:permissions LensHub\n     *\n     * @param processMirrorParams The parameters for processing a mirror.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function processMirror(Types.ProcessMirrorParams calldata processMirrorParams) external returns (bytes memory);\n}\n"
    },
    "lens-modules/contracts/libraries/constants/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nlibrary Errors {\n    error CannotInitImplementation();\n    error Initialized();\n    error SignatureExpired();\n    error SignatureInvalid();\n    error InvalidOwner();\n    error NotOwnerOrApproved();\n    error NotHub();\n    error TokenDoesNotExist();\n    error NotGovernance();\n    error NotGovernanceOrEmergencyAdmin();\n    error EmergencyAdminCanOnlyPauseFurther();\n    error NotProfileOwner();\n    error PublicationDoesNotExist();\n    error CallerNotFollowNFT();\n    error CallerNotCollectNFT(); // Legacy\n    error ArrayMismatch();\n    error NotWhitelisted();\n    error NotRegistered();\n    error InvalidParameter();\n    error ExecutorInvalid();\n    error Blocked();\n    error SelfBlock();\n    error NotFollowing();\n    error SelfFollow();\n    error InvalidReferrer();\n    error InvalidPointedPub();\n    error NonERC721ReceiverImplementer();\n    error AlreadyEnabled();\n\n    // Module Errors\n    error InitParamsInvalid();\n    error ActionNotAllowed();\n\n    error CollectNotAllowed(); // Used in LegacyCollectLib (pending deprecation)\n\n    // MultiState Errors\n    error Paused();\n    error PublishingPaused();\n\n    // Profile Guardian Errors\n    error GuardianEnabled();\n    error NotEOA();\n    error DisablingAlreadyTriggered();\n\n    // Migration Errors\n    error NotMigrationAdmin();\n}\n"
    },
    "lens-modules/contracts/libraries/constants/Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from './Types.sol';\n\nlibrary Events {\n    /**\n     * @dev Emitted when the NFT contract's name and symbol are set at initialization.\n     *\n     * @param name The NFT name set.\n     * @param symbol The NFT symbol set.\n     * @param timestamp The current block timestamp.\n     */\n    event BaseInitialized(string name, string symbol, uint256 timestamp);\n\n    /**\n     * @dev Emitted when the hub state is set.\n     *\n     * @param caller The caller who set the state.\n     * @param prevState The previous protocol state, an enum of either `Paused`, `PublishingPaused` or `Unpaused`.\n     * @param newState The newly set state, an enum of either `Paused`, `PublishingPaused` or `Unpaused`.\n     * @param timestamp The current block timestamp.\n     */\n    event StateSet(\n        address indexed caller,\n        Types.ProtocolState indexed prevState,\n        Types.ProtocolState indexed newState,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when the governance address is changed. We emit the caller even though it should be the previous\n     * governance address, as we cannot guarantee this will always be the case due to upgradeability.\n     *\n     * @param caller The caller who set the governance address.\n     * @param prevGovernance The previous governance address.\n     * @param newGovernance The new governance address set.\n     * @param timestamp The current block timestamp.\n     */\n    event GovernanceSet(\n        address indexed caller,\n        address indexed prevGovernance,\n        address indexed newGovernance,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when the emergency admin is changed. We emit the caller even though it should be the previous\n     * governance address, as we cannot guarantee this will always be the case due to upgradeability.\n     *\n     * @param caller The caller who set the emergency admin address.\n     * @param oldEmergencyAdmin The previous emergency admin address.\n     * @param newEmergencyAdmin The new emergency admin address set.\n     * @param timestamp The current block timestamp.\n     */\n    event EmergencyAdminSet(\n        address indexed caller,\n        address indexed oldEmergencyAdmin,\n        address indexed newEmergencyAdmin,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a profile creator is added to or removed from the whitelist.\n     *\n     * @param profileCreator The address of the profile creator.\n     * @param whitelisted Whether or not the profile creator is being added to the whitelist.\n     * @param timestamp The current block timestamp.\n     */\n    event ProfileCreatorWhitelisted(address indexed profileCreator, bool indexed whitelisted, uint256 timestamp);\n\n    /**\n     * @dev Emitted when a profile is created.\n     *\n     * @param profileId The newly created profile's token ID.\n     * @param creator The profile creator, who created the token with the given profile ID.\n     * @param to The address receiving the profile with the given profile ID.\n     * @param timestamp The current block timestamp.\n     */\n    event ProfileCreated(uint256 indexed profileId, address indexed creator, address indexed to, uint256 timestamp);\n\n    /**\n     * @dev Emitted when a delegated executors configuration is changed.\n     *\n     * @param delegatorProfileId The ID of the profile for which the delegated executor was changed.\n     * @param configNumber The number of the configuration where the executor approval state was set.\n     * @param delegatedExecutors The array of delegated executors whose approval was set for.\n     * @param approvals The array of booleans indicating the corresponding executor new approval status.\n     * @param timestamp The current block timestamp.\n     */\n    event DelegatedExecutorsConfigChanged(\n        uint256 indexed delegatorProfileId,\n        uint256 indexed configNumber,\n        address[] delegatedExecutors,\n        bool[] approvals,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a delegated executors configuration is applied.\n     *\n     * @param delegatorProfileId The ID of the profile applying the configuration.\n     * @param configNumber The number of the configuration applied.\n     * @param timestamp The current block timestamp.\n     */\n    event DelegatedExecutorsConfigApplied(\n        uint256 indexed delegatorProfileId,\n        uint256 indexed configNumber,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a profile's follow module is set.\n     *\n     * @param profileId The profile's token ID.\n     * @param followModule The profile's newly set follow module. This CAN be the zero address.\n     * @param followModuleInitData The data passed to the follow module, if any.\n     * @param followModuleReturnData The data returned from the follow module's initialization. This is ABI-encoded\n     * and depends on the follow module chosen.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The current block timestamp.\n     */\n    event FollowModuleSet(\n        uint256 indexed profileId,\n        address followModule,\n        bytes followModuleInitData,\n        bytes followModuleReturnData,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a post is successfully published.\n     *\n     * @param postParams The parameters passed to create the post publication.\n     * @param pubId The publication ID assigned to the created post.\n     * @param actionModulesInitReturnDatas The data returned from the action modules' initialization for this given\n     * publication. This is ABI-encoded and depends on the action module chosen.\n     * @param referenceModuleInitReturnData The data returned from the reference module at initialization. This is\n     * ABI-encoded and depends on the reference module chosen.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The current block timestamp.\n     */\n    event PostCreated(\n        Types.PostParams postParams,\n        uint256 indexed pubId,\n        bytes[] actionModulesInitReturnDatas,\n        bytes referenceModuleInitReturnData,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a comment is successfully published.\n     *\n     * @param commentParams The parameters passed to create the comment publication.\n     * @param pubId The publication ID assigned to the created comment.\n     * @param referenceModuleReturnData The data returned by the commented publication reference module's\n     * processComment function, if the commented publication has a reference module set.\n     * @param actionModulesInitReturnDatas The data returned from the action modules' initialization for this given\n     * publication. This is ABI-encoded and depends on the action module chosen.\n     * @param referenceModuleInitReturnData The data returned from the reference module at initialization. This is\n     * ABI-encoded and depends on the reference module chosen.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The current block timestamp.\n     */\n    event CommentCreated(\n        Types.CommentParams commentParams,\n        uint256 indexed pubId,\n        bytes referenceModuleReturnData,\n        bytes[] actionModulesInitReturnDatas,\n        bytes referenceModuleInitReturnData,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a mirror is successfully published.\n     *\n     * @param mirrorParams The parameters passed to create the mirror publication.\n     * @param pubId The publication ID assigned to the created mirror.\n     * @param referenceModuleReturnData The data returned by the mirrored publication reference module's\n     * processMirror function, if the mirrored publication has a reference module set.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The current block timestamp.\n     */\n    event MirrorCreated(\n        Types.MirrorParams mirrorParams,\n        uint256 indexed pubId,\n        bytes referenceModuleReturnData,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a quote is successfully published.\n     *\n     * @param quoteParams The parameters passed to create the quote publication.\n     * @param pubId The publication ID assigned to the created quote.\n     * @param referenceModuleReturnData The data returned by the quoted publication reference module's\n     * processQuote function, if the quoted publication has a reference module set.\n     * @param actionModulesInitReturnDatas The data returned from the action modules' initialization for this given\n     * publication. This is ABI-encoded and depends on the action module chosen.\n     * @param referenceModuleInitReturnData The data returned from the reference module at initialization. This is\n     * ABI-encoded and depends on the reference module chosen.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The current block timestamp.\n     */\n    event QuoteCreated(\n        Types.QuoteParams quoteParams,\n        uint256 indexed pubId,\n        bytes referenceModuleReturnData,\n        bytes[] actionModulesInitReturnDatas,\n        bytes referenceModuleInitReturnData,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a followNFT clone is deployed using a lazy deployment pattern.\n     *\n     * @param profileId The token ID of the profile to which this followNFT is associated.\n     * @param followNFT The address of the newly deployed followNFT clone.\n     * @param timestamp The current block timestamp.\n     */\n    event FollowNFTDeployed(uint256 indexed profileId, address indexed followNFT, uint256 timestamp);\n    /**\n     * @dev Emitted when a collectNFT clone is deployed using a lazy deployment pattern.\n     *\n     * @param profileId The publisher's profile token ID.\n     * @param pubId The publication associated with the newly deployed collectNFT clone's ID.\n     * @param collectNFT The address of the newly deployed collectNFT clone.\n     * @param timestamp The current block timestamp.\n     */\n    event LegacyCollectNFTDeployed(\n        uint256 indexed profileId,\n        uint256 indexed pubId,\n        address indexed collectNFT,\n        uint256 timestamp\n    );\n    /**\n     * @dev Emitted upon a successful action.\n     *\n     * @param publicationActionParams The parameters passed to act on a publication.\n     * @param actionModuleReturnData The data returned from the action modules. This is ABI-encoded and the format\n     * depends on the action module chosen.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The current block timestamp.\n     */\n    event Acted(\n        Types.PublicationActionParams publicationActionParams,\n        bytes actionModuleReturnData,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted upon a successful follow operation.\n     *\n     * @param followerProfileId The ID of the profile that executed the follow.\n     * @param idOfProfileFollowed The ID of the profile that was followed.\n     * @param followTokenIdAssigned The ID of the follow token assigned to the follower.\n     * @param followModuleData The data to pass to the follow module, if any.\n     * @param processFollowModuleReturnData The data returned by the followed profile follow module's processFollow\n     * function, if the followed profile has a reference module set.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The timestamp of the follow operation.\n     */\n    event Followed(\n        uint256 indexed followerProfileId,\n        uint256 idOfProfileFollowed,\n        uint256 followTokenIdAssigned,\n        bytes followModuleData,\n        bytes processFollowModuleReturnData,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted upon a successful unfollow operation.\n     *\n     * @param unfollowerProfileId The ID of the profile that executed the unfollow.\n     * @param idOfProfileUnfollowed The ID of the profile that was unfollowed.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The timestamp of the unfollow operation.\n     */\n    event Unfollowed(\n        uint256 indexed unfollowerProfileId,\n        uint256 idOfProfileUnfollowed,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted upon a successful block, through a block status setting operation.\n     *\n     * @param byProfileId The ID of the profile that executed the block status change.\n     * @param idOfProfileBlocked The ID of the profile whose block status have been set to blocked.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The timestamp of the block operation.\n     */\n    event Blocked(\n        uint256 indexed byProfileId,\n        uint256 idOfProfileBlocked,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted upon a successful unblock, through a block status setting operation.\n     *\n     * @param byProfileId The ID of the profile that executed the block status change.\n     * @param idOfProfileUnblocked The ID of the profile whose block status have been set to unblocked.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The timestamp of the unblock operation.\n     */\n    event Unblocked(\n        uint256 indexed byProfileId,\n        uint256 idOfProfileUnblocked,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted via callback when a collectNFT is transferred.\n     *\n     * @param profileId The token ID of the profile associated with the collectNFT being transferred.\n     * @param pubId The publication ID associated with the collectNFT being transferred.\n     * @param collectNFTId The collectNFT being transferred's token ID.\n     * @param from The address the collectNFT is being transferred from.\n     * @param to The address the collectNFT is being transferred to.\n     * @param timestamp The current block timestamp.\n     */\n    event CollectNFTTransferred(\n        uint256 indexed profileId,\n        uint256 indexed pubId,\n        uint256 indexed collectNFTId,\n        address from,\n        address to,\n        uint256 timestamp\n    );\n\n    /**\n     * @notice Emitted when the treasury address is set.\n     *\n     * @param prevTreasury The previous treasury address.\n     * @param newTreasury The new treasury address set.\n     * @param timestamp The current block timestamp.\n     */\n    event TreasurySet(address indexed prevTreasury, address indexed newTreasury, uint256 timestamp);\n\n    /**\n     * @notice Emitted when the treasury fee is set.\n     *\n     * @param prevTreasuryFee The previous treasury fee in BPS.\n     * @param newTreasuryFee The new treasury fee in BPS.\n     * @param timestamp The current block timestamp.\n     */\n    event TreasuryFeeSet(uint16 indexed prevTreasuryFee, uint16 indexed newTreasuryFee, uint256 timestamp);\n\n    /**\n     * @dev Emitted when the metadata associated with a profile is set in the `LensPeriphery`.\n     *\n     * @param profileId The profile ID the metadata is set for.\n     * @param metadata The metadata set for the profile and user.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The current block timestamp.\n     */\n    event ProfileMetadataSet(\n        uint256 indexed profileId,\n        string metadata,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when an address' Profile Guardian state change is triggered.\n     *\n     * @param wallet The address whose Token Guardian state change is being triggered.\n     * @param enabled True if the Token Guardian is being enabled, false if it is being disabled.\n     * @param tokenGuardianDisablingTimestamp The UNIX timestamp when disabling the Token Guardian will take effect,\n     * if disabling it. Zero if the protection is being enabled.\n     * @param timestamp The UNIX timestamp of the change being triggered.\n     */\n    event TokenGuardianStateChanged(\n        address indexed wallet,\n        bool indexed enabled,\n        uint256 tokenGuardianDisablingTimestamp,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a signer's nonce is used and, as a consequence, the next available nonce is updated.\n     *\n     * @param signer The signer whose next available nonce was updated.\n     * @param nonce The next available nonce that can be used to execute a meta-tx successfully.\n     * @param timestamp The UNIX timestamp of the nonce being used.\n     */\n    event NonceUpdated(address indexed signer, uint256 nonce, uint256 timestamp);\n\n    /**\n     * @dev Emitted when a collection's token URI is updated.\n     * @param fromTokenId The ID of the smallest token that requires its token URI to be refreshed.\n     * @param toTokenId The ID of the biggest token that requires its token URI to be refreshed. Max uint256 to refresh\n     * all of them.\n     */\n    event BatchMetadataUpdate(uint256 fromTokenId, uint256 toTokenId);\n}\n"
    },
    "lens-modules/contracts/libraries/constants/Typehash.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nlibrary Typehash {\n\n    bytes32 constant ACT = keccak256('Act(uint256 publicationActedProfileId,uint256 publicationActedId,uint256 actorProfileId,uint256[] referrerProfileIds,uint256[] referrerPubIds,address actionModuleAddress,bytes actionModuleData,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant CHANGE_DELEGATED_EXECUTORS_CONFIG = keccak256('ChangeDelegatedExecutorsConfig(uint256 delegatorProfileId,address[] delegatedExecutors,bool[] approvals,uint64 configNumber,bool switchToGivenConfig,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant COLLECT_LEGACY = keccak256('CollectLegacy(uint256 publicationCollectedProfileId,uint256 publicationCollectedId,uint256 collectorProfileId,uint256 referrerProfileId,uint256 referrerPubId,bytes collectModuleData,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant COMMENT = keccak256('Comment(uint256 profileId,string contentURI,uint256 pointedProfileId,uint256 pointedPubId,uint256[] referrerProfileIds,uint256[] referrerPubIds,bytes referenceModuleData,address[] actionModules,bytes[] actionModulesInitDatas,address referenceModule,bytes referenceModuleInitData,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant EIP712_DOMAIN = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\n\n    bytes32 constant FOLLOW = keccak256('Follow(uint256 followerProfileId,uint256[] idsOfProfilesToFollow,uint256[] followTokenIds,bytes[] datas,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant MIRROR = keccak256('Mirror(uint256 profileId,string metadataURI,uint256 pointedProfileId,uint256 pointedPubId,uint256[] referrerProfileIds,uint256[] referrerPubIds,bytes referenceModuleData,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant POST = keccak256('Post(uint256 profileId,string contentURI,address[] actionModules,bytes[] actionModulesInitDatas,address referenceModule,bytes referenceModuleInitData,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant QUOTE = keccak256('Quote(uint256 profileId,string contentURI,uint256 pointedProfileId,uint256 pointedPubId,uint256[] referrerProfileIds,uint256[] referrerPubIds,bytes referenceModuleData,address[] actionModules,bytes[] actionModulesInitDatas,address referenceModule,bytes referenceModuleInitData,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant SET_BLOCK_STATUS = keccak256('SetBlockStatus(uint256 byProfileId,uint256[] idsOfProfilesToSetBlockStatus,bool[] blockStatus,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant SET_FOLLOW_MODULE = keccak256('SetFollowModule(uint256 profileId,address followModule,bytes followModuleInitData,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant SET_PROFILE_METADATA_URI = keccak256('SetProfileMetadataURI(uint256 profileId,string metadataURI,uint256 nonce,uint256 deadline)');\n\n    bytes32 constant UNFOLLOW = keccak256('Unfollow(uint256 unfollowerProfileId,uint256[] idsOfProfilesToUnfollow,uint256 nonce,uint256 deadline)');\n}\n"
    },
    "lens-modules/contracts/libraries/constants/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title Types\n * @author Lens Protocol\n *\n * @notice A standard library of data types used throughout the Lens Protocol.\n */\nlibrary Types {\n    /**\n     * @notice ERC721Timestamped storage. Contains the owner address and the mint timestamp for every NFT.\n     *\n     * Note: Instead of the owner address in the _tokenOwners private mapping, we now store it in the\n     * _tokenData mapping, alongside the mint timestamp.\n     *\n     * @param owner The token owner.\n     * @param mintTimestamp The mint timestamp.\n     */\n    struct TokenData {\n        address owner;\n        uint96 mintTimestamp;\n    }\n\n    /**\n     * @notice A struct containing token follow-related data.\n     *\n     * @param followerProfileId The ID of the profile using the token to follow.\n     * @param originalFollowTimestamp The timestamp of the first follow performed with the token.\n     * @param followTimestamp The timestamp of the current follow, if a profile is using the token to follow.\n     * @param profileIdAllowedToRecover The ID of the profile allowed to recover the follow ID, if any.\n     */\n    struct FollowData {\n        uint160 followerProfileId;\n        uint48 originalFollowTimestamp;\n        uint48 followTimestamp;\n        uint256 profileIdAllowedToRecover;\n    }\n\n    /**\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\n     *\n     * @param Unpaused The fully unpaused state.\n     * @param PublishingPaused The state where only publication creation functions are paused.\n     * @param Paused The fully paused state.\n     */\n    enum ProtocolState {\n        Unpaused,\n        PublishingPaused,\n        Paused\n    }\n\n    /**\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\n     *\n     * @param Nonexistent An indicator showing the queried publication does not exist.\n     * @param Post A standard post, having an URI, action modules and no pointer to another publication.\n     * @param Comment A comment, having an URI, action modules and a pointer to another publication.\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or action modules.\n     * @param Quote A quote, having an URI, action modules, and a pointer to another publication.\n     */\n    enum PublicationType {\n        Nonexistent,\n        Post,\n        Comment,\n        Mirror,\n        Quote\n    }\n\n    /**\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\n     *\n     * @param signer The address of the signer. Specially needed as a parameter to support EIP-1271.\n     * @param v The signature's recovery parameter.\n     * @param r The signature's r parameter.\n     * @param s The signature's s parameter.\n     * @param deadline The signature's deadline.\n     */\n    struct EIP712Signature {\n        address signer;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 deadline;\n    }\n\n    /**\n     * @notice A struct containing profile data.\n     *\n     * @param pubCount The number of publications made to this profile.\n     * @param followModule The address of the current follow module in use by this profile, can be address(0) in none.\n     * @param followNFT The address of the followNFT associated with this profile. It can be address(0) if the\n     * profile has not been followed yet, as the collection is lazy-deployed upon the first follow.\n     * @param __DEPRECATED__handle DEPRECATED in V2: handle slot, was replaced with LensHandles.\n     * @param __DEPRECATED__imageURI DEPRECATED in V2: The URI to be used for the profile image.\n     * @param __DEPRECATED__followNFTURI DEPRECATED in V2: The URI used for the follow NFT image.\n     * @param metadataURI MetadataURI is used to store the profile's metadata, for example: displayed name, description,\n     * interests, etc.\n     */\n    struct Profile {\n        uint256 pubCount; // offset 0\n        address followModule; // offset 1\n        address followNFT; // offset 2\n        string __DEPRECATED__handle; // offset 3\n        string __DEPRECATED__imageURI; // offset 4\n        string __DEPRECATED__followNFTURI; // Deprecated in V2 as we have a common tokenURI for all Follows, offset 5\n        string metadataURI; // offset 6\n    }\n\n    /**\n     * @notice A struct containing publication data.\n     *\n     * @param pointedProfileId The profile token ID to point the publication to.\n     * @param pointedPubId The publication ID to point the publication to.\n     * These are used to implement the \"reference\" feature of the platform and is used in:\n     * - Mirrors\n     * - Comments\n     * - Quotes\n     * There are (0,0) if the publication is not pointing to any other publication (i.e. the publication is a Post).\n     * @param contentURI The URI to set for the content of publication (can be ipfs, arweave, http, etc).\n     * @param referenceModule Reference module associated with this profile, if any.\n     * @param __DEPRECATED__collectModule Collect module associated with this publication, if any. Deprecated in V2.\n     * @param __DEPRECATED__collectNFT Collect NFT associated with this publication, if any. Deprecated in V2.\n     * @param pubType The type of publication, can be Nonexistent, Post, Comment, Mirror or Quote.\n     * @param rootProfileId The profile ID of the root post (to determine if comments/quotes and mirrors come from it).\n     * Posts, V1 publications and publications rooted in V1 publications don't have it set.\n     * @param rootPubId The publication ID of the root post (to determine if comments/quotes and mirrors come from it).\n     * Posts, V1 publications and publications rooted in V1 publications don't have it set.\n     * @param actionModuleEnabled The action modules enabled in a given publication.\n     */\n    struct Publication {\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        string contentURI;\n        address referenceModule;\n        address __DEPRECATED__collectModule; // Deprecated in V2\n        address __DEPRECATED__collectNFT; // Deprecated in V2\n        // Added in Lens V2, so these will be zero for old publications:\n        PublicationType pubType;\n        uint256 rootProfileId;\n        uint256 rootPubId;\n        mapping(address => bool) actionModuleEnabled;\n    }\n\n    struct PublicationMemory {\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        string contentURI;\n        address referenceModule;\n        address __DEPRECATED__collectModule; // Deprecated in V2\n        address __DEPRECATED__collectNFT; // Deprecated in V2\n        // Added in Lens V2, so these will be zero for old publications:\n        PublicationType pubType;\n        uint256 rootProfileId;\n        uint256 rootPubId;\n        // bytes32 __ACTION_MODULE_ENABLED_MAPPING; // Mappings are not supported in memory.\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `createProfile()` function.\n     *\n     * @param to The address receiving the profile.\n     * @param followModule The follow module to use, can be the zero address.\n     * @param followModuleInitData The follow module initialization data, if any.\n     */\n    struct CreateProfileParams {\n        address to;\n        address followModule;\n        bytes followModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `post()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param actionModules The action modules to set for this new publication.\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct PostParams {\n        uint256 profileId;\n        string contentURI;\n        address[] actionModules;\n        bytes[] actionModulesInitDatas;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `comment()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param pointedProfileId The profile token ID to point the comment to.\n     * @param pointedPubId The publication ID to point the comment to.\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param actionModules The action modules to set for this new publication.\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct CommentParams {\n        uint256 profileId;\n        string contentURI;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        bytes referenceModuleData;\n        address[] actionModules;\n        bytes[] actionModulesInitDatas;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `quote()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param pointedProfileId The profile token ID of the publication author that is quoted.\n     * @param pointedPubId The publication ID that is quoted.\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param actionModules The action modules to set for this new publication.\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct QuoteParams {\n        uint256 profileId;\n        string contentURI;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        bytes referenceModuleData;\n        address[] actionModules;\n        bytes[] actionModulesInitDatas;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `comment()` or `quote()` internal functions.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param pointedProfileId The profile token ID of the publication author that is commented on/quoted.\n     * @param pointedPubId The publication ID that is commented on/quoted.\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param actionModules The action modules to set for this new publication.\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct ReferencePubParams {\n        uint256 profileId;\n        string contentURI;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        bytes referenceModuleData;\n        address[] actionModules;\n        bytes[] actionModulesInitDatas;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `mirror()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param metadataURI the URI containing metadata attributes to attach to this mirror publication.\n     * @param pointedProfileId The profile token ID to point the mirror to.\n     * @param pointedPubId The publication ID to point the mirror to.\n     * @param referenceModuleData The data passed to the reference module.\n     */\n    struct MirrorParams {\n        uint256 profileId;\n        string metadataURI;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        bytes referenceModuleData;\n    }\n\n    /**\n     * Deprecated in V2: Will be removed after some time after upgrading to V2.\n     * @notice A struct containing the parameters required for the legacy `collect()` function.\n     * @dev The referrer can only be a mirror of the publication being collected.\n     *\n     * @param publicationCollectedProfileId The token ID of the profile that published the publication to collect.\n     * @param publicationCollectedId The publication to collect's publication ID.\n     * @param collectorProfileId The collector profile.\n     * @param referrerProfileId The ID of a profile that authored a mirror that helped discovering the collected pub.\n     * @param referrerPubId The ID of the mirror that helped discovering the collected pub.\n     * @param collectModuleData The arbitrary data to pass to the collectModule if needed.\n     */\n    struct LegacyCollectParams {\n        uint256 publicationCollectedProfileId;\n        uint256 publicationCollectedId;\n        uint256 collectorProfileId;\n        uint256 referrerProfileId;\n        uint256 referrerPubId;\n        bytes collectModuleData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `action()` function.\n     *\n     * @param publicationActedProfileId The token ID of the profile that published the publication to action.\n     * @param publicationActedId The publication to action's publication ID.\n     * @param actorProfileId The actor profile.\n     * @param referrerProfileId\n     * @param referrerPubId\n     * @param actionModuleAddress\n     * @param actionModuleData The arbitrary data to pass to the actionModule if needed.\n     */\n    struct PublicationActionParams {\n        uint256 publicationActedProfileId;\n        uint256 publicationActedId;\n        uint256 actorProfileId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        address actionModuleAddress;\n        bytes actionModuleData;\n    }\n\n    struct ProcessActionParams {\n        uint256 publicationActedProfileId;\n        uint256 publicationActedId;\n        uint256 actorProfileId;\n        address actorProfileOwner;\n        address transactionExecutor;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        Types.PublicationType[] referrerPubTypes;\n        bytes actionModuleData;\n    }\n\n    struct ProcessCommentParams {\n        uint256 profileId;\n        uint256 pubId;\n        address transactionExecutor;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        Types.PublicationType[] referrerPubTypes;\n        bytes data;\n    }\n\n    struct ProcessQuoteParams {\n        uint256 profileId;\n        uint256 pubId;\n        address transactionExecutor;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        Types.PublicationType[] referrerPubTypes;\n        bytes data;\n    }\n\n    struct ProcessMirrorParams {\n        uint256 profileId;\n        uint256 pubId;\n        address transactionExecutor;\n        uint256 pointedProfileId;\n        uint256 pointedPubId;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        Types.PublicationType[] referrerPubTypes;\n        bytes data;\n    }\n\n    /**\n     * @notice A struct containing a profile's delegated executors configuration.\n     *\n     * @param isApproved Tells when an address is approved as delegated executor in the given configuration number.\n     * @param configNumber Current configuration number in use.\n     * @param prevConfigNumber Previous configuration number set, before switching to the current one.\n     * @param maxConfigNumberSet Maximum configuration number ever used.\n     */\n    struct DelegatedExecutorsConfig {\n        mapping(uint256 => mapping(address => bool)) isApproved; // isApproved[configNumber][delegatedExecutor]\n        uint64 configNumber;\n        uint64 prevConfigNumber;\n        uint64 maxConfigNumberSet;\n    }\n\n    struct TreasuryData {\n        address treasury;\n        uint16 treasuryFeeBPS;\n    }\n\n    struct MigrationParams {\n        address lensHandlesAddress;\n        address tokenHandleRegistryAddress;\n        address legacyFeeFollowModule;\n        address legacyProfileFollowModule;\n        address newFeeFollowModule;\n    }\n}\n"
    },
    "lens-modules/contracts/libraries/MetaTxLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport {IERC1271} from '@openzeppelin/contracts/interfaces/IERC1271.sol';\nimport {ILensERC721} from '../interfaces/ILensERC721.sol';\nimport {Types} from '../libraries/constants/Types.sol';\nimport {Errors} from '../libraries/constants/Errors.sol';\nimport {Typehash} from '../libraries/constants/Typehash.sol';\nimport {StorageLib} from '../libraries/StorageLib.sol';\nimport {Events} from '../libraries/constants/Events.sol';\n\n/**\n * @title MetaTxLib\n * @author Lens Protocol\n *\n * NOTE: the functions in this contract operate under the assumption that the passed signer is already validated\n * to either be the originator or one of their delegated executors.\n *\n * @dev User nonces are incremented from this library as well.\n */\nlibrary MetaTxLib {\n    string constant EIP712_DOMAIN_VERSION = '2';\n    bytes32 constant EIP712_DOMAIN_VERSION_HASH = keccak256(bytes(EIP712_DOMAIN_VERSION));\n    bytes4 constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\n\n    /**\n     * @dev We store the domain separator and LensHub Proxy address as constants to save gas.\n     *\n     * keccak256(\n     *     abi.encode(\n     *         keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n     *         keccak256('Lens Protocol Profiles'), // Contract Name\n     *         keccak256('2'), // Version Hash\n     *         137, // Polygon Chain ID\n     *         address(0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d) // Verifying Contract Address - LensHub Address\n     *     )\n     * );\n     */\n    bytes32 constant LENS_HUB_CACHED_POLYGON_DOMAIN_SEPARATOR =\n        0xbf9544cf7d7a0338fc4f071be35409a61e51e9caef559305410ad74e16a05f2d;\n\n    address constant LENS_HUB_ADDRESS = 0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d;\n\n    uint256 constant POLYGON_CHAIN_ID = 137;\n\n    function validateSetProfileMetadataURISignature(\n        Types.EIP712Signature calldata signature,\n        uint256 profileId,\n        string calldata metadataURI\n    ) external {\n        _validateRecoveredAddress(\n            _calculateDigest(\n                keccak256(\n                    abi.encode(\n                        Typehash.SET_PROFILE_METADATA_URI,\n                        profileId,\n                        _encodeUsingEip712Rules(metadataURI),\n                        _getNonceIncrementAndEmitEvent(signature.signer),\n                        signature.deadline\n                    )\n                )\n            ),\n            signature\n        );\n    }\n\n    function validateSetFollowModuleSignature(\n        Types.EIP712Signature calldata signature,\n        uint256 profileId,\n        address followModule,\n        bytes calldata followModuleInitData\n    ) external {\n        _validateRecoveredAddress(\n            _calculateDigest(\n                keccak256(\n                    abi.encode(\n                        Typehash.SET_FOLLOW_MODULE,\n                        profileId,\n                        followModule,\n                        _encodeUsingEip712Rules(followModuleInitData),\n                        _getNonceIncrementAndEmitEvent(signature.signer),\n                        signature.deadline\n                    )\n                )\n            ),\n            signature\n        );\n    }\n\n    function validateChangeDelegatedExecutorsConfigSignature(\n        Types.EIP712Signature calldata signature,\n        uint256 delegatorProfileId,\n        address[] calldata delegatedExecutors,\n        bool[] calldata approvals,\n        uint64 configNumber,\n        bool switchToGivenConfig\n    ) external {\n        address signer = signature.signer;\n        uint256 deadline = signature.deadline;\n        _validateRecoveredAddress(\n            _calculateDigest(\n                keccak256(\n                    abi.encode(\n                        Typehash.CHANGE_DELEGATED_EXECUTORS_CONFIG,\n                        delegatorProfileId,\n                        _encodeUsingEip712Rules(delegatedExecutors),\n                        _encodeUsingEip712Rules(approvals),\n                        configNumber,\n                        switchToGivenConfig,\n                        _getNonceIncrementAndEmitEvent(signer),\n                        deadline\n                    )\n                )\n            ),\n            signature\n        );\n    }\n\n    function validatePostSignature(\n        Types.EIP712Signature calldata signature,\n        Types.PostParams calldata postParams\n    ) external {\n        _validateRecoveredAddress(\n            _calculateDigest(\n                keccak256(\n                    abi.encode(\n                        Typehash.POST,\n                        postParams.profileId,\n                        _encodeUsingEip712Rules(postParams.contentURI),\n                        _encodeUsingEip712Rules(postParams.actionModules),\n                        _encodeUsingEip712Rules(postParams.actionModulesInitDatas),\n                        postParams.referenceModule,\n                        _encodeUsingEip712Rules(postParams.referenceModuleInitData),\n                        _getNonceIncrementAndEmitEvent(signature.signer),\n                        signature.deadline\n                    )\n                )\n            ),\n            signature\n        );\n    }\n\n    function validateCommentSignature(\n        Types.EIP712Signature calldata signature,\n        Types.CommentParams calldata commentParams\n    ) external {\n        bytes memory encodedAbi = abi.encode(\n            Typehash.COMMENT,\n            commentParams.profileId,\n            _encodeUsingEip712Rules(commentParams.contentURI),\n            commentParams.pointedProfileId,\n            commentParams.pointedPubId,\n            _encodeUsingEip712Rules(commentParams.referrerProfileIds),\n            _encodeUsingEip712Rules(commentParams.referrerPubIds),\n            _encodeUsingEip712Rules(commentParams.referenceModuleData),\n            _encodeUsingEip712Rules(commentParams.actionModules),\n            _encodeUsingEip712Rules(commentParams.actionModulesInitDatas),\n            commentParams.referenceModule,\n            _encodeUsingEip712Rules(commentParams.referenceModuleInitData),\n            _getNonceIncrementAndEmitEvent(signature.signer),\n            signature.deadline\n        );\n        _validateRecoveredAddress(_calculateDigest(keccak256(encodedAbi)), signature);\n    }\n\n    function validateQuoteSignature(\n        Types.EIP712Signature calldata signature,\n        Types.QuoteParams calldata quoteParams\n    ) external {\n        bytes memory encodedAbi = abi.encode(\n            Typehash.QUOTE,\n            quoteParams.profileId,\n            _encodeUsingEip712Rules(quoteParams.contentURI),\n            quoteParams.pointedProfileId,\n            quoteParams.pointedPubId,\n            _encodeUsingEip712Rules(quoteParams.referrerProfileIds),\n            _encodeUsingEip712Rules(quoteParams.referrerPubIds),\n            _encodeUsingEip712Rules(quoteParams.referenceModuleData),\n            _encodeUsingEip712Rules(quoteParams.actionModules),\n            _encodeUsingEip712Rules(quoteParams.actionModulesInitDatas),\n            quoteParams.referenceModule,\n            _encodeUsingEip712Rules(quoteParams.referenceModuleInitData),\n            _getNonceIncrementAndEmitEvent(signature.signer),\n            signature.deadline\n        );\n        _validateRecoveredAddress(_calculateDigest(keccak256(encodedAbi)), signature);\n    }\n\n    function validateMirrorSignature(\n        Types.EIP712Signature calldata signature,\n        Types.MirrorParams calldata mirrorParams\n    ) external {\n        _validateRecoveredAddress(\n            _calculateDigest(\n                keccak256(\n                    abi.encode(\n                        Typehash.MIRROR,\n                        mirrorParams.profileId,\n                        _encodeUsingEip712Rules(mirrorParams.metadataURI),\n                        mirrorParams.pointedProfileId,\n                        mirrorParams.pointedPubId,\n                        _encodeUsingEip712Rules(mirrorParams.referrerProfileIds),\n                        _encodeUsingEip712Rules(mirrorParams.referrerPubIds),\n                        _encodeUsingEip712Rules(mirrorParams.referenceModuleData),\n                        _getNonceIncrementAndEmitEvent(signature.signer),\n                        signature.deadline\n                    )\n                )\n            ),\n            signature\n        );\n    }\n\n    function validateFollowSignature(\n        Types.EIP712Signature calldata signature,\n        uint256 followerProfileId,\n        uint256[] calldata idsOfProfilesToFollow,\n        uint256[] calldata followTokenIds,\n        bytes[] calldata datas\n    ) external {\n        _validateRecoveredAddress(\n            _calculateDigest(\n                keccak256(\n                    abi.encode(\n                        Typehash.FOLLOW,\n                        followerProfileId,\n                        _encodeUsingEip712Rules(idsOfProfilesToFollow),\n                        _encodeUsingEip712Rules(followTokenIds),\n                        _encodeUsingEip712Rules(datas),\n                        _getNonceIncrementAndEmitEvent(signature.signer),\n                        signature.deadline\n                    )\n                )\n            ),\n            signature\n        );\n    }\n\n    function validateUnfollowSignature(\n        Types.EIP712Signature calldata signature,\n        uint256 unfollowerProfileId,\n        uint256[] calldata idsOfProfilesToUnfollow\n    ) external {\n        _validateRecoveredAddress(\n            _calculateDigest(\n                keccak256(\n                    abi.encode(\n                        Typehash.UNFOLLOW,\n                        unfollowerProfileId,\n                        _encodeUsingEip712Rules(idsOfProfilesToUnfollow),\n                        _getNonceIncrementAndEmitEvent(signature.signer),\n                        signature.deadline\n                    )\n                )\n            ),\n            signature\n        );\n    }\n\n    function validateSetBlockStatusSignature(\n        Types.EIP712Signature calldata signature,\n        uint256 byProfileId,\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\n        bool[] calldata blockStatus\n    ) external {\n        _validateRecoveredAddress(\n            _calculateDigest(\n                keccak256(\n                    abi.encode(\n                        Typehash.SET_BLOCK_STATUS,\n                        byProfileId,\n                        _encodeUsingEip712Rules(idsOfProfilesToSetBlockStatus),\n                        _encodeUsingEip712Rules(blockStatus),\n                        _getNonceIncrementAndEmitEvent(signature.signer),\n                        signature.deadline\n                    )\n                )\n            ),\n            signature\n        );\n    }\n\n    function validateLegacyCollectSignature(\n        Types.EIP712Signature calldata signature,\n        Types.LegacyCollectParams calldata collectParams\n    ) external {\n        _validateRecoveredAddress(\n            _calculateDigest(\n                keccak256(\n                    abi.encode(\n                        Typehash.COLLECT_LEGACY,\n                        collectParams.publicationCollectedProfileId,\n                        collectParams.publicationCollectedId,\n                        collectParams.collectorProfileId,\n                        collectParams.referrerProfileId,\n                        collectParams.referrerPubId,\n                        _encodeUsingEip712Rules(collectParams.collectModuleData),\n                        _getNonceIncrementAndEmitEvent(signature.signer),\n                        signature.deadline\n                    )\n                )\n            ),\n            signature\n        );\n    }\n\n    function validateActSignature(\n        Types.EIP712Signature calldata signature,\n        Types.PublicationActionParams calldata publicationActionParams\n    ) external {\n        _validateRecoveredAddress(\n            _calculateDigest(\n                keccak256(\n                    abi.encode(\n                        Typehash.ACT,\n                        publicationActionParams.publicationActedProfileId,\n                        publicationActionParams.publicationActedId,\n                        publicationActionParams.actorProfileId,\n                        _encodeUsingEip712Rules(publicationActionParams.referrerProfileIds),\n                        _encodeUsingEip712Rules(publicationActionParams.referrerPubIds),\n                        publicationActionParams.actionModuleAddress,\n                        _encodeUsingEip712Rules(publicationActionParams.actionModuleData),\n                        _getNonceIncrementAndEmitEvent(signature.signer),\n                        signature.deadline\n                    )\n                )\n            ),\n            signature\n        );\n    }\n\n    /// @dev This function is used to invalidate signatures by incrementing the nonce\n    function incrementNonce(uint8 increment) external {\n        uint256 currentNonce = StorageLib.nonces()[msg.sender];\n        StorageLib.nonces()[msg.sender] = currentNonce + increment;\n        emit Events.NonceUpdated(msg.sender, currentNonce + increment, block.timestamp);\n    }\n\n    function calculateDomainSeparator() internal view returns (bytes32) {\n        if (address(this) == LENS_HUB_ADDRESS && block.chainid == POLYGON_CHAIN_ID) {\n            return LENS_HUB_CACHED_POLYGON_DOMAIN_SEPARATOR;\n        }\n        return\n            keccak256(\n                abi.encode(\n                    Typehash.EIP712_DOMAIN,\n                    keccak256(bytes(ILensERC721(address(this)).name())),\n                    EIP712_DOMAIN_VERSION_HASH,\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /**\n     * @dev Wrapper for ecrecover to reduce code size, used in meta-tx specific functions.\n     */\n    function _validateRecoveredAddress(bytes32 digest, Types.EIP712Signature calldata signature) private view {\n        if (block.timestamp > signature.deadline) revert Errors.SignatureExpired();\n        // If the expected address is a contract, check the signature there.\n        if (signature.signer.code.length != 0) {\n            bytes memory concatenatedSig = abi.encodePacked(signature.r, signature.s, signature.v);\n            if (IERC1271(signature.signer).isValidSignature(digest, concatenatedSig) != EIP1271_MAGIC_VALUE) {\n                revert Errors.SignatureInvalid();\n            }\n        } else {\n            address recoveredAddress = ecrecover(digest, signature.v, signature.r, signature.s);\n            if (recoveredAddress == address(0) || recoveredAddress != signature.signer) {\n                revert Errors.SignatureInvalid();\n            }\n        }\n    }\n\n    /**\n     * @dev Calculates EIP712 digest based on the current DOMAIN_SEPARATOR.\n     *\n     * @param hashedMessage The message hash from which the digest should be calculated.\n     *\n     * @return bytes32 A 32-byte output representing the EIP712 digest.\n     */\n    function _calculateDigest(bytes32 hashedMessage) private view returns (bytes32) {\n        return keccak256(abi.encodePacked('\\x19\\x01', calculateDomainSeparator(), hashedMessage));\n    }\n\n    /**\n     * @dev This fetches a signer's current nonce and increments it so it's ready for the next meta-tx. Also emits\n     * the `NonceUpdated` event.\n     *\n     * @param signer The address to get and increment the nonce for.\n     *\n     * @return uint256 The current nonce for the given signer prior to being incremented.\n     */\n    function _getNonceIncrementAndEmitEvent(address signer) private returns (uint256) {\n        uint256 currentNonce;\n        unchecked {\n            currentNonce = StorageLib.nonces()[signer]++;\n        }\n        emit Events.NonceUpdated(signer, currentNonce + 1, block.timestamp);\n        return currentNonce;\n    }\n\n    function _encodeUsingEip712Rules(bytes[] memory bytesArray) private pure returns (bytes32) {\n        bytes32[] memory bytesArrayEncodedElements = new bytes32[](bytesArray.length);\n        uint256 i;\n        while (i < bytesArray.length) {\n            // A `bytes` type is encoded as its keccak256 hash.\n            bytesArrayEncodedElements[i] = _encodeUsingEip712Rules(bytesArray[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        // An array is encoded as the keccak256 hash of the concatenation of their encoded elements.\n        return _encodeUsingEip712Rules(bytesArrayEncodedElements);\n    }\n\n    function _encodeUsingEip712Rules(bool[] memory boolArray) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(boolArray));\n    }\n\n    function _encodeUsingEip712Rules(address[] memory addressArray) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(addressArray));\n    }\n\n    function _encodeUsingEip712Rules(uint256[] memory uint256Array) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(uint256Array));\n    }\n\n    function _encodeUsingEip712Rules(bytes32[] memory bytes32Array) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(bytes32Array));\n    }\n\n    function _encodeUsingEip712Rules(string memory stringValue) private pure returns (bytes32) {\n        return keccak256(bytes(stringValue));\n    }\n\n    function _encodeUsingEip712Rules(bytes memory bytesValue) private pure returns (bytes32) {\n        return keccak256(bytesValue);\n    }\n}\n"
    },
    "lens-modules/contracts/libraries/StorageLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport {Types} from '../libraries/constants/Types.sol';\n\nlibrary StorageLib {\n    // uint256 constant NAME_SLOT = 0;\n    // uint256 constant SYMBOL_SLOT = 1;\n    uint256 constant TOKEN_DATA_MAPPING_SLOT = 2;\n    // uint256 constant BALANCES_SLOT = 3;\n    // uint256 constant TOKEN_APPROVAL_MAPPING_SLOT = 4;\n    // uint256 constant OPERATOR_APPROVAL_MAPPING_SLOT = 5;\n    // Slot 6 is deprecated in Lens V2. In V1 it was used for ERC-721 Enumerable's `ownedTokens`.\n    // Slot 7 is deprecated in Lens V2. In V1 it was used for ERC-721 Enumerable's `ownedTokensIndex`.\n    // uint256 constant TOTAL_SUPPLY_SLOT = 8;\n    // Slot 9 is deprecated in Lens V2. In V1 it was used for ERC-721 Enumerable's `allTokensIndex`.\n    uint256 constant SIG_NONCES_MAPPING_SLOT = 10;\n    uint256 constant LAST_INITIALIZED_REVISION_SLOT = 11; // VersionedInitializable's `lastInitializedRevision` field.\n    uint256 constant PROTOCOL_STATE_SLOT = 12;\n    uint256 constant PROFILE_CREATOR_WHITELIST_MAPPING_SLOT = 13;\n    // Slot 14 is deprecated in Lens V2. In V1 it was used for the follow module address whitelist.\n    // Slot 15 is deprecated in Lens V2. In V1 it was used for the collect module address whitelist.\n    // Slot 16 is deprecated in Lens V2. In V1 it was used for the reference module address whitelist.\n    // Slot 17 is deprecated in Lens V2. In V1 it was used for the dispatcher address by profile ID.\n    uint256 constant PROFILE_ID_BY_HANDLE_HASH_MAPPING_SLOT = 18; // Deprecated slot, but still needed for V2 migration.\n    uint256 constant PROFILES_MAPPING_SLOT = 19;\n    uint256 constant PUBLICATIONS_MAPPING_SLOT = 20;\n    // Slot 21 is deprecated in Lens V2. In V1 it was used for the default profile ID by address.\n    uint256 constant PROFILE_COUNTER_SLOT = 22;\n    uint256 constant GOVERNANCE_SLOT = 23;\n    uint256 constant EMERGENCY_ADMIN_SLOT = 24;\n    //////////////////////////////////\n    ///  Introduced in Lens V1.3:  ///\n    //////////////////////////////////\n    uint256 constant TOKEN_GUARDIAN_DISABLING_TIMESTAMP_MAPPING_SLOT = 25;\n    //////////////////////////////////\n    ///   Introduced in Lens V2:   ///\n    //////////////////////////////////\n    uint256 constant DELEGATED_EXECUTOR_CONFIG_MAPPING_SLOT = 26;\n    uint256 constant BLOCKED_STATUS_MAPPING_SLOT = 27;\n    uint256 constant PROFILE_ROYALTIES_BPS_SLOT = 28;\n    uint256 constant MIGRATION_ADMINS_WHITELISTED_MAPPING_SLOT = 29;\n    uint256 constant TREASURY_DATA_SLOT = 30;\n    uint256 constant PROFILE_TOKEN_URI_CONTRACT_SLOT = 31;\n    uint256 constant FOLLOW_TOKEN_URI_CONTRACT_SLOT = 32;\n    uint256 constant LEGACY_COLLECT_FOLLOW_VALIDATION_HELPER_MAPPING_SLOT = 33;\n\n    function getPublication(\n        uint256 profileId,\n        uint256 pubId\n    ) internal pure returns (Types.Publication storage _publication) {\n        assembly {\n            mstore(0, profileId)\n            mstore(32, PUBLICATIONS_MAPPING_SLOT)\n            mstore(32, keccak256(0, 64))\n            mstore(0, pubId)\n            _publication.slot := keccak256(0, 64)\n        }\n    }\n\n    function getPublicationMemory(\n        uint256 profileId,\n        uint256 pubId\n    ) internal pure returns (Types.PublicationMemory memory) {\n        Types.PublicationMemory storage _publicationStorage;\n        assembly {\n            mstore(0, profileId)\n            mstore(32, PUBLICATIONS_MAPPING_SLOT)\n            mstore(32, keccak256(0, 64))\n            mstore(0, pubId)\n            _publicationStorage.slot := keccak256(0, 64)\n        }\n\n        Types.PublicationMemory memory _publicationMemory;\n        _publicationMemory = _publicationStorage;\n\n        return _publicationMemory;\n    }\n\n    function getProfile(uint256 profileId) internal pure returns (Types.Profile storage _profiles) {\n        assembly {\n            mstore(0, profileId)\n            mstore(32, PROFILES_MAPPING_SLOT)\n            _profiles.slot := keccak256(0, 64)\n        }\n    }\n\n    function getDelegatedExecutorsConfig(\n        uint256 delegatorProfileId\n    ) internal pure returns (Types.DelegatedExecutorsConfig storage _delegatedExecutorsConfig) {\n        assembly {\n            mstore(0, delegatorProfileId)\n            mstore(32, DELEGATED_EXECUTOR_CONFIG_MAPPING_SLOT)\n            _delegatedExecutorsConfig.slot := keccak256(0, 64)\n        }\n    }\n\n    function tokenGuardianDisablingTimestamp()\n        internal\n        pure\n        returns (mapping(address => uint256) storage _tokenGuardianDisablingTimestamp)\n    {\n        assembly {\n            _tokenGuardianDisablingTimestamp.slot := TOKEN_GUARDIAN_DISABLING_TIMESTAMP_MAPPING_SLOT\n        }\n    }\n\n    function getTokenData(uint256 tokenId) internal pure returns (Types.TokenData storage _tokenData) {\n        assembly {\n            mstore(0, tokenId)\n            mstore(32, TOKEN_DATA_MAPPING_SLOT)\n            _tokenData.slot := keccak256(0, 64)\n        }\n    }\n\n    function blockedStatus(\n        uint256 blockerProfileId\n    ) internal pure returns (mapping(uint256 => bool) storage _blockedStatus) {\n        assembly {\n            mstore(0, blockerProfileId)\n            mstore(32, BLOCKED_STATUS_MAPPING_SLOT)\n            _blockedStatus.slot := keccak256(0, 64)\n        }\n    }\n\n    function nonces() internal pure returns (mapping(address => uint256) storage _nonces) {\n        assembly {\n            _nonces.slot := SIG_NONCES_MAPPING_SLOT\n        }\n    }\n\n    function profileIdByHandleHash()\n        internal\n        pure\n        returns (mapping(bytes32 => uint256) storage _profileIdByHandleHash)\n    {\n        assembly {\n            _profileIdByHandleHash.slot := PROFILE_ID_BY_HANDLE_HASH_MAPPING_SLOT\n        }\n    }\n\n    function profileCreatorWhitelisted()\n        internal\n        pure\n        returns (mapping(address => bool) storage _profileCreatorWhitelisted)\n    {\n        assembly {\n            _profileCreatorWhitelisted.slot := PROFILE_CREATOR_WHITELIST_MAPPING_SLOT\n        }\n    }\n\n    function migrationAdminWhitelisted()\n        internal\n        pure\n        returns (mapping(address => bool) storage _migrationAdminWhitelisted)\n    {\n        assembly {\n            _migrationAdminWhitelisted.slot := MIGRATION_ADMINS_WHITELISTED_MAPPING_SLOT\n        }\n    }\n\n    function legacyCollectFollowValidationHelper()\n        internal\n        pure\n        returns (mapping(address => uint256) storage _legacyCollectFollowValidationHelper)\n    {\n        assembly {\n            _legacyCollectFollowValidationHelper.slot := LEGACY_COLLECT_FOLLOW_VALIDATION_HELPER_MAPPING_SLOT\n        }\n    }\n\n    function getGovernance() internal view returns (address _governance) {\n        assembly {\n            _governance := sload(GOVERNANCE_SLOT)\n        }\n    }\n\n    function setGovernance(address newGovernance) internal {\n        assembly {\n            sstore(GOVERNANCE_SLOT, newGovernance)\n        }\n    }\n\n    function getEmergencyAdmin() internal view returns (address _emergencyAdmin) {\n        assembly {\n            _emergencyAdmin := sload(EMERGENCY_ADMIN_SLOT)\n        }\n    }\n\n    function setEmergencyAdmin(address newEmergencyAdmin) internal {\n        assembly {\n            sstore(EMERGENCY_ADMIN_SLOT, newEmergencyAdmin)\n        }\n    }\n\n    function getState() internal view returns (Types.ProtocolState _state) {\n        assembly {\n            _state := sload(PROTOCOL_STATE_SLOT)\n        }\n    }\n\n    function setState(Types.ProtocolState newState) internal {\n        assembly {\n            sstore(PROTOCOL_STATE_SLOT, newState)\n        }\n    }\n\n    function getLastInitializedRevision() internal view returns (uint256 _lastInitializedRevision) {\n        assembly {\n            _lastInitializedRevision := sload(LAST_INITIALIZED_REVISION_SLOT)\n        }\n    }\n\n    function setLastInitializedRevision(uint256 newLastInitializedRevision) internal {\n        assembly {\n            sstore(LAST_INITIALIZED_REVISION_SLOT, newLastInitializedRevision)\n        }\n    }\n\n    function getTreasuryData() internal pure returns (Types.TreasuryData storage _treasuryData) {\n        assembly {\n            _treasuryData.slot := TREASURY_DATA_SLOT\n        }\n    }\n\n    function setProfileTokenURIContract(address profileTokenURIContract) internal {\n        assembly {\n            sstore(PROFILE_TOKEN_URI_CONTRACT_SLOT, profileTokenURIContract)\n        }\n    }\n\n    function setFollowTokenURIContract(address followTokenURIContract) internal {\n        assembly {\n            sstore(FOLLOW_TOKEN_URI_CONTRACT_SLOT, followTokenURIContract)\n        }\n    }\n\n    function getProfileTokenURIContract() internal view returns (address _profileTokenURIContract) {\n        assembly {\n            _profileTokenURIContract := sload(PROFILE_TOKEN_URI_CONTRACT_SLOT)\n        }\n    }\n\n    function getFollowTokenURIContract() internal view returns (address _followTokenURIContract) {\n        assembly {\n            _followTokenURIContract := sload(FOLLOW_TOKEN_URI_CONTRACT_SLOT)\n        }\n    }\n}\n"
    },
    "lens-modules/contracts/misc/ModuleRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport {IModuleRegistry} from '../interfaces/IModuleRegistry.sol';\nimport {IERC20Metadata} from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport {ILensModule} from '../modules/interfaces/ILensModule.sol';\n\nimport {IPublicationActionModule} from '../interfaces/IPublicationActionModule.sol';\nimport {IFollowModule} from '../interfaces/IFollowModule.sol';\nimport {IReferenceModule} from '../interfaces/IReferenceModule.sol';\n\n/**\n * @title ModuleRegistry\n * @author Lens Protocol\n * @notice A registry for modules and currencies\n * @custom:upgradeable Transparent upgradeable proxy without initializer.\n */\ncontract ModuleRegistry is IModuleRegistry {\n    bytes4 private constant LENS_MODULE_INTERFACE_ID = bytes4(keccak256(abi.encodePacked('LENS_MODULE')));\n\n    event ModuleRegistered(\n        address indexed moduleAddress,\n        uint256 indexed moduleType,\n        string metadata,\n        uint256 timestamp\n    );\n\n    event erc20CurrencyRegistered(\n        address indexed erc20CurrencyAddress,\n        string name,\n        string symbol,\n        uint8 decimals,\n        uint256 timestamp\n    );\n\n    error NotLensModule();\n    error ModuleDoesNotSupportType(uint256 moduleType);\n\n    mapping(address moduleAddress => uint256 moduleTypesBitmap) internal registeredModules;\n\n    mapping(address erc20CurrencyAddress => bool) internal registeredErc20Currencies;\n\n    // Modules\n\n    function verifyModule(address moduleAddress, uint256 moduleType) external returns (bool) {\n        registerModule(moduleAddress, moduleType);\n        return true;\n    }\n\n    function registerModule(address moduleAddress, uint256 moduleType) public returns (bool registrationWasPerformed) {\n        // This will fail if moduleType is out of range for `IModuleRegistry.ModuleType`\n        require(\n            moduleType > 0 && moduleType <= uint256(type(IModuleRegistry.ModuleType).max),\n            'Module Type out of bounds'\n        );\n\n        bool isAlreadyRegisteredAsThatType = registeredModules[moduleAddress] & (1 << moduleType) != 0;\n        if (isAlreadyRegisteredAsThatType) {\n            return false;\n        } else {\n            if (!ILensModule(moduleAddress).supportsInterface(LENS_MODULE_INTERFACE_ID)) {\n                revert NotLensModule();\n            }\n\n            validateModuleSupportsType(moduleAddress, moduleType);\n\n            string memory metadata = ILensModule(moduleAddress).getModuleMetadataURI();\n            emit ModuleRegistered(moduleAddress, moduleType, metadata, block.timestamp);\n            registeredModules[moduleAddress] |= (1 << moduleType);\n            return true;\n        }\n    }\n\n    function validateModuleSupportsType(address moduleAddress, uint256 moduleType) internal view {\n        bool supportsInterface;\n        if (moduleType == uint256(IModuleRegistry.ModuleType.PUBLICATION_ACTION_MODULE)) {\n            supportsInterface = ILensModule(moduleAddress).supportsInterface(\n                type(IPublicationActionModule).interfaceId\n            );\n        } else if (moduleType == uint256(IModuleRegistry.ModuleType.FOLLOW_MODULE)) {\n            supportsInterface = ILensModule(moduleAddress).supportsInterface(type(IFollowModule).interfaceId);\n        } else if (moduleType == uint256(IModuleRegistry.ModuleType.REFERENCE_MODULE)) {\n            supportsInterface = ILensModule(moduleAddress).supportsInterface(type(IReferenceModule).interfaceId);\n        }\n\n        if (!supportsInterface) {\n            revert ModuleDoesNotSupportType(moduleType);\n        }\n    }\n\n    function getModuleTypes(address moduleAddress) public view returns (uint256) {\n        return registeredModules[moduleAddress];\n    }\n\n    function isModuleRegistered(address moduleAddress) external view returns (bool) {\n        return registeredModules[moduleAddress] != 0;\n    }\n\n    function isModuleRegisteredAs(address moduleAddress, uint256 moduleType) public view returns (bool) {\n        require(moduleType <= type(uint8).max);\n        return registeredModules[moduleAddress] & (1 << moduleType) != 0;\n    }\n\n    // Currencies\n\n    function verifyErc20Currency(address currencyAddress) external returns (bool) {\n        registerErc20Currency(currencyAddress);\n        return true;\n    }\n\n    function registerErc20Currency(address currencyAddress) public returns (bool registrationWasPerformed) {\n        bool isAlreadyRegistered = registeredErc20Currencies[currencyAddress];\n        if (isAlreadyRegistered) {\n            return false;\n        } else {\n            uint8 decimals = IERC20Metadata(currencyAddress).decimals();\n            string memory name = IERC20Metadata(currencyAddress).name();\n            string memory symbol = IERC20Metadata(currencyAddress).symbol();\n\n            emit erc20CurrencyRegistered(currencyAddress, name, symbol, decimals, block.timestamp);\n            registeredErc20Currencies[currencyAddress] = true;\n            return true;\n        }\n    }\n\n    function isErc20CurrencyRegistered(address currencyAddress) external view returns (bool) {\n        return registeredErc20Currencies[currencyAddress];\n    }\n}\n"
    },
    "lens-modules/contracts/modules/act/collect/base/BaseFeeCollectModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Errors} from '../../../constants/Errors.sol';\nimport {FeeModuleBase} from '../../../FeeModuleBase.sol';\nimport {ICollectModule} from '../../../interfaces/ICollectModule.sol';\nimport {ActionRestricted} from '../../../ActionRestricted.sol';\n\nimport {ModuleTypes} from '../../../libraries/constants/ModuleTypes.sol';\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {FollowValidationLib} from '../../../libraries/FollowValidationLib.sol';\n\nimport {BaseFeeCollectModuleInitData, BaseProfilePublicationData, IBaseFeeCollectModule} from '../../../interfaces/IBaseFeeCollectModule.sol';\n\n/**\n * @title BaseFeeCollectModule\n * @author Lens Protocol\n *\n * @notice This is base Lens CollectModule implementation, allowing customization of time to collect, number of collects\n * and Followers-only restriction. Charges a fee for collect and distributing it among Receiver/Referrals/Treasury.\n * @dev Here we use \"Base\" terminology to anything that represents this base functionality (base structs,\n * base functions, base storage). Other collect modules can be built on top of the \"Base\" by inheriting from this\n * contract and overriding functions.\n * This contract is marked \"abstract\" as it requires you to implement initializePublicationCollectModule and\n * getPublicationData functions when you inherit from it. See SimpleFeeCollectModule as an example implementation.\n */\nabstract contract BaseFeeCollectModule is FeeModuleBase, ActionRestricted, IBaseFeeCollectModule {\n    using SafeERC20 for IERC20;\n\n    address immutable HUB;\n\n    mapping(uint256 => mapping(uint256 => BaseProfilePublicationData)) internal _dataByPublicationByProfile;\n\n    constructor(\n        address hub,\n        address actionModule,\n        address moduleRegistry\n    ) ActionRestricted(actionModule) FeeModuleBase(hub, moduleRegistry) {\n        HUB = hub;\n    }\n\n    function supportsInterface(bytes4 interfaceID) public pure virtual returns (bool) {\n        return interfaceID == type(ICollectModule).interfaceId;\n    }\n\n    /**\n     * @inheritdoc ICollectModule\n     * @notice Processes a collect by:\n     *  1. Validating that collect action meets all needed criteria\n     *  2. Processing the collect action either with or without referral\n     *\n     * @param processCollectParams Collect action parameters (see ModuleTypes.ProcessCollectParams struct)\n     */\n    function processCollect(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) external virtual onlyActionModule returns (bytes memory) {\n        _validateAndStoreCollect(processCollectParams);\n\n        if (processCollectParams.referrerProfileIds.length == 0) {\n            _processCollect(processCollectParams);\n        } else {\n            _processCollectWithReferral(processCollectParams);\n        }\n        return '';\n    }\n\n    /// @inheritdoc IBaseFeeCollectModule\n    function getBasePublicationData(\n        uint256 profileId,\n        uint256 pubId\n    ) public view virtual returns (BaseProfilePublicationData memory) {\n        return _dataByPublicationByProfile[profileId][pubId];\n    }\n\n    /// @inheritdoc IBaseFeeCollectModule\n    function calculateFee(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) public view virtual returns (uint160) {\n        return\n            _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n                processCollectParams.publicationCollectedId\n            ].amount;\n    }\n\n    /**\n     * @dev Validates the Base parameters like:\n     * 1) Is the currency whitelisted\n     * 2) Is the referralFee in valid range\n     * 3) Is the end of collects timestamp in valid range\n     *\n     * This should be called during initializePublicationCollectModule()\n     *\n     * @param baseInitData Module initialization data (see BaseFeeCollectModuleInitData struct)\n     */\n    function _validateBaseInitData(BaseFeeCollectModuleInitData memory baseInitData) internal virtual {\n        if (\n            (baseInitData.amount == 0 && baseInitData.currency != address(0)) ||\n            (baseInitData.amount != 0 && baseInitData.currency == address(0)) ||\n            baseInitData.referralFee > BPS_MAX ||\n            (baseInitData.endTimestamp != 0 && baseInitData.endTimestamp < block.timestamp)\n        ) {\n            revert Errors.InitParamsInvalid();\n        }\n        _verifyErc20Currency(baseInitData.currency);\n    }\n\n    /**\n     * @dev Stores the initial module parameters\n     *\n     * This should be called during initializePublicationCollectModule()\n     *\n     * @param profileId The token ID of the profile publishing the publication.\n     * @param pubId The publication ID.\n     * @param baseInitData Module initialization data (see BaseFeeCollectModuleInitData struct)\n     */\n    function _storeBasePublicationCollectParameters(\n        uint256 profileId,\n        uint256 pubId,\n        BaseFeeCollectModuleInitData memory baseInitData\n    ) internal virtual {\n        _dataByPublicationByProfile[profileId][pubId].amount = baseInitData.amount;\n        _dataByPublicationByProfile[profileId][pubId].collectLimit = baseInitData.collectLimit;\n        _dataByPublicationByProfile[profileId][pubId].currency = baseInitData.currency;\n        _dataByPublicationByProfile[profileId][pubId].recipient = baseInitData.recipient;\n        _dataByPublicationByProfile[profileId][pubId].referralFee = baseInitData.referralFee;\n        _dataByPublicationByProfile[profileId][pubId].followerOnly = baseInitData.followerOnly;\n        _dataByPublicationByProfile[profileId][pubId].endTimestamp = baseInitData.endTimestamp;\n    }\n\n    /**\n     * @dev Validates the collect action by checking that:\n     * 1) the collector is a follower (if enabled)\n     * 2) the number of collects after the action doesn't surpass the collect limit (if enabled)\n     * 3) the current block timestamp doesn't surpass the end timestamp (if enabled)\n     *\n     * This should be called during processCollect()\n     */\n    function _validateAndStoreCollect(ModuleTypes.ProcessCollectParams calldata processCollectParams) internal virtual {\n        uint96 collectsAfter = ++_dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].currentCollects;\n\n        if (\n            _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n                processCollectParams.publicationCollectedId\n            ].followerOnly\n        ) {\n            FollowValidationLib.validateIsFollowingOrSelf({\n                hub: HUB,\n                followerProfileId: processCollectParams.collectorProfileId,\n                followedProfileId: processCollectParams.publicationCollectedProfileId\n            });\n        }\n\n        uint256 endTimestamp = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].endTimestamp;\n        uint256 collectLimit = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].collectLimit;\n\n        if (collectLimit != 0 && collectsAfter > collectLimit) {\n            revert Errors.MintLimitExceeded();\n        }\n        if (endTimestamp != 0 && block.timestamp > endTimestamp) {\n            revert Errors.CollectExpired();\n        }\n    }\n\n    /**\n     * @dev Internal processing of a collect:\n     *  1. Calculation of fees\n     *  2. Validation that fees are what collector expected\n     *  3. Transfer of fees to recipient(-s) and treasury\n     *\n     * @param processCollectParams Parameters of the collect\n     */\n    function _processCollect(ModuleTypes.ProcessCollectParams calldata processCollectParams) internal virtual {\n        uint256 amount = calculateFee(processCollectParams);\n        address currency = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].currency;\n        _validateDataIsExpected(processCollectParams.data, currency, amount);\n\n        (address treasury, uint16 treasuryFee) = _treasuryData();\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\n\n        if (treasuryAmount > 0) {\n            IERC20(currency).safeTransferFrom(processCollectParams.transactionExecutor, treasury, treasuryAmount);\n        }\n\n        // Send amount after treasury cut, to all recipients\n        _transferToRecipients(processCollectParams, currency, amount - treasuryAmount);\n    }\n\n    /**\n     * @dev Internal processing of a collect with a referrals (if any).\n     *\n     * Same as _processCollect, but also includes transfer to referrals (if any):\n     *  1. Calculation of fees\n     *  2. Validation that fees are what collector expected\n     *  3. Transfer of fees to treasury, referrals (if any) and recipients\n     *\n     * @param processCollectParams Parameters of the collect\n     */\n    function _processCollectWithReferral(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) internal virtual {\n        uint256 amount = calculateFee(processCollectParams);\n        address currency = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].currency;\n\n        _validateDataIsExpected(processCollectParams.data, currency, amount);\n\n        (address treasury, uint16 treasuryFee) = _treasuryData();\n        uint256 treasuryAmount = (amount * treasuryFee) / BPS_MAX;\n\n        if (treasuryAmount > 0) {\n            IERC20(currency).safeTransferFrom(processCollectParams.transactionExecutor, treasury, treasuryAmount);\n        }\n\n        uint256 amountAfterReferrals = _transferToReferrals(processCollectParams, currency, amount - treasuryAmount);\n\n        _transferToRecipients(processCollectParams, currency, amountAfterReferrals);\n    }\n\n    /**\n     * @dev Tranfers the fee to recipient(-s)\n     *\n     * Override this to add additional functionality (e.g. multiple recipients)\n     *\n     * @param processCollectParams Parameters of the collect\n     * @param currency Currency of the transaction\n     * @param amount Amount to transfer to recipient(-s)\n     */\n    function _transferToRecipients(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams,\n        address currency,\n        uint256 amount\n    ) internal virtual {\n        address recipient = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].recipient;\n\n        if (amount > 0) {\n            IERC20(currency).safeTransferFrom(processCollectParams.transactionExecutor, recipient, amount);\n        }\n    }\n\n    /**\n     * @dev Tranfers the part of fee to referral(-s)\n     *\n     * Override this to add additional functionality (e.g. different amounts to different referrals, etc)\n     *\n     * @param processCollectParams Parameters of the collect\n     * @param currency Currency of the transaction\n     * @param amount Amount of the fee after subtracting the Treasury part.\n     */\n    function _transferToReferrals(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams,\n        address currency,\n        uint256 amount\n    ) internal virtual returns (uint256) {\n        uint256 referralFee = _dataByPublicationByProfile[processCollectParams.publicationCollectedProfileId][\n            processCollectParams.publicationCollectedId\n        ].referralFee;\n        uint256 totalReferralsAmount;\n        if (referralFee != 0) {\n            // The reason we levy the referral fee on the adjusted amount is so that referral fees\n            // don't bypass the treasury fee, in essence referrals pay their fair share to the treasury.\n            totalReferralsAmount = (amount * referralFee) / BPS_MAX;\n            uint256 numberOfReferrals = processCollectParams.referrerProfileIds.length;\n            uint256 amountPerReferral = totalReferralsAmount / numberOfReferrals;\n            if (amountPerReferral > 0) {\n                uint256 i;\n                while (i < numberOfReferrals) {\n                    address referralRecipient = IERC721(HUB).ownerOf(processCollectParams.referrerProfileIds[i]);\n\n                    // Send referral fee in ERC20 tokens\n                    IERC20(currency).safeTransferFrom(\n                        processCollectParams.transactionExecutor,\n                        referralRecipient,\n                        amountPerReferral\n                    );\n                    unchecked {\n                        ++i;\n                    }\n                }\n            }\n        }\n        return amount - totalReferralsAmount;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/act/collect/CollectNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport {ERC2981CollectionRoyalties} from '../../../base/ERC2981CollectionRoyalties.sol';\nimport {Errors} from '../../../libraries/constants/Errors.sol';\nimport {ICollectNFT} from '../../../interfaces/ICollectNFT.sol';\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport {ILensHub} from '../../../interfaces/ILensHub.sol';\nimport {LensBaseERC721} from '../../../base/LensBaseERC721.sol';\nimport {ActionRestricted} from '../../ActionRestricted.sol';\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\n\n/**\n * @title CollectNFT\n * @author Lens Protocol\n *\n * @dev This is the CollectNFT for Lens V2, it differs from LegacyCollectNFT that it's restricted to be called by an\n * action module instead of LensHub.\n *\n * @notice This is the NFT contract that is minted upon collecting a given publication. It is cloned upon\n * the first collect for a given publication, and the token URI points to the original publication's contentURI.\n */\ncontract CollectNFT is LensBaseERC721, ERC2981CollectionRoyalties, ActionRestricted, ICollectNFT {\n    using Strings for uint256;\n\n    address public immutable HUB;\n\n    uint256 internal _profileId;\n    uint256 internal _pubId;\n    uint256 internal _tokenIdCounter;\n\n    bool private _initialized;\n\n    uint256 internal _royaltiesInBasisPoints;\n\n    // We create the CollectNFT with the pre-computed HUB address before deploying the hub proxy in order\n    // to initialize the hub proxy at construction.\n    constructor(address hub, address actionModule) ActionRestricted(actionModule) {\n        HUB = hub;\n        _initialized = true;\n    }\n\n    /// @inheritdoc ICollectNFT\n    function initialize(uint256 profileId, uint256 pubId) external override {\n        if (_initialized) revert Errors.Initialized();\n        _initialized = true;\n        _setRoyalty(1000); // 10% of royalties\n        _profileId = profileId;\n        _pubId = pubId;\n        // _name and _symbol remain uninitialized because we override the getters below\n    }\n\n    /// @inheritdoc ICollectNFT\n    function mint(address to) external override onlyActionModule returns (uint256) {\n        unchecked {\n            uint256 tokenId = ++_tokenIdCounter;\n            _mint(to, tokenId);\n            return tokenId;\n        }\n    }\n\n    /// @inheritdoc ICollectNFT\n    function getSourcePublicationPointer() external view override returns (uint256, uint256) {\n        return (_profileId, _pubId);\n    }\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        if (!_exists(tokenId)) revert Errors.TokenDoesNotExist();\n        return ILensHub(HUB).getContentURI(_profileId, _pubId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view override returns (string memory) {\n        return string.concat('Lens Collect | Profile #', _profileId.toString(), ' - Publication #', _pubId.toString());\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public pure override returns (string memory) {\n        return 'LENS-COLLECT';\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC2981CollectionRoyalties, LensBaseERC721)\n        returns (bool)\n    {\n        return\n            ERC2981CollectionRoyalties.supportsInterface(interfaceId) || LensBaseERC721.supportsInterface(interfaceId);\n    }\n\n    function _getReceiver(\n        uint256 /* tokenId */\n    ) internal view override returns (address) {\n        if (!ILensHub(HUB).exists(_profileId)) {\n            return address(0);\n        }\n        return IERC721(HUB).ownerOf(_profileId);\n    }\n\n    function _beforeRoyaltiesSet(\n        uint256 /* royaltiesInBasisPoints */\n    ) internal view override {\n        if (IERC721(HUB).ownerOf(_profileId) != msg.sender) {\n            revert Errors.NotProfileOwner();\n        }\n    }\n\n    function _getRoyaltiesInBasisPointsSlot() internal pure override returns (uint256) {\n        uint256 slot;\n        assembly {\n            slot := _royaltiesInBasisPoints.slot\n        }\n        return slot;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/act/collect/CollectPublicationAction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport {IPublicationActionModule} from '../../../interfaces/IPublicationActionModule.sol';\nimport {ICollectModule} from '../../interfaces/ICollectModule.sol';\nimport {ICollectNFT} from '../../../interfaces/ICollectNFT.sol';\nimport {Types} from '../../../libraries/constants/Types.sol';\nimport {ModuleTypes} from '../../libraries/constants/ModuleTypes.sol';\nimport {Clones} from '@openzeppelin/contracts/proxy/Clones.sol';\nimport {Errors} from '../../constants/Errors.sol';\nimport {HubRestricted} from '../../../base/HubRestricted.sol';\nimport {ILensModule} from '../../interfaces/ILensModule.sol';\n\nimport {LensModuleMetadataInitializable} from '../../LensModuleMetadataInitializable.sol';\n\n/**\n * @title CollectPublicationAction\n * @author LensProtocol\n * @notice An Publication Action module that allows users to collect publications.\n * @custom:upgradeable Transparent upgradeable proxy without initializer.\n */\ncontract CollectPublicationAction is LensModuleMetadataInitializable, HubRestricted, IPublicationActionModule {\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\n        return interfaceID == type(IPublicationActionModule).interfaceId || super.supportsInterface(interfaceID);\n    }\n\n    struct CollectData {\n        address collectModule;\n        address collectNFT;\n    }\n\n    event CollectModuleRegistered(address collectModule, string metadata, uint256 timestamp);\n\n    /**\n     * @dev Emitted when a collectNFT clone is deployed using a lazy deployment pattern.\n     *\n     * @param profileId The publisher's profile token ID.\n     * @param pubId The publication associated with the newly deployed collectNFT clone's ID.\n     * @param collectNFT The address of the newly deployed collectNFT clone.\n     * @param timestamp The current block timestamp.\n     */\n    event CollectNFTDeployed(\n        uint256 indexed profileId,\n        uint256 indexed pubId,\n        address indexed collectNFT,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted upon a successful collect action.\n     *\n     * @param collectedProfileId The token ID of the profile that published the collected publication.\n     * @param collectedPubId The ID of the collected publication.\n     * @param collectorProfileId The token ID of the profile that collected the publication.\n     * @param nftRecipient The address that received the collect NFT.\n     * @param collectActionData The custom data passed to the collect module, if any.\n     * @param collectActionResult The data returned from the collect module's collect action. This is ABI-encoded\n     * and depends on the collect module chosen.\n     * @param collectNFT The address of the NFT collection where the minted collect NFT belongs to.\n     * @param tokenId The token ID of the collect NFT that was minted as a collect of the publication.\n     * @param transactionExecutor The address of the account that executed this operation.\n     * @param timestamp The current block timestamp.\n     */\n    event Collected(\n        uint256 indexed collectedProfileId,\n        uint256 indexed collectedPubId,\n        uint256 indexed collectorProfileId,\n        address nftRecipient,\n        bytes collectActionData,\n        bytes collectActionResult,\n        address collectNFT,\n        uint256 tokenId,\n        address transactionExecutor,\n        uint256 timestamp\n    );\n\n    error NotCollectModule();\n\n    address public immutable COLLECT_NFT_IMPL;\n\n    mapping(address collectModule => bool isWhitelisted) internal _collectModuleRegistered;\n    mapping(uint256 profileId => mapping(uint256 pubId => CollectData collectData)) internal _collectDataByPub;\n\n    constructor(\n        address hub,\n        address collectNFTImpl,\n        address moduleOwner\n    ) HubRestricted(hub) LensModuleMetadataInitializable(moduleOwner) {\n        COLLECT_NFT_IMPL = collectNFTImpl;\n    }\n\n    function verifyCollectModule(address collectModule) public returns (bool) {\n        registerCollectModule(collectModule);\n        return true;\n    }\n\n    function registerCollectModule(address collectModule) public returns (bool) {\n        if (_collectModuleRegistered[collectModule]) {\n            return false;\n        } else {\n            if (!ILensModule(collectModule).supportsInterface(type(ICollectModule).interfaceId)) {\n                revert NotCollectModule();\n            }\n\n            string memory metadata = ILensModule(collectModule).getModuleMetadataURI();\n            emit CollectModuleRegistered(collectModule, metadata, block.timestamp);\n            _collectModuleRegistered[collectModule] = true;\n            return true;\n        }\n    }\n\n    function initializePublicationAction(\n        uint256 profileId,\n        uint256 pubId,\n        address transactionExecutor,\n        bytes calldata data\n    ) external override onlyHub returns (bytes memory) {\n        (address collectModule, bytes memory collectModuleInitData) = abi.decode(data, (address, bytes));\n        if (_collectDataByPub[profileId][pubId].collectModule != address(0)) {\n            revert Errors.AlreadyInitialized();\n        }\n        verifyCollectModule(collectModule);\n        _collectDataByPub[profileId][pubId].collectModule = collectModule;\n        ICollectModule(collectModule).initializePublicationCollectModule(\n            profileId,\n            pubId,\n            transactionExecutor,\n            collectModuleInitData\n        );\n        return '';\n    }\n\n    function processPublicationAction(\n        Types.ProcessActionParams calldata processActionParams\n    ) external override onlyHub returns (bytes memory) {\n        address collectModule = _collectDataByPub[processActionParams.publicationActedProfileId][\n            processActionParams.publicationActedId\n        ].collectModule;\n        if (collectModule == address(0)) {\n            revert Errors.CollectNotAllowed();\n        }\n        address collectNFT = _getOrDeployCollectNFT({\n            publicationCollectedProfileId: processActionParams.publicationActedProfileId,\n            publicationCollectedId: processActionParams.publicationActedId,\n            collectNFTImpl: COLLECT_NFT_IMPL\n        });\n        (address collectNftRecipient, bytes memory collectData) = abi.decode(\n            processActionParams.actionModuleData,\n            (address, bytes)\n        );\n        uint256 tokenId = ICollectNFT(collectNFT).mint(collectNftRecipient);\n        bytes memory collectActionResult = _processCollect(collectModule, collectData, processActionParams);\n        _emitCollectedEvent(\n            processActionParams,\n            collectNftRecipient,\n            collectData,\n            collectActionResult,\n            collectNFT,\n            tokenId\n        );\n        return abi.encode(collectNFT, tokenId, collectModule, collectActionResult);\n    }\n\n    function _emitCollectedEvent(\n        Types.ProcessActionParams calldata processActionParams,\n        address collectNftRecipient,\n        bytes memory collectData,\n        bytes memory collectActionResult,\n        address collectNFT,\n        uint256 tokenId\n    ) private {\n        emit Collected({\n            collectedProfileId: processActionParams.publicationActedProfileId,\n            collectedPubId: processActionParams.publicationActedId,\n            collectorProfileId: processActionParams.actorProfileId,\n            nftRecipient: collectNftRecipient,\n            collectActionData: collectData,\n            collectActionResult: collectActionResult,\n            collectNFT: collectNFT,\n            tokenId: tokenId,\n            transactionExecutor: processActionParams.transactionExecutor,\n            timestamp: block.timestamp\n        });\n    }\n\n    function getCollectData(uint256 profileId, uint256 pubId) external view returns (CollectData memory) {\n        return _collectDataByPub[profileId][pubId];\n    }\n\n    function _getOrDeployCollectNFT(\n        uint256 publicationCollectedProfileId,\n        uint256 publicationCollectedId,\n        address collectNFTImpl\n    ) private returns (address) {\n        address collectNFT = _collectDataByPub[publicationCollectedProfileId][publicationCollectedId].collectNFT;\n        if (collectNFT == address(0)) {\n            collectNFT = _deployCollectNFT(publicationCollectedProfileId, publicationCollectedId, collectNFTImpl);\n            _collectDataByPub[publicationCollectedProfileId][publicationCollectedId].collectNFT = collectNFT;\n        }\n        return collectNFT;\n    }\n\n    function _processCollect(\n        address collectModule,\n        bytes memory collectData,\n        Types.ProcessActionParams calldata processActionParams\n    ) private returns (bytes memory) {\n        return\n            ICollectModule(collectModule).processCollect(\n                ModuleTypes.ProcessCollectParams({\n                    publicationCollectedProfileId: processActionParams.publicationActedProfileId,\n                    publicationCollectedId: processActionParams.publicationActedId,\n                    collectorProfileId: processActionParams.actorProfileId,\n                    collectorProfileOwner: processActionParams.actorProfileOwner,\n                    transactionExecutor: processActionParams.transactionExecutor,\n                    referrerProfileIds: processActionParams.referrerProfileIds,\n                    referrerPubIds: processActionParams.referrerPubIds,\n                    referrerPubTypes: processActionParams.referrerPubTypes,\n                    data: collectData\n                })\n            );\n    }\n\n    function _deployCollectNFT(uint256 profileId, uint256 pubId, address collectNFTImpl) private returns (address) {\n        address collectNFT = Clones.clone(collectNFTImpl);\n\n        ICollectNFT(collectNFT).initialize(profileId, pubId);\n        emit CollectNFTDeployed(profileId, pubId, collectNFT, block.timestamp);\n\n        return collectNFT;\n    }\n\n    function isCollectModuleRegistered(address collectModule) external view returns (bool) {\n        return _collectModuleRegistered[collectModule];\n    }\n}\n"
    },
    "lens-modules/contracts/modules/ActionRestricted.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport {Errors} from './constants/Errors.sol';\n\n/**\n * @title ActionRestricted\n * @author Lens Protocol\n *\n * @notice This abstract contract adds a public `ACTION_MODULE` immutable field, and `onlyActionModule` modifier,\n * to inherit from contracts that have functions restricted to be only called by the Action Modules.\n */\nabstract contract ActionRestricted {\n    address public immutable ACTION_MODULE;\n\n    modifier onlyActionModule() {\n        if (msg.sender != ACTION_MODULE) {\n            revert Errors.NotActionModule();\n        }\n        _;\n    }\n\n    constructor(address actionModule) {\n        ACTION_MODULE = actionModule;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/base/LensModuleRegistrant.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IModuleRegistry} from \"../../interfaces/IModuleRegistry.sol\";\nimport {Types} from \"../../libraries/constants/Types.sol\";\n\nimport {ILensModuleRegistrant} from \"../interfaces/IModuleRegistrant.sol\";\n\n/**\n * @title LensModuleRegistrant\n * @author Paul Burke\n *\n * @notice This abstract contract adds a public `MODULE_REGISTRY` immutable field, and provides functions\n * for registering a module in the registry and checking if a module is registered.\n */\nabstract contract LensModuleRegistrant is ILensModuleRegistrant, Ownable {\n    event ModuleRegistered();\n\n    IModuleRegistry public immutable MODULE_REGISTRY;\n\n    constructor(IModuleRegistry moduleRegistry) {\n        MODULE_REGISTRY = moduleRegistry;\n    }\n\n    /// @inheritdoc ILensModuleRegistrant\n    function isRegistered() public view override returns (bool) {\n        return MODULE_REGISTRY.isModuleRegistered(address(this));\n    }\n\n    /// @inheritdoc ILensModuleRegistrant\n    function registerModule() external override onlyOwner returns (bool) {\n        if (isRegistered()) {\n            return true;\n        }\n\n        bool registered = MODULE_REGISTRY.registerModule(\n            address(this),\n            uint256(IModuleRegistry.ModuleType.PUBLICATION_ACTION_MODULE)\n        );\n\n        if (registered) {\n            emit ModuleRegistered();\n        }\n\n        return registered;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/constants/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nlibrary Errors {\n    error FollowInvalid();\n    error ModuleDataMismatch();\n    error NotHub();\n    error InitParamsInvalid();\n    error InvalidParams();\n    error MintLimitExceeded();\n    error CollectExpired();\n    error NotActionModule();\n    error CollectNotAllowed();\n    error AlreadyInitialized();\n}\n"
    },
    "lens-modules/contracts/modules/FeeModuleBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Errors} from './constants/Errors.sol';\nimport {ILensHub} from '../interfaces/ILensHub.sol';\nimport {IModuleRegistry} from '../interfaces/IModuleRegistry.sol';\n\n/**\n * @title FeeModuleBase\n * @author Lens Protocol\n *\n * @notice This is an abstract contract to be inherited from by modules that require basic fee functionality.\n * It contains getters for module globals parameters as well as a validation function to check expected data.\n */\nabstract contract FeeModuleBase {\n    uint16 internal constant BPS_MAX = 10000;\n\n    ILensHub private immutable HUB;\n    IModuleRegistry public immutable MODULE_REGISTRY;\n\n    constructor(address hub, address moduleRegistry) {\n        HUB = ILensHub(hub);\n        MODULE_REGISTRY = IModuleRegistry(moduleRegistry);\n    }\n\n    function _verifyErc20Currency(address currency) internal {\n        if (currency != address(0)) {\n            MODULE_REGISTRY.verifyErc20Currency(currency);\n        }\n    }\n\n    function _treasuryData() internal view returns (address, uint16) {\n        return HUB.getTreasuryData();\n    }\n\n    function _validateDataIsExpected(bytes calldata data, address currency, uint256 amount) internal pure {\n        (address decodedCurrency, uint256 decodedAmount) = abi.decode(data, (address, uint256));\n        if (decodedAmount != amount || decodedCurrency != currency) {\n            revert Errors.ModuleDataMismatch();\n        }\n    }\n}\n"
    },
    "lens-modules/contracts/modules/interfaces/IBaseFeeCollectModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\nimport {ICollectModule} from './ICollectModule.sol';\nimport {ModuleTypes} from '../libraries/constants/ModuleTypes.sol';\n\n/**\n * @notice A struct containing the necessary data to execute collect actions on a publication.\n *\n * @param amount The collecting cost associated with this publication. 0 for free collect.\n * @param collectLimit The maximum number of collects for this publication. 0 for no limit.\n * @param currency The currency associated with this publication.\n * @param currentCollects The current number of collects for this publication.\n * @param referralFee The referral fee associated with this publication.\n * @param followerOnly True if only followers of publisher may collect the post.\n * @param endTimestamp The end timestamp after which collecting is impossible. 0 for no expiry.\n * @param recipient Recipient of collect fees.\n */\nstruct BaseProfilePublicationData {\n    uint160 amount;\n    uint96 collectLimit;\n    address currency;\n    uint96 currentCollects;\n    address recipient;\n    uint16 referralFee;\n    bool followerOnly;\n    uint72 endTimestamp;\n}\n\n/**\n * @notice A struct containing the necessary data to initialize this Base Collect Module.\n *\n * @param amount The collecting cost associated with this publication. 0 for free collect.\n * @param collectLimit The maximum number of collects for this publication. 0 for no limit.\n * @param currency The currency associated with this publication.\n * @param referralFee The referral fee associated with this publication.\n * @param followerOnly True if only followers of publisher may collect the post.\n * @param endTimestamp The end timestamp after which collecting is impossible. 0 for no expiry.\n * @param recipient Recipient of collect fees.\n */\nstruct BaseFeeCollectModuleInitData {\n    uint160 amount;\n    uint96 collectLimit;\n    address currency;\n    uint16 referralFee;\n    bool followerOnly;\n    uint72 endTimestamp;\n    address recipient;\n}\n\ninterface IBaseFeeCollectModule is ICollectModule {\n    /**\n     * @notice Returns the Base publication data for a given publication, or an empty struct if that publication was not\n     * initialized with this module.\n     *\n     * @param profileId The token ID of the profile mapped to the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return The BaseProfilePublicationData struct mapped to that publication.\n     */\n    function getBasePublicationData(\n        uint256 profileId,\n        uint256 pubId\n    ) external view returns (BaseProfilePublicationData memory);\n\n    /**\n     * @notice Calculates and returns the collect fee of a publication.\n     * @dev Override this function to use a different formula for the fee.\n     *\n     * @return The collect fee of the specified publication.\n     */\n    function calculateFee(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) external view returns (uint160);\n}\n"
    },
    "lens-modules/contracts/modules/interfaces/ICollectModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {ModuleTypes} from '../libraries/constants/ModuleTypes.sol';\n\n/**\n * @title ICollectModule\n * @author Lens Protocol\n *\n * @notice This is the standard interface for all Lens-compatible CollectModules.\n * Collect modules allow users to execute custom logic upon a collect action over a publication, like:\n *  - Only allow the collect if the collector is following the publication author.\n *  - Only allow the collect if the collector has made a payment to\n *  - Allow any collect but only during the first 24 hours.\n *  - Etc.\n */\ninterface ICollectModule {\n    /**\n     * @notice Initializes data for a given publication being published.\n     * @custom:permissions LensHub.\n     *\n     * @param profileId The token ID of the profile publishing the publication.\n     * @param pubId The associated publication's LensHub publication ID.\n     * @param transactionExecutor The owner or an approved delegated executor.\n     * @param data Arbitrary data __passed from the user!__ to be decoded.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function initializePublicationCollectModule(\n        uint256 profileId,\n        uint256 pubId,\n        address transactionExecutor,\n        bytes calldata data\n    ) external returns (bytes memory);\n\n    /**\n     * @notice Processes a collect action for a given publication.\n     * @custom:permissions LensHub.\n     *\n     * @param processCollectParams The parameters for the collect action.\n     *\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n     * indexers or UIs.\n     */\n    function processCollect(\n        ModuleTypes.ProcessCollectParams calldata processCollectParams\n    ) external returns (bytes memory);\n}\n"
    },
    "lens-modules/contracts/modules/interfaces/ILensModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\n\ninterface ILensModule is IERC165 {\n    /// @dev for now we check for keccak('LENS_MODULE');\n    /// Override this and add the type(IModuleInterface).interfaceId for corresponding module type\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n\n    /// @notice Human-readable description of the module\n    // Can be JSON\n    // Can be contract source code\n    // Can be github link\n    // Can be ipfs with documentation\n    // etc\n    function getModuleMetadataURI() external view returns (string memory);\n}\n"
    },
    "lens-modules/contracts/modules/interfaces/IModuleRegistrant.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/**\n * @title ILensModuleRegistrant\n * @author Paul Burke\n *\n * @notice An interface for registering modules in the module registry\n */\ninterface ILensModuleRegistrant {\n    /**\n     * @dev Registers the open action in the module registry\n     * @return True if the module was registered, false otherwise\n     */\n    function registerModule() external returns (bool);\n\n    /**\n     * @dev Checks if the module is registered in the module registry\n     * @return True if the module is registered, false otherwise\n     */\n    function isRegistered() external view returns (bool);\n}\n"
    },
    "lens-modules/contracts/modules/LensModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {ILensModule} from './interfaces/ILensModule.sol';\n\nabstract contract LensModule is ILensModule {\n    /// @inheritdoc ILensModule\n    function supportsInterface(bytes4 interfaceID) public pure virtual override returns (bool) {\n        return interfaceID == bytes4(keccak256(abi.encodePacked('LENS_MODULE')));\n    }\n}\n"
    },
    "lens-modules/contracts/modules/LensModuleMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {LensModule} from './LensModule.sol';\n\nabstract contract LensModuleMetadata is LensModule, Ownable {\n    string private metadataURI;\n\n    function setModuleMetadataURI(string memory _metadataURI) external onlyOwner {\n        metadataURI = _metadataURI;\n    }\n\n    function getModuleMetadataURI() external view returns (string memory) {\n        return metadataURI;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/LensModuleMetadataInitializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {LensModuleMetadata} from './LensModuleMetadata.sol';\n\ncontract LensModuleMetadataInitializable is Ownable, LensModuleMetadata {\n    constructor(address owner_) Ownable() LensModuleMetadata() {\n        _transferOwnership(owner_);\n    }\n\n    function initialize(address moduleOwner) external virtual {\n        if (owner() != address(0) || moduleOwner == address(0)) {\n            revert();\n        }\n        _transferOwnership(moduleOwner);\n    }\n}\n"
    },
    "lens-modules/contracts/modules/libraries/constants/ModuleTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\nimport {Types} from '../../../libraries/constants/Types.sol';\n\n/**\n * @title Types\n * @author Lens Protocol\n *\n * @notice A standard library of data types used throughout the Lens Protocol modules.\n */\nlibrary ModuleTypes {\n    struct ProcessCollectParams {\n        uint256 publicationCollectedProfileId;\n        uint256 publicationCollectedId;\n        uint256 collectorProfileId;\n        address collectorProfileOwner;\n        address transactionExecutor;\n        uint256[] referrerProfileIds;\n        uint256[] referrerPubIds;\n        Types.PublicationType[] referrerPubTypes;\n        bytes data;\n    }\n}\n"
    },
    "lens-modules/contracts/modules/libraries/FollowValidationLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport {ILensHub} from '../../interfaces/ILensHub.sol';\nimport {Errors} from '../../libraries/constants/Errors.sol';\n\n/**\n * @title FollowValidationLib\n * @author Lens Protocol\n *\n * @notice A library contract that verifies that a user is following another user and reverts if not.\n */\nlibrary FollowValidationLib {\n    function validateIsFollowing(address hub, uint256 followerProfileId, uint256 followedProfileId) internal view {\n        if (!ILensHub(hub).isFollowing(followerProfileId, followedProfileId)) {\n            revert Errors.NotFollowing();\n        }\n    }\n\n    function validateIsFollowingOrSelf(\n        address hub,\n        uint256 followerProfileId,\n        uint256 followedProfileId\n    ) internal view {\n        // We treat following yourself is always true\n        if (followerProfileId == followedProfileId) {\n            return;\n        }\n        validateIsFollowing(hub, followerProfileId, followedProfileId);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}